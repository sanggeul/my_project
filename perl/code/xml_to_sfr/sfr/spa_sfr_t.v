
module SPA_SFR
(
	  // APB Interface
	  i_PCLK
	, i_PRESETn
	, i_PADDR
	, i_PSEL
	, i_PENABLE
	, i_PWRITE
	, i_PWDATA
	, o_PRDATA

	  // SPA_SW_RESET_REG 
	, o_DMA_RESET
	, o_GLOBAL_RESET

	  // SPA_CORE_START_REG 
	, o_CORE_START
	, o_CORE_BUSY

	  // SPA_MODE_REG 
	, o_RX_COLOR_MODE
	, o_TX_COLOR_MODE
	, o_RX_DPI_MODE

	  // SPA_MODULE_EN_REG 
	, o_VSD_EN
	, o_CIS_EN
	, o_RC1_EN
	, o_S1D_EN
	, o_SEG1_EN
	, o_SCC_EN
	, o_SEG2_EN
	, o_ABSD_EN
	, o_NEWABSD_EN
	, o_MAGD_EN
	, o_ACS_EN
	, o_BLANK_EN
	, o_ACBD_EN
	, o_ORIENT_EN
	, o_CLA_EN
	, o_BDS_EN
	, o_ADAPT_EN
	, o_SMAP_EN
	, o_TX_CH_EN

	  // SPA_RX_XD_REG 
	, o_RX_XD

	  // SPA_RX_YD_REG 
	, o_RX_YD

	  // SPA_TX_IMG_SIZE_REG 
	, o_TX_XD
	, o_TX_YD

	  // SPA_RX_PADDING_VAL_REG 
	, o_CH0_PADDING_VAL
	, o_CH1_PADDING_VAL
	, o_CH2_PADDING_VAL

	  // SPA_VERSION_REG 
	, o_VERSION

	  // SPA_IRQ_ENABLE_REG 
	, o_RX_BAND_START_EN
	, o_RX_BAND_END_EN
	, o_TX_BAND_START_EN
	, o_BAND_END_EN
	, o_PAGE_END_EN
	, o_ABS_DETECT_DONE_EN
	, o_ADAPT_TX_END_EN
	, o_SMAP_TX_END_EN
	, o_SW_RESET_DONE
	, o_TX_ERR
	, o_DTX_ADAPT_START_EN
	, o_DTX_SMAP_START_EN
	, o_DMA_TX_ADDR_ERR_CH0
	, o_DMA_TX_ADDR_ERR_CH1
	, o_DMA_TX_ADDR_ERR_CH2
	, o_MAGD_DONE
	, o_CLA_DONE
	, o_ADAPT_TX_ADDR_ERR_EN
	, o_SMAP_TX_ADDR_ERR_EN
	, o_TBL_DMA_END
	, o_TX_YD_ERR
	, o_RX_ERR
	, o_BDS_TX_END_EN
	, o_DTX_BDS_START_EN
	, o_BDS_TX_ADDR_ERR_EN
	, o_ORI_DONE
	, o_nABSD_DETECT_DONE
	, o_ACBD_DETECT_DONE
	, o_ACS_DONE
	, o_VSD_DONE
	, o_TX_CH_START_ERR_EN
	, o_TX_PAGE_END

	  // SPA_IRQ_PEND_REG 
	, o_RX_BAND_START
	, o_RX_BAND_END
	, o_TX_BAND_START
	, o_BAND_END
	, o_PAGE_END
	, o_ABSD_DETECT_END
	, o_ADAPT_TX_END
	, o_SMAP_TX_END
	, o_DMA_STOP_DONE
	, o_TX_ERR
	, o_DTX_ADAPT_START_ERR
	, o_DTX_SMAP_START_ERR
	, o_DMA_TX_ADDR_ERR_CH0
	, o_DMA_TX_ADDR_ERR_CH1
	, o_DMA_TX_ADDR_ERR_CH2
	, o_MAGD_DONE
	, o_CLA_DONE
	, o_ADAPT_TX_ADDR_ERR
	, o_SMAP_TX_ADDR_ERR
	, o_TBL_DMA_END
	, o_TX_YD_ERR
	, o_RX_ERR
	, o_BDS_TX_END
	, o_DTX_BDS_START_ERR
	, o_BDS_TX_ADDR_ERR
	, o_ORI_DONE
	, o_nABSD_DETECT_DONE
	, o_ACBD_DETECT_DONE
	, o_ACS_DONE
	, o_VSD_DONE
	, o_TX_CH_START_ERR
	, o_TX_PAGE_END

	  // SPA_IRQ_SVC_CNT_REG 
	, o_IRQ_SVC_CNT

	  // SPA_RAM_SW_MODE_REG 
	, o_RAM_SW_MODE

	  // SPA_RAM_CS_REG 
	, o_RAM_CS_00
	, o_RAM_CS_01
	, o_RAM_CS_02
	, o_RAM_CS_03
	, o_RAM_CS_04
	, o_RAM_CS_05
	, o_RAM_CS_06
	, o_RAM_CS_07
	, o_RAM_CS_08
	, o_RAM_CS_09
	, o_RAM_CS_10
	, o_RAM_CS_11
	, o_RAM_CS_12
	, o_RAM_CS_13
	, o_RAM_CS_14
	, o_RAM_CS_15
	, o_RAM_CS_16
	, o_RAM_CS_17
	, o_RAM_CS_18
	, o_RAM_CS_19
	, o_RAM_CS_20
	, o_RAM_CS_21
	, o_RAM_CS_22
	, o_RAM_CS_23
	, o_RAM_CS_24

	  // SPA_RAM_DATA_REG 
	, o_RAM_DATA

	  // SPA_RAM_ADDR_REG 
	, o_RAM_ADDR

	  // SPA_CORE_BAND_DONE_REG 
	, o_ALL_BAND_DONE
	, o_SEG2_BAND_DONE
	, o_SCC_BAND_DONE
	, o_SEG1_BAND_DONE
	, o_BSSB_BAND_DONE
	, o_S1D_BAND_DONE
	, o_RC1_BAND_DONE
	, o_CIS_BAND_DONE
	, o_VSD_BAND_DONE

	  // SPA_CORE_PAGE_DONE_REG 
	, o_ALL_PAGE_DONE
	, o_SEG2_PAGE_DONE
	, o_SCC_PAGE_DONE
	, o_SEG1_PAGE_DONE
	, o_BSSB_PAGE_DONE
	, o_S1D_PAGE_END
	, o_RC1_PAGE_DONE
	, o_CIS_PAGE_DONE
	, o_VSD_PAGE_DONE

	  // SPA_TBL_RX_CNT_REG 
	, o_TBL_RX_END_CNT
	, o_TBL_RX_START_CNT

	  // SPA_TBL_TX_CNT_REG 
	, o_TBL_TX_END_CNT
	, o_TBL_TX_START_CNT

	  // SPA_TBL_END_STATUS1_REG 
	, o_TBL_END_STATUS1

	  // SPA_TBL_START_REG 
	, o_TBL_START
	, o_TBL_RW

	  // SPA_TBL_ENABLE_REG 
	, o_TBL_ENABLE00
	, o_TBL_ENABLE01
	, o_TBL_ENABLE02
	, o_TBL_ENABLE03
	, o_TBL_ENABLE04
	, o_TBL_ENABLE05
	, o_TBL_ENABLE06
	, o_TBL_ENABLE07
	, o_TBL_ENABLE08
	, o_TBL_ENABLE09
	, o_TBL_ENABLE10
	, o_TBL_ENABLE11
	, o_TBL_ENABLE12
	, o_TBL_ENABLE13
	, o_TBL_ENABLE14
	, o_TBL_ENABLE15
	, o_TBL_ENABLE16
	, o_TBL_ENABLE17
	, o_TBL_ENABLE18
	, o_TBL_ENABLE19
	, o_TBL_ENABLE20
	, o_TBL_ENABLE21
	, o_TBL_ENABLE22
	, o_TBL_ENABLE23
	, o_TBL_ENABLE24

	  // SPA_TBL_ADDR_00_REG 
	, o_TBL_ADDR_00

	  // SPA_TBL_ADDR_01_REG 
	, o_TBL_ADDR_01

	  // SPA_TBL_ADDR_02_REG 
	, o_TBL_ADDR_02

	  // SPA_TBL_ADDR_03_REG 
	, o_TBL_ADDR_03

	  // SPA_TBL_ADDR_04_REG 
	, o_TBL_ADDR_04

	  // SPA_TBL_ADDR_05_REG 
	, o_TBL_ADDR_05

	  // SPA_TBL_ADDR_06_REG 
	, o_TBL_ADDR_06

	  // SPA_TBL_ADDR_07_REG 
	, o_TBL_ADDR_07

	  // SPA_TBL_ADDR_08_REG 
	, o_TBL_ADDR_08

	  // SPA_TBL_ADDR_09_REG 
	, o_TBL_ADDR_09

	  // SPA_TBL_ADDR_10_REG 
	, o_TBL_ADDR_10

	  // SPA_TBL_ADDR_11_REG 
	, o_TBL_ADDR_11

	  // SPA_TBL_ADDR_12_REG 
	, o_TBL_ADDR_12

	  // SPA_TBL_ADDR_13_REG 
	, o_TBL_ADDR_13

	  // SPA_TBL_ADDR_14_REG 
	, o_TBL_ADDR_14

	  // SPA_TBL_ADDR_15_REG 
	, o_TBL_ADDR_15

	  // SPA_TBL_ADDR_16_REG 
	, o_TBL_ADDR_16

	  // SPA_TBL_ADDR_17_REG 
	, o_TBL_ADDR_17

	  // SPA_TBL_ADDR_18_REG 
	, o_TBL_ADDR_18

	  // SPA_TBL_ADDR_19_REG 
	, o_TBL_ADDR_19

	  // SPA_TBL_ADDR_20_REG 
	, o_TBL_ADDR_20

	  // SPA_TBL_ADDR_21_REG 
	, o_TBL_ADDR_21

	  // SPA_TBL_ADDR_22_REG 
	, o_TBL_ADDR_22

	  // SPA_TBL_ADDR_23_REG 
	, o_TBL_ADDR_23

	  // SPA_TBL_ADDR_24_REG 
	, o_TBL_ADDR_24

	  // SPA_RX_START_REG 
	, o_RX_START

	  // SPA_RX_INCR_REG 
	, o_RX_INCR

	  // SPA_RX_CH0_PREV_ADDR_REG 
	, o_RX_CH0_PREV_ADDR

	  // SPA_RX_CH1_PREV_ADDR_REG 
	, o_RX_CH1_PREV_ADDR

	  // SPA_RX_CH2_PREV_ADDR_REG 
	, o_RX_CH2_PREV_ADDR

	  // SPA_RX_CH0_CURR_ADDR_REG 
	, o_RX_CH0_CURR_ADDR

	  // SPA_RX_CH1_CURR_ADDR_REG 
	, o_RX_CH1_CURR_ADDR

	  // SPA_RX_CH2_CURR_ADDR_REG 
	, o_RX_CH2_CURR_ADDR

	  // SPA_RX_CH0_START_ADDR_REG 
	, o_RX_CH0_START_ADDR

	  // SPA_RX_CH1_START_ADDR_REG 
	, o_RX_CH1_START_ADDR

	  // SPA_RX_CH2_START_ADDR_REG 
	, o_RX_CH2_START_ADDR

	  // SPA_RX_BLK_CNT_REG 
	, o_RX_BLK_CNT
	, o_RX_BAND_CNT

	  // SPA_RX_STATUS_REG 
	, o_BUSY

	  // SPA_RX_CH0_CUR_ADDR_REG 
	, o_RX_CH0_CUR_ADDR

	  // SPA_RX_CH1_CUR_ADDR_REG 
	, o_RX_CH1_CUR_ADDR

	  // SPA_RX_CH2_CUR_ADDR_REG 
	, o_RX_CH2_CUR_ADDR

	  // SPA_RX_CH0_SVC_CNT_REG 
	, o_RX_CH0_SVC_CNT

	  // SPA_RX_CH1_SVC_CNT_REG 
	, o_RX_CH1_SVC_CNT

	  // SPA_RX_CH2_SVC_CNT_REG 
	, o_RX_CH2_SVC_CNT

	  // SPA_RX_DMA_CON_REG 
	, o_RX_ISSUE_CAP
	, o_RX_ARCACHE
	, o_RX_ARPROT0
	, o_RX_ARPROT1
	, o_RX_ARPROT2
	, o_RX_SWAP_EN

	  // SPA_RX_ERR_STATUS_REG 
	, o_RX_RID_ERR_0
	, o_RX_RID_ERR_1
	, o_RX_RID_ERR_2
	, o_RX_RID_ERR_3
	, o_RX_RRESP_ERR_0
	, o_RX_RRESP_ERR_1

	  // SPA_TX_START_REG 
	, o_TX_START

	  // SPA_TX_DMA_CON_REG 
	, o_MAX_WISSUE
	, o_TX_INT_CHECK
	, o_ALPHA_CH_ON
	, o_ARB_MODE
	, o_TX_AWCACHE
	, o_TX_AWPROT0
	, o_TX_AWPROT1
	, o_TX_AWPROT2
	, o_TX_SWAP_EN

	  // SPA_TX_BAND_NUM_REG 
	, o_TX_BAND_NUM

	  // SPA_TX_DATA_INCR_REG 
	, o_TX_DATA_INCR

	  // SPA_TX_CH0_START_ADDR_REG 
	, o_TX_CH0_START_ADDR

	  // SPA_TX_CH1_START_ADDR_REG 
	, o_TX_CH1_START_ADDR

	  // SPA_TX_CH2_START_ADDR_REG 
	, o_TX_CH2_START_ADDR

	  // SPA_TX_BLK_CNT_REG 
	, o_TX_BLK_CNT
	, o_TX_BAND_CNT

	  // SPA_TX_STATUS_REG 
	, o_BUSY

	  // SPA_TX_ADDR_CH0_MAX_REG 
	, o_TX_ADDR_CH0_MAX

	  // SPA_TX_ADDR_CH0_MIN_REG 
	, o_TX_ADDR_CH0_MIN

	  // SPA_TX_ADDR_CH1_MAX_REG 
	, o_TX_ADDR_CH1_MAX

	  // SPA_TX_ADDR_CH1_MIN_REG 
	, o_TX_ADDR_CH1_MIN

	  // SPA_TX_ADDR_CH2_MAX_REG 
	, o_TX_ADDR_CH2_MAX

	  // SPA_TX_ADDR_CH2_MIN_REG 
	, o_TX_ADDR_CH2_MIN

	  // SPA_TX_CH0_CUR_ADDR_REG 
	, o_TX_CH0_CUR_ADDR

	  // SPA_TX_CH1_CUR_ADDR_REG 
	, o_TX_CH1_CUR_ADDR

	  // SPA_TX_CH2_CUR_ADDR_REG 
	, o_TX_CH2_CUR_ADDR

	  // SPA_TX_CH0_SVC_CNT_REG 
	, o_TX_CH0_SVC_CNT

	  // SPA_TX_CH1_SVC_CNT_REG 
	, o_TX_CH1_SVC_CNT

	  // SPA_TX_CH2_SVC_CNT_REG 
	, o_TX_CH2_SVC_CNT

	  // SPA_TX_ERR_STATUS_REG 
	, o_TX_ERR_ID_0
	, o_TX_ERR_ID_1
	, o_TX_ERR_ID_2
	, o_TX_ERR_ID_3
	, o_TX_ERR_RESP_0
	, o_TX_ERR_RESP_1

	  // SPA_ADAPT_DMA_CON_REG 
	, o_ADAPT_SMAP_INT_CHECK
	, o_ADAPT_OUT_BANDS

	  // SPA_ADAPT_DMA_ADDR_REG 
	, o_ADAPT_ADDR

	  // SPA_ADAPT_DMA_ADDR_INCR_REG 
	, o_ADAPT_ADDR_INCR

	  // SPA_ADAPT_DMA_STATUS_REG 
	, o_ADAPT_TX_BUSY
	, o_ADAPT_OUT_LINES

	  // SPA_ADAPT_TX_ADDR_MAX_REG 
	, o_ADAPT_TX_ADDR_MAX

	  // SPA_ADAPT_TX_ADDR_MIN_REG 
	, o_ADAPT_TX_ADDR_MIN

	  // SPA_ADAPT_TX_CUR_ADDR_REG 
	, o_ADAPT_TX_CUR_ADDR

	  // SPA_ADAPT_TX_SVC_CNT_REG 
	, o_ADAPT_TX_SVC_CNT

	  // SPA_ADAPT_START_REG 
	, o_ADAPT_START

	  // SPA_ADAPT_BAND_CNT_REG 
	, o_ADAPT_BAND_CNT

	  // SPA_SMAP_DMA_CON_REG 
	, o_SMAP_OUT_BANDS

	  // SPA_SMAP_DMA_ADDR_REG 
	, o_SMAP_ADDR

	  // SPA_SMAP_DMA_ADDR_INCR_REG 
	, o_SMAP_ADDR_INCR

	  // SPA_SMAP_DMA_STATUS_REG 
	, o_SMAP_TX_BUSY
	, o_SMAP_OUT_LINES

	  // SPA_SMAP_TX_ADDR_MAX_REG 
	, o_SMAP_TX_ADDR_MAX

	  // SPA_SMAP_TX_ADDR_MIN_REG 
	, o_SMAP_TX_ADDR_MIN

	  // SPA_SMAP_TX_CUR_ADDR_REG 
	, o_SMAP_TX_CUR_ADDR

	  // SPA_SMAP_TX_SVC_CNT_REG 
	, o_SMAP_TX_SVC_CNT

	  // SPA_SMAP_START_REG 
	, o_SMAP_START

	  // SPA_SMAP_BAND_CNT_REG 
	, o_SMAP_BAND_CNT

	  // SPA_BDS_DMA_CON_REG 
	, o_BDS_OUT_BANDS

	  // SPA_BDS_DMA_ADDR_REG 
	, o_BDS_ADDR

	  // SPA_BDS_DMA_ADDR_INCR_REG 
	, o_BDS_ADDR_INCR

	  // SPA_BDS_DMA_STATUS_REG 
	, o_BDS_TX_BUSY
	, o_BDS_OUT_LINES

	  // SPA_BDS_TX_ADDR_MAX_REG 
	, o_BDS_TX_ADDR_MAX

	  // SPA_BDS_TX_ADDR_MIN_REG 
	, o_BDS_TX_ADDR_MIN

	  // SPA_BDS_TX_CUR_ADDR_REG 
	, o_BDS_TX_CUR_ADDR

	  // SPA_BDS_TX_SVC_CNT_REG 
	, o_BDS_TX_SVC_CNT

	  // SPA_BDS_START_REG 
	, o_BDS_START

	  // SPA_BDS_BAND_CNT_REG 
	, o_BDS_BAND_CNT

	  // SPA_RX_CH0_CRC_REG 
	, o_RX_CH0_CRC

	  // SPA_RX_CH1_CRC_REG 
	, o_RX_CH1_CRC

	  // SPA_RX_CH2_CRC_REG 
	, o_RX_CH2_CRC

	  // SPA_RC1_CH0_CRC_REG 
	, o_RC1_CH0_CRC

	  // SPA_RC1_CH1_CRC_REG 
	, o_RC1_CH1_CRC

	  // SPA_RC1_CH2_CRC_REG 
	, o_RC1_CH2_CRC

	  // SPA_RC1_CH0_CRC_DEBUG_REG 
	, o_RC1_CH0_CRC_DEBUG

	  // SPA_RC1_CH1_CRC_DEBUG_REG 
	, o_RC1_CH1_CRC_DEBUG

	  // SPA_RC1_CH2_CRC_DEBUG_REG 
	, o_RC1_CH2_CRC_DEBUG

	  // SPA_S1D_CH0_CRC_REG 
	, o_S1D_CH0_CRC

	  // SPA_S1D_CH1_CRC_REG 
	, o_S1D_CH1_CRC

	  // SPA_S1D_CH2_CRC_REG 
	, o_S1D_CH2_CRC

	  // SPA_SEG1_CH0_CRC_REG 
	, o_SEG1_CH0_CRC

	  // SPA_SEG1_CH1_CRC_REG 
	, o_SEG1_CH1_CRC

	  // SPA_SEG1_CH2_CRC_REG 
	, o_SEG1_CH2_CRC

	  // SPA_SEG1_ATT_CRC_REG 
	, o_SEG1_ATT_CRC

	  // SPA_SCC_CH0_CRC_REG 
	, o_SCC_CH0_CRC

	  // SPA_SCC_CH1_CRC_REG 
	, o_SCC_CH1_CRC

	  // SPA_SCC_CH2_CRC_REG 
	, o_SCC_CH2_CRC

	  // SPA_SCC_ATT_CRC_REG 
	, o_SCC_ATT_CRC

	  // SPA_SEG2_CH0_CRC_REG 
	, o_SEG2_CH0_CRC

	  // SPA_SEG2_CH1_CRC_REG 
	, o_SEG2_CH1_CRC

	  // SPA_SEG2_CH2_CRC_REG 
	, o_SEG2_CH2_CRC

	  // SPA_SEG2_ATT_CRC_REG 
	, o_SEG2_ATT_CRC

	  // SPA_BSSA_CH0_CRC_REG 
	, o_BSSA_CH0_CRC

	  // SPA_BSSA_CH1_CRC_REG 
	, o_BSSA_CH1_CRC

	  // SPA_BSSA_CH2_CRC_REG 
	, o_BSSA_CH2_CRC

	  // SPA_DMATX_CH0_CRC_REG 
	, o_DMATX_CH0_CRC

	  // SPA_DMATX_CH1_CRC_REG 
	, o_DMATX_CH1_CRC

	  // SPA_DMATX_CH2_CRC_REG 
	, o_DMATX_CH2_CRC

	  // SPA_RC2_CH0_CRC_REG 
	, o_RC2_CH0_CRC

	  // SPA_RC2_CH1_CRC_REG 
	, o_RC2_CH1_CRC

	  // SPA_RC2_CH2_CRC_REG 
	, o_RC2_CH2_CRC

	  // SPA_ADAPT_CRC_REG 
	, o_ADAPT_CRC

	  // SPA_SMAP_CRC_REG 
	, o_SMAP_CRC

	  // SPA_BDS_CRC_REG 
	, o_BDS_CRC

	  // SPA_VSD_CH0_CRC_REG 
	, o_VSD_CH0_CRC

	  // SPA_VSD_CH1_CRC_REG 
	, o_VSD_CH1_CRC

	  // SPA_VSD_CH2_CRC_REG 
	, o_VSD_CH2_CRC

	  // SPA_CIS_CH0_CRC_REG 
	, o_CIS_CH0_CRC

	  // SPA_CIS_CH1_CRC_REG 
	, o_CIS_CH1_CRC

	  // SPA_CIS_CH2_CRC_REG 
	, o_CIS_CH2_CRC

	  // SPA_BSSB_CH0_CRC_REG 
	, o_BSSB_CH0_CRC

	  // SPA_BSSB_CH1_CRC_REG 
	, o_BSSB_CH1_CRC

	  // SPA_BSSB_CH2_CRC_REG 
	, o_BSSB_CH2_CRC

	  // SPA_S1D_DEBUG_FLAG_REG 
	, o_DEBUG_FLAG

	  // SPA_SCC_DEBUG_FLAG_REG 
	, o_DEBUG_FLAG

	  // SPA_BDS_DEBUG_FLAG_REG 
	, o_DEBUG_FLAG

	  // SPA_BSSA_DEBUG_FLAG_REG 
	, o_BSSA_DEBUG_FLAG

	  // SPA_BSSB_DEBUG_FLAG_REG 
	, o_BSSB_DEBUG_FLAG

	  // SPA_VSD_A_REG 
	, o_VSC_DEBUG
	, o_VSC_CUR_MEM_INIT

	  // SPA_VSD_B_REG 
	, o_VSD_K_DEPTH_MIN
	, o_VSD_TOP_BAND

	  // SPA_VSD_C_REG 
	, o_VSD_K_DEPTH_MAX_TOP
	, o_VSD_K_DEPTH_MIN_TOP
	, o_VSD_K_DEPTH_MAX
	, o_VSD_K_DEPTH_MID

	  // SPA_VSC_D_REG 
	, o_VSD_W_DEPTH_MAX
	, o_VSD_W_DEPTH_MID
	, o_VSD_W_DEPTH_MIN
	, o_VSD_K_DEPTH_COND

	  // SPA_VSD_E_REG 
	, o_VSD_THICKNESS_TH
	, o_VSD_W_DEPTH_COND
	, o_VSD_W_DEPTH_MAX_TOP
	, o_VSD_W_DEPTH_MIN_TOP

	  // SPA_VSD_F_REG 
	, o_VSD_CHROMA_TH2_TOP
	, o_VSD_CHROMA_TH1_TOP
	, o_VSD_CHROMA_TH2
	, o_VSD_CHROMA_TH1

	  // SPA_VSD_G_REG 
	, o_VSD_FREQUENCY_TH
	, o_VSD_CONTINUITY_TH

	  // SPA_VSD_H_REG 
	, o_VSD_REFINE_TH
	, o_VSD_REFINE_EN

	  // SPA_CIS_SUB_COEF_R_REG 
	, o_CIS_SUB_COEF_R1
	, o_CIS_SUB_COEF_R2

	  // SPA_CIS_SUB_COEF_G_REG 
	, o_CIS_SUB_COEF_G0
	, o_CIS_SUB_COEF_G1
	, o_CIS_SUB_COEF_G2

	  // SPA_CIS_SUB_COEF_B_REG 
	, o_CIS_SUB_COEF_B0
	, o_CIS_SUB_COEF_B1

	  // SPA_RC1_SHIFT_VAL_REG 
	, o_RC1_SHIFT_VAL

	  // SPA_RC1_SHIFT_OFST_REG 
	, o_RC1_SHIFT_OFST

	  // SPA_RC1_LOOP_REG 
	, o_RC1_LOOP_Y
	, o_RC1_LOOP_X

	  // SPA_RC1_X_COF_00_01_REG 
	, o_RC1_X_COF_01
	, o_RC1_X_COF_00

	  // SPA_RC1_X_COF_02_03_REG 
	, o_RC1_X_COF_03
	, o_RC1_X_COF_02

	  // SPA_RC1_X_COF_10_11_REG 
	, o_RC1_X_COF_11
	, o_RC1_X_COF_10

	  // SPA_RC1_X_COF_12_13_REG 
	, o_RC1_X_COF_13
	, o_RC1_X_COF_12

	  // SPA_RC1_X_COF_20_21_REG 
	, o_RC1_X_COF_21
	, o_RC1_X_COF_20

	  // SPA_RC1_X_COF_22_23_REG 
	, o_RC1_X_COF_23
	, o_RC1_X_COF_22

	  // SPA_RC1_X_COF_30_31_REG 
	, o_RC1_X_COF_31
	, o_RC1_X_COF_30

	  // SPA_RC1_X_COF_32_33_REG 
	, o_RC1_X_COF_33
	, o_RC1_X_COF_32

	  // SPA_RC1_Y_COF_00_01_REG 
	, o_RC1_Y_COF_01
	, o_RC1_Y_COF_00

	  // SPA_RC1_Y_COF_02_03_REG 
	, o_RC1_Y_COF_03
	, o_RC1_Y_COF_02

	  // SPA_RC1_Y_COF_10_11_REG 
	, o_RC1_Y_COF_11
	, o_RC1_Y_COF_10

	  // SPA_RC1_Y_COF_12_13_REG 
	, o_RC1_Y_COF_13
	, o_RC1_Y_COF_12

	  // SPA_RC1_Y_COF_20_21_REG 
	, o_RC1_Y_COF_21
	, o_RC1_Y_COF_20

	  // SPA_RC1_Y_COF_22_23_REG 
	, o_RC1_Y_COF_23
	, o_RC1_Y_COF_22

	  // SPA_RC1_Y_COF_30_31_REG 
	, o_RC1_Y_COF_31
	, o_RC1_Y_COF_30

	  // SPA_RC1_Y_COF_32_33_REG 
	, o_RC1_Y_COF_33
	, o_RC1_Y_COF_32

	  // SPA_SEG1_CON_REG 
	, o_Enable_Y_text

	  // SPA_SEG1_HVLINE_TH_REG 
	, o_HVline_level_th
	, o_HVline_minmaxdiff_th2
	, o_HVline_minmaxdiff_th1
	, o_HVline_diff_th

	  // SPA_SEG1_EDGE_TH_REG 
	, o_Highfreq_th
	, o_Lowfreq_th2
	, o_Lowfreq_th

	  // SPA_SEG1_LINE_TH_REG 
	, o_Uni_edge_th
	, o_Uni_edge_th2
	, o_Uni_lowfreq_th
	, o_Uni_highfreq_th

	  // SPA_SEG1_ZC_TH_REG 
	, o_ZC_scaling_shift
	, o_ZC_edge_th
	, o_White_th

	  // SPA_SCC_CON_REG 
	, o_SCC_LATTICE_STEP
	, o_SCC_FLOATING_MODE

	  // SPA_SEG2_CON_REG 
	, o_Enable_FAR_9x9
	, o_Enable_uniformtext
	, o_Enable_contoneImage

	  // SPA_SEG2_PARAM1_REG 
	, o_edgecount_th
	, o_text_index
	, o_FG_level_th

	  // SPA_SEG2_PARAM2_REG 
	, o_zccount_th
	, o_uniformlinecount_th
	, o_halftonecount_th
	, o_bgcnt_th

	  // SPA_SEG2_FAR_CHROMA_PARAM_REG 
	, o_FAR_chroma_th2_shiftcoef
	, o_FAR_chroma_th

	  // SPA_SEG2_FAR_Y_PARAM_REG 
	, o_FAR_Y_th3_shiftcoef2
	, o_FAR_Y_th2_shiftcoef1
	, o_FAR_Y_th

	  // SPA_SEG2_NEUT_CHROMA_PARAM_REG 
	, o_Neut_chroma_th2_shiftcoef
	, o_Neut_chroma_th

	  // SPA_PAGE_EN_REG 
	, o_PAGE_EN

	  // SPA_BLOCK_SIZE_REG 
	, o_BLOCK_SIZE_H
	, o_BLOCK_SIZE_W

	  // SPA_AREA_SIZE_REG 
	, o_AREA_SIZE_H
	, o_AREA_SIZE_W

	  // SPA_CHAR_LENGTH_THICK_V_REG 
	, o_CHAR_THICK_MAX_V
	, o_CHAR_THICK_MIN_V
	, o_CHAR_LENGTH_MIN_V

	  // SPA_CHAR_LENGTH_THICK_H_REG 
	, o_CHAR_THICK_MAX_H
	, o_CHAR_THICK_MIN_H
	, o_CHAR_LENGTH_MIN_H

	  // SPA_DIFF_CHANGE_V_REG 
	, o_CHANGE_CNT_TH_V
	, o_CHANGE_RATIO_TH_V
	, o_DIFF_SHIFT2_V
	, o_DIFF_SHIFT1_V

	  // SPA_DIFF_CHANGE_H_REG 
	, o_CHANGE_CNT_TH_H
	, o_CHANGE_RATIO_TH_H
	, o_DIFF_SHIFT2_H
	, o_DIFF_SHIFT1_H

	  // SPA_DIR_TH1_REG 
	, o_DIR_MAX_LOW_TH
	, o_DIR_TH
	, o_DIR_MAX_TH
	, o_DIR_MIN_TH

	  // SPA_DIR_TH2_REG 
	, o_DIR_DIFF_TH3
	, o_DIR_DIFF_TH2
	, o_DIR_DIFF_TH1
	, o_DIR_MAX_HIGH_TH

	  // SPA_OUT_AREA_OFFSET1_REG 
	, o_OUT_AREA_OFFSET_W
	, o_OUT_AREA_OFFSET_H

	  // SPA_OUT_AREA_OFFSET2_REG 
	, o_OUT_AREA_OFFSET

	  // SPA_LINE_SPACE_REG 
	, o_LINE_SPACE_V
	, o_LINE_SPACE_H

	  // SPA_TEXT_FLAG_REG 
	, o_TEXT_FLAG1
	, o_TEXT_FLAG2
	, o_TEXT_FLAG3

	  // SPA_TEXT_AREA1_W_REG 
	, o_TEXT_AREA1_EN_W
	, o_TEXT_AREA1_ST_W

	  // SPA_TEXT_AREA1_H_REG 
	, o_TEXT_AREA1_EN_H
	, o_TEXT_AREA1_ST_H

	  // SPA_TEXT_AREA2_W_REG 
	, o_TEXT_AREA2_EN_W
	, o_TEXT_AREA2_ST_W

	  // SPA_TEXT_AREA2_H_REG 
	, o_TEXT_AREA2_EN_H
	, o_TEXT_AREA2_ST_H

	  // SPA_TEXT_AREA3_W_REG 
	, o_TEXT_AREA3_EN_W
	, o_TEXT_AREA3_ST_W

	  // SPA_TEXT_AREA3_H_REG 
	, o_TEXT_AREA3_EN_H
	, o_TEXT_AREA3_ST_H

	  // SPA_ABS_PRE_SCAN_LINE_REG 
	, o_ABS_PRE_SCAN_LINE

	  // SPA_ABS_PRE_SCAN_IWIN_REG 
	, o_ABS_IWIN_END
	, o_ABS_IWIN_START

	  // SPA_ABS_TH_REG 
	, o_ABS_WHITE_TH
	, o_ABS_BLACK_TH
	, o_ABS_NOISE_REM

	  // SPA_ABS_VALID_PERCENTAGE_REG 
	, o_ABS_VALID_PERCENTAGE

	  // SPA_ABS_BK_STD_TH_REG 
	, o_ABS_BK_STD_TH

	  // SPA_ABS_SIGMA_REG 
	, o_ABS_PERCENTAGE
	, o_ABS_DETECT_SIGMA
	, o_ABS_CONFID_SIGMA

	  // SPA_ABS_BG_BACKUP_REG 
	, o_ABS_BG_BACKUP_EN
	, o_ABS_BG_BACKUP_TH

	  // SPA_ABS_COLOR_EXCEPTION_REG 
	, o_ABS_COLOR_EXCEPTION
	, o_ABS_COLOR_TH2
	, o_ABS_COLOR_TH1

	  // SPA_ABS_TOP_BG_LEVEL_REG 
	, o_ABS_TOP_BG_LEVEL
	, o_ABS_MAX_CB
	, o_ABS_MAX_CR

	  // SPA_ABS_TOP_PEAK_CONFIDENCE_REG 
	, o_ABS_TOP_PEAK_CONFIDENCE
	, o_ABS_SUCCESS

	  // SPA_ABS_PRE_SCAN_START_REG 
	, o_ABS_PRE_SCAN_START

	  // SPA_MAD_PRE_SCAN_LINE_REG 
	, o_MAD_PRE_SCAN_LINE

	  // SPA_MAD_PRE_SCAN_IWIN_REG 
	, o_MAD_IWIN_END
	, o_MAD_IWIN_START

	  // SPA_MAD_TH_REG 
	, o_MAD_WHITE_TH
	, o_MAD_BLACK_TH
	, o_MAD_NOISE_REM

	  // SPA_MAD_VALID_PERCENTAGE_REG 
	, o_MAD_VALID_PERCENTAGE

	  // SPA_MAD_BK_STD_TH_REG 
	, o_MAD_BK_STD_TH

	  // SPA_MAD_SIGMA_REG 
	, o_MAD_PERCENTAGE
	, o_MAD_DETECT_SIGMA
	, o_MAD_CONFID_SIGMA

	  // SPA_MAD_BG_BACKUP_REG 
	, o_MAD_BG_BACKUP_EN
	, o_MAD_BG_BACKUP_TH

	  // SPA_MAD_COLOR_EXCEPTION_REG 
	, o_MAD_COLOR_EXCEPTION
	, o_MAD_COLOR_TH2
	, o_MAD_COLOR_TH1

	  // SPA_MAD_TOP_BG_LEVEL_REG 
	, o_MAD_TOP_BG_LEVEL
	, o_MAD_MAX_CB
	, o_MAD_MAX_CR

	  // SPA_MAD_TOP_PEAK_CONFIDENCE_REG 
	, o_MAD_TOP_PEAK_CONFIDENCE
	, o_MAD_SUCCESS

	  // SPA_MAD_PRE_SCAN_START_REG 
	, o_MAD_PRE_SCAN_START

	  // SPA_NEWABSD_SCAN_RANGE_REG 
	, o_ABS_PRE_SCAN_LINE
	, o_ABS_PRE_SCAN_START

	  // SPA_NEWABSD_PRE_SCAN_IWIN_REG 
	, o_ABS_IWIN_END
	, o_ABS_IWIN_START

	  // SPA_NEWABSD_CHOMA_TH_REG 
	, o_COLOR_RIDGE_TH
	, o_GRAY_RIDGE_TH
	, o_CHROMA_TH

	  // SPA_NEWABSD_LIMIT_REG 
	, o_RIGHT_LIMIT
	, o_LEFT_LIMIT

	  // SPA_NEWABSD_HISTO_PEAK_REG 
	, o_HISTO_COLOR_PEAK
	, o_HISTO_GRAY_PEAK

	  // SPA_NEWABSD_HISTO_LEFT_REG 
	, o_HISTO_COLOR_LEFT
	, o_HISTO_GRAY_LEFT

	  // SPA_NEWABSD_HISTO_RIGHT_REG 
	, o_HISTO_COLOR_RIGHT
	, o_HISTO_GRAY_RIGHT

	  // SPA_NEWABSD_RESULT_REG 
	, o_PAPER_COLOR_FLAG
	, o_MEM_READ_STAT

	  // SPA_CLA_CON1_REG 
	, o_HLCOUNT_MAXTH1
	, o_HLCOUNT_MAXTH2
	, o_HLCOUNT_DIFFTH1
	, o_HLCOUNT_DIFFTH2

	  // SPA_CLA_CON2_REG 
	, o_HLGRAY_DIFFTH
	, o_ContentsSizeTh

	  // SPA_TOTAL_BIN_CNT_REG 
	, o_TOTAL_BIN_CNT

	  // SPA_HL_RANGE2_REG 
	, o_HL_RANGE2

	  // SPA_HL_COLOR2_REG 
	, o_HL_COLOR2

	  // SPA_BTEXT_CNT_REG 
	, o_BTEXT_CNT

	  // SPA_TEXT_CNT_REG 
	, o_TEXT_CNT

	  // SPA_HT_CNT_REG 
	, o_HT_CNT

	  // SPA_EDGE_CNT_REG 
	, o_EDGE_CNT

	  // SPA_WHITE_CNT_REG 
	, o_WHITE_CNT

	  // SPA_CONTONE_CNT_REG 
	, o_CONTONE_CNT

	  // SPA_WHITE_WO_TEXT_CNT_REG 
	, o_WHITE_WO_TEXT_CNT

	  // SPA_WHITE_WO_HT_TEXT_CNT_REG 
	, o_WHITE_WO_HT_TEXT_CNT

	  // SPA_CONTENT_SIZE_REG 
	, o_ContentSizeW
	, o_ContentSizeH

	  // SPA_MARGIN1_REG 
	, o_BOTTOM_MARGIN
	, o_TOP_MARGIN

	  // SPA_MARGIN2_REG 
	, o_RIGHT_MARGIN
	, o_LEFT_MARGIN

	  // SPA_TH1_REG 
	, o_HIGH_TH_MAX1
	, o_LOW_TH_MIN1

	  // SPA_TH2_REG 
	, o_HIGH_TH_MAX2
	, o_LOW_TH_MIN2

	  // SPA_HLIGHT_SEL_EN_REG 
	, o_HLIGHT_SEL_EN

	  // SPA_AVG_TH_REG 
	, o_AVG_TH

	  // SPA_HISTO_WIN_VAL_REG 
	, o_HISTCR_WIN_VAL_HIGH
	, o_HISTCR_WIN_VAL_LOW
	, o_HISTCB_WIN_VAL_HIGH
	, o_HISTCB_WIN_VAL_LOW

	  // SPA_RATIO_TH_REG 
	, o_RATIO_TH_CR
	, o_RATIO_TH_CB

	  // SPA_LIMIT_TH_REG 
	, o_LIMIT_TH_MAX
	, o_LIMIT_TH_MIN

	  // SPA_BRIGHT_STRETCH_OFFSET_REG 
	, o_STRETCH_OFFSET
	, o_BRIGHT_TH
	, o_BRIGHT_EN

	  // SPA_ACB_TH1_REG 
	, o_ACB_GRAY_RIDGE
	, o_ACB_PEAK_RATIO_TH

	  // SPA_ACB_TH2_REG 
	, o_ACB_RIGHT_LIMIT
	, o_ACB_LEFT_LIMIT

	  // SPA_OBJECT_TH_REG 
	, o_OBJ_AREA_TH
	, o_OBJ_INDEX_TH

	  // SPA_ACBD_RESULT1_REG 
	, o_BRIGHT_OFFSET
	, o_FINAL_MAX
	, o_FINAL_MIN

	  // SPA_ACBD_RESULT2_REG 
	, o_PEAK_ID
	, o_ANKER_POINT
	, o_MEM_READ_STAT

	  // SPA_ACBD_ACSREFON_REG 
	, o_ACS_REF_ON

	  // SPA_ACS_CON_REG 
	, o_ACS_SATAUTO_EN
	, o_ACS_HALFAUTO_EN
	, o_ACS_AUTO_EN
	, o_ACS_MARK_EN
	, o_ACS_HISTO_EN
	, o_ACS_RANGE_REAL_IMAGE
	, o_ACS_BLOCK_SIZE_X
	, o_ACS_BLOCK_SIZE_Y
	, o_ACS_WHITE_TH

	  // SPA_ACS_MARK_POS_UPPER_REG 
	, o_ACS_MARK_UPPER

	  // SPA_ACS_MARK_POS_LOWER_REG 
	, o_ACS_MARK_LOWER

	  // SPA_ACS_MARK_POS_LEFT_REG 
	, o_ACS_MARK_LEFT

	  // SPA_ACS_MARK_POS_RIGHT_REG 
	, o_ACS_MARK_RIGHT

	  // SPA_ACS_SATURATION_TH_REG 
	, o_ACS_SATURATION_BLOCK_TH
	, o_ACS_SATURATION_PXL_TH

	  // SPA_ACS_HT_TH_REG 
	, o_ACS_PUREHALFTONE_CNT
	, o_ACS_HALFTONE_CNT

	  // SPA_ACS_CBMAX1_REG 
	, o_ACS_CB_MAX_03
	, o_ACS_CB_MAX_02
	, o_ACS_CB_MAX_01
	, o_ACS_CB_MAX_00

	  // SPA_ACS_CBMAX2_REG 
	, o_ACS_CB_MAX_07
	, o_ACS_CB_MAX_06
	, o_ACS_CB_MAX_05
	, o_ACS_CB_MAX_04

	  // SPA_ACS_CBMAX3_REG 
	, o_ACS_CB_MAX_11
	, o_ACS_CB_MAX_10
	, o_ACS_CB_MAX_09
	, o_ACS_CB_MAX_08

	  // SPA_ACS_CBMAX4_REG 
	, o_ACS_CB_MAX_15
	, o_ACS_CB_MAX_14
	, o_ACS_CB_MAX_13
	, o_ACS_CB_MAX_12

	  // SPA_ACS_CBMIN1_REG 
	, o_ACS_CB_MIN_03
	, o_ACS_CB_MIN_02
	, o_ACS_CB_MIN_01
	, o_ACS_CB_MIN_00

	  // SPA_ACS_CBMIN2_REG 
	, o_ACS_CB_MIN_07
	, o_ACS_CB_MIN_06
	, o_ACS_CB_MIN_05
	, o_ACS_CB_MIN_04

	  // SPA_ACS_CBMIN3_REG 
	, o_ACS_CB_MIN_11
	, o_ACS_CB_MIN_10
	, o_ACS_CB_MIN_09
	, o_ACS_CB_MIN_08

	  // SPA_ACS_CBMIN4_REG 
	, o_ACS_CB_MIN_15
	, o_ACS_CB_MIN_14
	, o_ACS_CB_MIN_13
	, o_ACS_CB_MIN_12

	  // SPA_ACS_CRMAX1_REG 
	, o_ACS_CR_MAX_03
	, o_ACS_CR_MAX_02
	, o_ACS_CR_MAX_01
	, o_ACS_CR_MAX_00

	  // SPA_ACS_CRMAX2_REG 
	, o_ACS_CR_MAX_07
	, o_ACS_CR_MAX_06
	, o_ACS_CR_MAX_05
	, o_ACS_CR_MAX_04

	  // SPA_ACS_CRMAX3_REG 
	, o_ACS_CR_MAX_11
	, o_ACS_CR_MAX_10
	, o_ACS_CR_MAX_09
	, o_ACS_CR_MAX_08

	  // SPA_ACS_CRMAX4_REG 
	, o_ACS_CR_MAX_15
	, o_ACS_CR_MAX_14
	, o_ACS_CR_MAX_13
	, o_ACS_CR_MAX_12

	  // SPA_ACS_CRMIN1_REG 
	, o_ACS_CR_MIN_03
	, o_ACS_CR_MIN_02
	, o_ACS_CR_MIN_01
	, o_ACS_CR_MIN_00

	  // SPA_ACS_CRMIN2_REG 
	, o_ACS_CR_MIN_07
	, o_ACS_CR_MIN_06
	, o_ACS_CR_MIN_05
	, o_ACS_CR_MIN_04

	  // SPA_ACS_CRMIN3_REG 
	, o_ACS_CR_MIN_11
	, o_ACS_CR_MIN_10
	, o_ACS_CR_MIN_09
	, o_ACS_CR_MIN_08

	  // SPA_ACS_CRMIN4_REG 
	, o_ACS_CR_MIN_15
	, o_ACS_CR_MIN_14
	, o_ACS_CR_MIN_13
	, o_ACS_CR_MIN_12

	  // SPA_ACS_CBMAXH1_REG 
	, o_ACS_CB_MAXH_03
	, o_ACS_CB_MAXH_02
	, o_ACS_CB_MAXH_01
	, o_ACS_CB_MAXH_00

	  // SPA_ACS_CBMAXH2_REG 
	, o_ACS_CB_MAXH_07
	, o_ACS_CB_MAXH_06
	, o_ACS_CB_MAXH_05
	, o_ACS_CB_MAXH_04

	  // SPA_ACS_CBMAXH3_REG 
	, o_ACS_CB_MAXH_11
	, o_ACS_CB_MAXH_10
	, o_ACS_CB_MAXH_09
	, o_ACS_CB_MAXH_08

	  // SPA_ACS_CBMAXH4_REG 
	, o_ACS_CB_MAXH_15
	, o_ACS_CB_MAXH_14
	, o_ACS_CB_MAXH_13
	, o_ACS_CB_MAXH_12

	  // SPA_ACS_CBMINH1_REG 
	, o_ACS_CB_MINH_03
	, o_ACS_CB_MINH_02
	, o_ACS_CB_MINH_01
	, o_ACS_CB_MINH_00

	  // SPA_ACS_CBMINH2_REG 
	, o_ACS_CB_MINH_07
	, o_ACS_CB_MINH_06
	, o_ACS_CB_MINH_05
	, o_ACS_CB_MINH_04

	  // SPA_ACS_CBMINH3_REG 
	, o_ACS_CB_MINH_11
	, o_ACS_CB_MINH_10
	, o_ACS_CB_MINH_09
	, o_ACS_CB_MINH_08

	  // SPA_ACS_CBMINH4_REG 
	, o_ACS_CB_MINH_15
	, o_ACS_CB_MINH_14
	, o_ACS_CB_MINH_13
	, o_ACS_CB_MINH_12

	  // SPA_ACS_CRMAXH1_REG 
	, o_ACS_CR_MAXH_03
	, o_ACS_CR_MAXH_02
	, o_ACS_CR_MAXH_01
	, o_ACS_CR_MAXH_00

	  // SPA_ACS_CRMAXH2_REG 
	, o_ACS_CR_MAXH_07
	, o_ACS_CR_MAXH_06
	, o_ACS_CR_MAXH_05
	, o_ACS_CR_MAXH_04

	  // SPA_ACS_CRMAXH3_REG 
	, o_ACS_CR_MAXH_11
	, o_ACS_CR_MAXH_10
	, o_ACS_CR_MAXH_09
	, o_ACS_CR_MAXH_08

	  // SPA_ACS_CRMAXH4_REG 
	, o_ACS_CR_MAXH_15
	, o_ACS_CR_MAXH_14
	, o_ACS_CR_MAXH_13
	, o_ACS_CR_MAXH_12

	  // SPA_ACS_CRMINH1_REG 
	, o_ACS_CR_MINH_03
	, o_ACS_CR_MINH_02
	, o_ACS_CR_MINH_01
	, o_ACS_CR_MINH_00

	  // SPA_ACS_CRMINH2_REG 
	, o_ACS_CR_MINH_07
	, o_ACS_CR_MINH_06
	, o_ACS_CR_MINH_05
	, o_ACS_CR_MINH_04

	  // SPA_ACS_CRMINH3_REG 
	, o_ACS_CR_MINH_11
	, o_ACS_CR_MINH_10
	, o_ACS_CR_MINH_09
	, o_ACS_CR_MINH_08

	  // SPA_ACS_CRMINH4_REG 
	, o_ACS_CR_MINH_15
	, o_ACS_CR_MINH_14
	, o_ACS_CR_MINH_13
	, o_ACS_CR_MINH_12

	  // SPA_ACS_VALUE_TH_REG 
	, o_ACS_VALUE_BLOCK_TH
	, o_ACS_VALUE_PXL_TH

	  // SPA_ACS_TBLK_PAGE_REG 
	, o_ACS_TBLK_PAGE

	  // SPA_ACS_TBLK_NPAGE_REG 
	, o_ACS_TBLK_NPAGE

	  // SPA_ACS_CBLK_REG 
	, o_ACS_CBLK

	  // SPA_ACS_SBLK_PAGE_REG 
	, o_ACS_SBLK_PAGE

	  // SPA_ACS_SPXL_BLK_PAGE_REG 
	, o_ACS_SPXL_BLK_PAGE

	  // SPA_ACS_SPXL_PAGE_REG 
	, o_ACS_SPXL_PAGE

	  // SPA_ACS_TEXT_PAGE_REG 
	, o_ACS_TEXT_PAGE

	  // SPA_ACS_HT_PAGE_REG 
	, o_ACS_HT_PAGE

	  // SPA_ACS_EDGE_PAGE_REG 
	, o_ACS_EDGE_PAGE

	  // SPA_AVG_HT_ACS00_REG 
	, o_AVG_HT_ACS00

	  // SPA_AVG_HT_ACS01_REG 
	, o_AVG_HT_ACS01

	  // SPA_AVG_HT_ACS02_REG 
	, o_AVG_HT_ACS02

	  // SPA_AVG_HT_ACS03_REG 
	, o_AVG_HT_ACS03

	  // SPA_AVG_HT_ACS04_REG 
	, o_AVG_HT_ACS04

	  // SPA_AVG_HT_ACS05_REG 
	, o_AVG_HT_ACS05

	  // SPA_AVG_HT_ACS06_REG 
	, o_AVG_HT_ACS06

	  // SPA_AVG_HT_ACS07_REG 
	, o_AVG_HT_ACS07

	  // SPA_AVG_HT_ACS08_REG 
	, o_AVG_HT_ACS08

	  // SPA_AVG_HT_ACS09_REG 
	, o_AVG_HT_ACS09

	  // SPA_AVG_HT_ACS10_REG 
	, o_AVG_HT_ACS10

	  // SPA_AVG_HT_ACS11_REG 
	, o_AVG_HT_ACS11

	  // SPA_AVG_HT_ACS12_REG 
	, o_AVG_HT_ACS12

	  // SPA_AVG_HT_ACS13_REG 
	, o_AVG_HT_ACS13

	  // SPA_AVG_HT_ACS14_REG 
	, o_AVG_HT_ACS14

	  // SPA_AVG_HT_ACS15_REG 
	, o_AVG_HT_ACS15

	  // SPA_AVG_NHT_ACS00_REG 
	, o_AVG_NHT_ACS00

	  // SPA_AVG_NHT_ACS01_REG 
	, o_AVG_NHT_ACS01

	  // SPA_AVG_NHT_ACS02_REG 
	, o_AVG_NHT_ACS02

	  // SPA_AVG_NHT_ACS03_REG 
	, o_AVG_NHT_ACS03

	  // SPA_AVG_NHT_ACS04_REG 
	, o_AVG_NHT_ACS04

	  // SPA_AVG_NHT_ACS05_REG 
	, o_AVG_NHT_ACS05

	  // SPA_AVG_NHT_ACS06_REG 
	, o_AVG_NHT_ACS06

	  // SPA_AVG_NHT_ACS07_REG 
	, o_AVG_NHT_ACS07

	  // SPA_AVG_NHT_ACS08_REG 
	, o_AVG_NHT_ACS08

	  // SPA_AVG_NHT_ACS09_REG 
	, o_AVG_NHT_ACS09

	  // SPA_AVG_NHT_ACS10_REG 
	, o_AVG_NHT_ACS10

	  // SPA_AVG_NHT_ACS11_REG 
	, o_AVG_NHT_ACS11

	  // SPA_AVG_NHT_ACS12_REG 
	, o_AVG_NHT_ACS12

	  // SPA_AVG_NHT_ACS13_REG 
	, o_AVG_NHT_ACS13

	  // SPA_AVG_NHT_ACS14_REG 
	, o_AVG_NHT_ACS14

	  // SPA_AVG_NHT_ACS15_REG 
	, o_AVG_NHT_ACS15

	  // SPA_ACS_SATURATION_TH2_REG 
	, o_ACS_SATURATION_PXL_CNT_TH

	  // SPA_ACS_VALID_RANGE_H_REG 
	, o_VALID_BOTTOM
	, o_VALID_TOP

	  // SPA_ACS_VALID_RANGE_W_REG 
	, o_VALID_RIGHT
	, o_VALID_LEFT

	  // SPA_ACS_V2_CON_REG 
	, o_ACS_V2_BLOCK_SIZE_X
	, o_ACS_V2_BLOCK_SIZE_Y
	, o_ACS_V2_WHITE_TH

	  // SPA_ACS_V2_SATURATION_TH_REG 
	, o_ACS_V2_SATURATION_BLOCK_TH
	, o_ACS_V2_SATURATION_PXL_TH

	  // SPA_ACS_V2_SATURATION_TH2_REG 
	, o_ACS_V2_SATURATION_TH2

	  // SPA_ACS_V2_HT_TH_REG 
	, o_ACS_V2_PUREHALFTONE_CNT
	, o_ACS_V2_HALFTONE_CNT

	  // SPA_ACS_V2_VALUE_TH_REG 
	, o_ACS_V2_VALUE_BLOCK_TH
	, o_ACS_V2_VALUE_PXL_TH

	  // SPA_ACS_V2_TBLK_PAGE_REG 
	, o_ACS_V2_TBLK_PAGE

	  // SPA_ACS_V2_TBLK_NPAGE_REG 
	, o_ACS_V2_TBLK_NPAGE

	  // SPA_ACS_V2_CBLK_REG 
	, o_ACS_V2_CBLK

	  // SPA_ACS_V2_SBLK_PAGE_REG 
	, o_ACS_V2_SBLK_PAGE

	  // SPA_ACS_V2_SPXL_BLK_PAGE_REG 
	, o_ACS_V2_SPXL_BLK_PAGE

	  // SPA_ACS_V2_SPXL_PAGE_REG 
	, o_ACS_V2_SPXL_PAGE

	  // SPA_BLANK_CON0_REG 
	, o_BLANK_AUTO_EN
	, o_BLANK_MARK_EN
	, o_BLANK_RANGE_REAL_IMAGE
	, o_BLANK_BLOCK_SIZE_H
	, o_BLANK_BLOCK_SIZE_V

	  // SPA_BLANK_CON1_REG 
	, o_BLANK_DARKBLK_TH
	, o_BLANK_CONT_PCT

	  // SPA_BLANK_MARK_POS_UPPER_REG 
	, o_BLANK_MARK_UPPER

	  // SPA_BLANK_MARK_POS_LOWER_REG 
	, o_BLANK_MARK_LOWER

	  // SPA_BLANK_MARK_POS_LEFT_REG 
	, o_BLANK_MARK_LEFT

	  // SPA_BLANK_MARK_POS_RIGHT_REG 
	, o_BLANK_MARK_RIGHT

	  // SPA_BLANK_COLOR_BLK_REG 
	, o_BLANK_COLORBLOCK_CR_THU
	, o_BLANK_COLORBLOCK_CR_THL
	, o_BLANK_COLORBLOCK_CB_THU
	, o_BLANK_COLORBLOCK_CB_THL

	  // SPA_BLANK_TOTALBLK_REG 
	, o_BLANK_TBLK_PAGE

	  // SPA_BLANK_CONTBLK_REG 
	, o_BLANK_CONTBLK_PAGE

	  // SPA_BLANK_BLANKBLK_REG 
	, o_BLANK_BLACKBLK_PAGE

	  // SPA_BLANK_DARKBLK_REG 
	, o_BLANK_DARKBLK

	  // SPA_BLANK_COLORBLK_REG 
	, o_BLANK_CBLK

	  // SPA_BLANK_Y_MIN_MAX_REG 
	, o_BLANK_U_MAX
	, o_BLANK_Y_MIN

	  // SPA_BLANK_CB_MIN_MAX_REG 
	, o_BLANK_CB_MAX
	, o_BLANK_CB_MIN

	  // SPA_BLANK_CR_MIN_MAX_REG 
	, o_BLANK_CR_MAX
	, o_BLANK_CR_MIN

	  // SPA_RC2_OUTIMG_WIDTH_HEIGHT_REG 
	, o_RC2_OUTIMG_HEIGHT
	, o_RC2_OUTIMG_WIDTH

	  // SPA_RC2_OVERLAP_REG 
	, o_RC2_OVERLAP
	, o_RC2_MASK_IMG_BD

	  // SPA_RC2_FRAC_REG 
	, o_RC2_H_FRAC
	, o_RC2_V_FRAC

	  // SPA_BDS_CON_REG 
	, o_MIRROR
	, o_EDGE_TH

	  // SPA_BDS_EDGE1_REG 
	, o_EDGE_Y_LOW
	, o_EDGE_Y_HIGH
	, o_EDGE_CNT_TH

	  // SPA_BDS_EDGE2_REG 
	, o_EDGE_CR_LOW
	, o_EDGE_CR_HIGH
	, o_EDGE_CB_LOW
	, o_EDGE_CB_HIGH

	  // SPA_BDS_EURION1_REG 
	, o_EURion_Y_LOW
	, o_EURion_Y_HIGH

	  // SPA_BDS_EURION2_REG 
	, o_EURion_CR_LOW
	, o_EURion_CR_HIGH
	, o_EURion_CB_LOW
	, o_EURion_CB_HIGH

	  // SPA_BDS_OFFSET_REG 
	, o_OFFSET_BOTTOM
	, o_OFFSET_TOP
	, o_OFFSET_RIGHT
	, o_OFFSET_LEFT

	  // SPA_BDS_CONTENTS_REG 
	, o_CONTENS_END
	, o_CONTENS_START

	  // SPA_SMAP_PARAM_B_REG 
	, o_SMAP_G_Range2
	, o_SMAP_G_Range1
	, o_SMAP_R_Range2
	, o_SMAP_R_Range1

	  // SPA_SMAP_PARAM_C_REG 
	, o_SMAP_Refine_Enable
	, o_SMAP_BinTH3
	, o_SMAP_BinTH2
	, o_SMAP_BinTH1
	, o_SMAP_B_Range2
	, o_SMAP_B_Range1

	  // SPA_SMAP_ADAPT_CON_REG 
	, o_SMAP_ADAPT_EN
	, o_SMAP_ADAPT_AVGDIV

	  // SPA_SMAP_ADAPT_R_MAX0_REG 
	, o_SMAP_ADAPT_R_MAX00
	, o_SMAP_ADAPT_R_MAX01
	, o_SMAP_ADAPT_R_MAX02
	, o_SMAP_ADAPT_R_MAX03

	  // SPA_SMAP_ADAPT_R_MAX1_REG 
	, o_SMAP_ADAPT_R_MAX10
	, o_SMAP_ADAPT_R_MAX11
	, o_SMAP_ADAPT_R_MAX12
	, o_SMAP_ADAPT_R_MAX13

	  // SPA_SMAP_ADAPT_R_MAX2_REG 
	, o_SMAP_ADAPT_R_MAX20
	, o_SMAP_ADAPT_R_MAX21
	, o_SMAP_ADAPT_R_MAX22
	, o_SMAP_ADAPT_R_MAX23

	  // SPA_SMAP_ADAPT_R_MAX3_REG 
	, o_SMAP_ADAPT_R_MAX30
	, o_SMAP_ADAPT_R_MAX31
	, o_SMAP_ADAPT_R_MAX32
	, o_SMAP_ADAPT_R_MAX33

	  // SPA_SMAP_ADAPT_R_MAX4_REG 
	, o_SMAP_ADAPT_R_MAX40
	, o_SMAP_ADAPT_R_MAX41
	, o_SMAP_ADAPT_R_MAX42
	, o_SMAP_ADAPT_R_MAX43

	  // SPA_SMAP_ADAPT_R_MAX5_REG 
	, o_SMAP_ADAPT_R_MAX50
	, o_SMAP_ADAPT_R_MAX51
	, o_SMAP_ADAPT_R_MAX52
	, o_SMAP_ADAPT_R_MAX53

	  // SPA_SMAP_ADAPT_R_MAX6_REG 
	, o_SMAP_ADAPT_R_MAX60
	, o_SMAP_ADAPT_R_MAX61
	, o_SMAP_ADAPT_R_MAX62
	, o_SMAP_ADAPT_R_MAX63

	  // SPA_SMAP_ADAPT_R_MAX7_REG 
	, o_SMAP_ADAPT_R_MAX70
	, o_SMAP_ADAPT_R_MAX71
	, o_SMAP_ADAPT_R_MAX72
	, o_SMAP_ADAPT_R_MAX73

	  // SPA_SMAP_ADAPT_R_MIN0_REG 
	, o_SMAP_ADAPT_R_MIN00
	, o_SMAP_ADAPT_R_MIN01
	, o_SMAP_ADAPT_R_MIN02
	, o_SMAP_ADAPT_R_MIN03

	  // SPA_SMAP_ADAPT_R_MIN1_REG 
	, o_SMAP_ADAPT_R_MIN10
	, o_SMAP_ADAPT_R_MIN11
	, o_SMAP_ADAPT_R_MIN12
	, o_SMAP_ADAPT_R_MIN13

	  // SPA_SMAP_ADAPT_R_MIN2_REG 
	, o_SMAP_ADAPT_R_MIN20
	, o_SMAP_ADAPT_R_MIN21
	, o_SMAP_ADAPT_R_MIN22
	, o_SMAP_ADAPT_R_MIN23

	  // SPA_SMAP_ADAPT_R_MIN3_REG 
	, o_SMAP_ADAPT_R_MIN30
	, o_SMAP_ADAPT_R_MIN31
	, o_SMAP_ADAPT_R_MIN32
	, o_SMAP_ADAPT_R_MIN33

	  // SPA_SMAP_ADAPT_R_MIN4_REG 
	, o_SMAP_ADAPT_R_MIN40
	, o_SMAP_ADAPT_R_MIN41
	, o_SMAP_ADAPT_R_MIN42
	, o_SMAP_ADAPT_R_MIN43

	  // SPA_SMAP_ADAPT_R_MIN5_REG 
	, o_SMAP_ADAPT_R_MIN50
	, o_SMAP_ADAPT_R_MIN51
	, o_SMAP_ADAPT_R_MIN52
	, o_SMAP_ADAPT_R_MIN53

	  // SPA_SMAP_ADAPT_R_MIN6_REG 
	, o_SMAP_ADAPT_R_MIN60
	, o_SMAP_ADAPT_R_MIN61
	, o_SMAP_ADAPT_R_MIN62
	, o_SMAP_ADAPT_R_MIN63

	  // SPA_SMAP_ADAPT_R_MIN7_REG 
	, o_SMAP_ADAPT_R_MIN70
	, o_SMAP_ADAPT_R_MIN71
	, o_SMAP_ADAPT_R_MIN72
	, o_SMAP_ADAPT_R_MIN73

	  // SPA_SMAP_ADAPT_G_MAX0_REG 
	, o_SMAP_ADAPT_G_MAX00
	, o_SMAP_ADAPT_G_MAX01
	, o_SMAP_ADAPT_G_MAX02
	, o_SMAP_ADAPT_G_MAX03

	  // SPA_SMAP_ADAPT_G_MAX1_REG 
	, o_SMAP_ADAPT_G_MAX10
	, o_SMAP_ADAPT_G_MAX11
	, o_SMAP_ADAPT_G_MAX12
	, o_SMAP_ADAPT_G_MAX13

	  // SPA_SMAP_ADAPT_G_MAX2_REG 
	, o_SMAP_ADAPT_G_MAX20
	, o_SMAP_ADAPT_G_MAX21
	, o_SMAP_ADAPT_G_MAX22
	, o_SMAP_ADAPT_G_MAX23

	  // SPA_SMAP_ADAPT_G_MAX3_REG 
	, o_SMAP_ADAPT_G_MAX30
	, o_SMAP_ADAPT_G_MAX31
	, o_SMAP_ADAPT_G_MAX32
	, o_SMAP_ADAPT_G_MAX33

	  // SPA_SMAP_ADAPT_G_MAX4_REG 
	, o_SMAP_ADAPT_G_MAX40
	, o_SMAP_ADAPT_G_MAX41
	, o_SMAP_ADAPT_G_MAX42
	, o_SMAP_ADAPT_G_MAX43

	  // SPA_SMAP_ADAPT_G_MAX5_REG 
	, o_SMAP_ADAPT_G_MAX50
	, o_SMAP_ADAPT_G_MAX51
	, o_SMAP_ADAPT_G_MAX52
	, o_SMAP_ADAPT_G_MAX53

	  // SPA_SMAP_ADAPT_G_MAX6_REG 
	, o_SMAP_ADAPT_G_MAX60
	, o_SMAP_ADAPT_G_MAX61
	, o_SMAP_ADAPT_G_MAX62
	, o_SMAP_ADAPT_G_MAX63

	  // SPA_SMAP_ADAPT_G_MAX7_REG 
	, o_SMAP_ADAPT_G_MAX70
	, o_SMAP_ADAPT_G_MAX71
	, o_SMAP_ADAPT_G_MAX72
	, o_SMAP_ADAPT_G_MAX73

	  // SPA_SMAP_ADAPT_G_MIN0_REG 
	, o_SMAP_ADAPT_G_MIN00
	, o_SMAP_ADAPT_G_MIN01
	, o_SMAP_ADAPT_G_MIN02
	, o_SMAP_ADAPT_G_MIN03

	  // SPA_SMAP_ADAPT_G_MIN1_REG 
	, o_SMAP_ADAPT_G_MIN10
	, o_SMAP_ADAPT_G_MIN11
	, o_SMAP_ADAPT_G_MIN12
	, o_SMAP_ADAPT_G_MIN13

	  // SPA_SMAP_ADAPT_G_MIN2_REG 
	, o_SMAP_ADAPT_G_MIN20
	, o_SMAP_ADAPT_G_MIN21
	, o_SMAP_ADAPT_G_MIN22
	, o_SMAP_ADAPT_G_MIN23

	  // SPA_SMAP_ADAPT_G_MIN3_REG 
	, o_SMAP_ADAPT_G_MIN30
	, o_SMAP_ADAPT_G_MIN31
	, o_SMAP_ADAPT_G_MIN32
	, o_SMAP_ADAPT_G_MIN33

	  // SPA_SMAP_ADAPT_G_MIN4_REG 
	, o_SMAP_ADAPT_G_MIN40
	, o_SMAP_ADAPT_G_MIN41
	, o_SMAP_ADAPT_G_MIN42
	, o_SMAP_ADAPT_G_MIN43

	  // SPA_SMAP_ADAPT_G_MIN5_REG 
	, o_SMAP_ADAPT_G_MIN50
	, o_SMAP_ADAPT_G_MIN51
	, o_SMAP_ADAPT_G_MIN52
	, o_SMAP_ADAPT_G_MIN53

	  // SPA_SMAP_ADAPT_G_MIN6_REG 
	, o_SMAP_ADAPT_G_MIN60
	, o_SMAP_ADAPT_G_MIN61
	, o_SMAP_ADAPT_G_MIN62
	, o_SMAP_ADAPT_G_MIN63

	  // SPA_SMAP_ADAPT_G_MIN7_REG 
	, o_SMAP_ADAPT_G_MIN70
	, o_SMAP_ADAPT_G_MIN71
	, o_SMAP_ADAPT_G_MIN72
	, o_SMAP_ADAPT_G_MIN73

	  // SPA_SMAP_ADAPT_B_MAX0_REG 
	, o_SMAP_ADAPT_B_MAX00
	, o_SMAP_ADAPT_B_MAX01
	, o_SMAP_ADAPT_B_MAX02
	, o_SMAP_ADAPT_B_MAX03

	  // SPA_SMAP_ADAPT_B_MAX1_REG 
	, o_SMAP_ADAPT_B_MAX10
	, o_SMAP_ADAPT_B_MAX11
	, o_SMAP_ADAPT_B_MAX12
	, o_SMAP_ADAPT_B_MAX13

	  // SPA_SMAP_ADAPT_B_MAX2_REG 
	, o_SMAP_ADAPT_B_MAX20
	, o_SMAP_ADAPT_B_MAX21
	, o_SMAP_ADAPT_B_MAX22
	, o_SMAP_ADAPT_B_MAX23

	  // SPA_SMAP_ADAPT_B_MAX3_REG 
	, o_SMAP_ADAPT_B_MAX30
	, o_SMAP_ADAPT_B_MAX31
	, o_SMAP_ADAPT_B_MAX32
	, o_SMAP_ADAPT_B_MAX33

	  // SPA_SMAP_ADAPT_B_MAX4_REG 
	, o_SMAP_ADAPT_B_MAX40
	, o_SMAP_ADAPT_B_MAX41
	, o_SMAP_ADAPT_B_MAX42
	, o_SMAP_ADAPT_B_MAX43

	  // SPA_SMAP_ADAPT_B_MAX5_REG 
	, o_SMAP_ADAPT_B_MAX50
	, o_SMAP_ADAPT_B_MAX51
	, o_SMAP_ADAPT_B_MAX52
	, o_SMAP_ADAPT_B_MAX53

	  // SPA_SMAP_ADAPT_B_MAX6_REG 
	, o_SMAP_ADAPT_B_MAX60
	, o_SMAP_ADAPT_B_MAX61
	, o_SMAP_ADAPT_B_MAX62
	, o_SMAP_ADAPT_B_MAX63

	  // SPA_SMAP_ADAPT_B_MAX7_REG 
	, o_SMAP_ADAPT_B_MAX70
	, o_SMAP_ADAPT_B_MAX71
	, o_SMAP_ADAPT_B_MAX72
	, o_SMAP_ADAPT_B_MAX73

	  // SPA_SMAP_ADAPT_B_MIN0_REG 
	, o_SMAP_ADAPT_B_MIN00
	, o_SMAP_ADAPT_B_MIN01
	, o_SMAP_ADAPT_B_MIN02
	, o_SMAP_ADAPT_B_MIN03

	  // SPA_SMAP_ADAPT_B_MIN1_REG 
	, o_SMAP_ADAPT_B_MIN10
	, o_SMAP_ADAPT_B_MIN11
	, o_SMAP_ADAPT_B_MIN12
	, o_SMAP_ADAPT_B_MIN13

	  // SPA_SMAP_ADAPT_B_MIN2_REG 
	, o_SMAP_ADAPT_B_MIN20
	, o_SMAP_ADAPT_B_MIN21
	, o_SMAP_ADAPT_B_MIN22
	, o_SMAP_ADAPT_B_MIN23

	  // SPA_SMAP_ADAPT_B_MIN3_REG 
	, o_SMAP_ADAPT_B_MIN30
	, o_SMAP_ADAPT_B_MIN31
	, o_SMAP_ADAPT_B_MIN32
	, o_SMAP_ADAPT_B_MIN33

	  // SPA_SMAP_ADAPT_B_MIN4_REG 
	, o_SMAP_ADAPT_B_MIN40
	, o_SMAP_ADAPT_B_MIN41
	, o_SMAP_ADAPT_B_MIN42
	, o_SMAP_ADAPT_B_MIN43

	  // SPA_SMAP_ADAPT_B_MIN5_REG 
	, o_SMAP_ADAPT_B_MIN50
	, o_SMAP_ADAPT_B_MIN51
	, o_SMAP_ADAPT_B_MIN52
	, o_SMAP_ADAPT_B_MIN53

	  // SPA_SMAP_ADAPT_B_MIN6_REG 
	, o_SMAP_ADAPT_B_MIN60
	, o_SMAP_ADAPT_B_MIN61
	, o_SMAP_ADAPT_B_MIN62
	, o_SMAP_ADAPT_B_MIN63

	  // SPA_SMAP_ADAPT_B_MIN7_REG 
	, o_SMAP_ADAPT_B_MIN70
	, o_SMAP_ADAPT_B_MIN71
	, o_SMAP_ADAPT_B_MIN72
	, o_SMAP_ADAPT_B_MIN73

	  // SPA_TBL_ADDR_00_UP_REG 
	, o_TBL_ADDR_00_UP

	  // SPA_TBL_ADDR_01_UP_REG 
	, o_TBL_ADDR_01_UP

	  // SPA_TBL_ADDR_02_UP_REG 
	, o_TBL_ADDR_02_UP

	  // SPA_TBL_ADDR_03_UP_REG 
	, o_TBL_ADDR_03_UP

	  // SPA_TBL_ADDR_04_UP_REG 
	, o_TBL_ADDR_04_UP

	  // SPA_TBL_ADDR_05_UP_REG 
	, o_TBL_ADDR_05_UP

	  // SPA_TBL_ADDR_06_UP_REG 
	, o_TBL_ADDR_06_UP

	  // SPA_TBL_ADDR_07_UP_REG 
	, o_TBL_ADDR_07_UP

	  // SPA_TBL_ADDR_08_UP_REG 
	, o_TBL_ADDR_08_UP

	  // SPA_TBL_ADDR_09_UP_REG 
	, o_TBL_ADDR_09_UP

	  // SPA_TBL_ADDR_10_UP_REG 
	, o_TBL_ADDR_10_UP

	  // SPA_TBL_ADDR_11_UP_REG 
	, o_TBL_ADDR_11_UP

	  // SPA_TBL_ADDR_12_UP_REG 
	, o_TBL_ADDR_12_UP

	  // SPA_TBL_ADDR_13_UP_REG 
	, o_TBL_ADDR_13_UP

	  // SPA_TBL_ADDR_14_UP_REG 
	, o_TBL_ADDR_14_UP

	  // SPA_TBL_ADDR_15_UP_REG 
	, o_TBL_ADDR_15_UP

	  // SPA_TBL_ADDR_16_UP_REG 
	, o_TBL_ADDR_16_UP

	  // SPA_TBL_ADDR_17_UP_REG 
	, o_TBL_ADDR_17_UP

	  // SPA_TBL_ADDR_18_UP_REG 
	, o_TBL_ADDR_18_UP

	  // SPA_TBL_ADDR_19_UP_REG 
	, o_TBL_ADDR_19_UP

	  // SPA_TBL_ADDR_20_UP_REG 
	, o_TBL_ADDR_20_UP

	  // SPA_TBL_ADDR_21_UP_REG 
	, o_TBL_ADDR_21_UP

	  // SPA_TBL_ADDR_22_UP_REG 
	, o_TBL_ADDR_22_UP

	  // SPA_TBL_ADDR_23_UP_REG 
	, o_TBL_ADDR_23_UP

	  // SPA_TBL_ADDR_24_UP_REG 
	, o_TBL_ADDR_24_UP

	  // SPA_RX_CH0_PREV_ADDR_UP_REG 
	, o_RX_CH0_PREV_ADDR_UP

	  // SPA_RX_CH1_PREV_ADDR_UP_REG 
	, o_RX_CH1_PREV_ADDR_UP

	  // SPA_RX_CH2_PREV_ADDR_UP_REG 
	, o_RX_CH2_PREV_ADDR_UP

	  // SPA_RX_CH0_CURR_ADDR_UP_REG 
	, o_RX_CH0_CURR_ADDR_UP

	  // SPA_RX_CH1_CURR_ADDR_UP_REG 
	, o_RX_CH1_CURR_ADDR_UP

	  // SPA_RX_CH2_CURR_ADDR_UP_REG 
	, o_RX_CH2_CURR_ADDR_UP

	  // SPA_RX_CH0_START_ADDR_UP_REG 
	, o_RX_CH0_START_ADDR_UP

	  // SPA_RX_CH1_START_ADDR_UP_REG 
	, o_RX_CH1_START_ADDR_UP

	  // SPA_RX_CH2_START_ADDR_UP_REG 
	, o_RX_CH2_START_ADDR_UP

	  // SPA_RX_CUR_ADDR_CH0_UP_REG 
	, o_RX_CUR_ADDR_CH0_UP

	  // SPA_RX_CUR_ADDR_CH1_UP_REG 
	, o_RX_CUR_ADDR_CH1_UP

	  // SPA_RX_CUR_ADDR_CH2_UP_REG 
	, o_RX_CUR_ADDR_CH2_UP

	  // SPA_TX_CH0_START_ADDR_UP_REG 
	, o_TX_CH0_START_ADDR_UP

	  // SPA_TX_CH1_START_ADDR_UP_REG 
	, o_TX_CH1_START_ADDR_UP

	  // SPA_TX_CH2_START_ADDR_UP_REG 
	, o_TX_CH2_START_ADDR_UP

	  // SPA_TX_ADDR_CH0_MAX_UP_REG 
	, o_TX_ADDR_CH0_MAX_UP

	  // SPA_TX_ADDR_CH0_MIN_UP_REG 
	, o_TX_ADDR_CH0_MIN_UP

	  // SPA_TX_ADDR_CH1_MAX_UP_REG 
	, o_TX_ADDR_CH1_MAX_UP

	  // SPA_TX_ADDR_CH1_MIN_UP_REG 
	, o_TX_ADDR_CH1_MIN_UP

	  // SPA_TX_ADDR_CH2_MAX_UP_REG 
	, o_TX_ADDR_CH2_MAX_UP

	  // SPA_TX_ADDR_CH2_MIN_UP_REG 
	, o_TX_ADDR_CH2_MIN_UP

	  // SPA_TX_CH0_CUR_ADDR_UP_REG 
	, o_TX_CH0_CUR_ADDR_UP

	  // SPA_TX_CH1_CUR_ADDR_UP_REG 
	, o_TX_CH1_CUR_ADDR_UP

	  // SPA_TX_CH2_CUR_ADDR_UP_REG 
	, o_TX_CH2_CUR_ADDR_UP

	  // SPA_ADAPT_DMA_ADDR_UP_REG 
	, o_ADAPT_ADDR_UP

	  // SPA_ADAPT_TX_ADDR_MAX_UP_REG 
	, o_ADAPT_TX_ADDR_MAX_UP

	  // SPA_ADAPT_TX_ADDR_MIN_UP_REG 
	, o_ADAPT_TX_ADDR_MIN_UP

	  // SPA_ADAPT_TX_CUR_ADDR_UP_REG 
	, o_ADAPT_TX_CUR_ADDR_UP

	  // SPA_SMAP_DMA_ADDR_UP_REG 
	, o_SMAP_ADDR_UP

	  // SPA_SMAP_TX_ADDR_MAX_UP_REG 
	, o_SMAP_TX_ADDR_MAX_UP

	  // SPA_SMAP_TX_ADDR_MIN_UP_REG 
	, o_SMAP_TX_ADDR_MIN_UP

	  // SPA_SMAP_TX_CUR_ADDR_UP_REG 
	, o_SMAP_TX_CUR_ADDR_UP

	  // SPA_BDS_DMA_ADDR_UP_REG 
	, o_BDS_ADDR_UP

	  // SPA_BDS_TX_ADDR_MAX_UP_REG 
	, o_BDS_TX_ADDR_MAX_UP

	  // SPA_BDS_TX_ADDR_MIN_UP_REG 
	, o_BDS_TX_ADDR_MIN_UP

	  // SPA_BDS_TX_CUR_ADDR_UP_REG 
	, o_BDS_TX_CUR_ADDR_UP

	  // SPA_ADAPT_DMA_BUF_WR_CNT_REG 
	, o_ADAPT_DMA_BUF_WR_CNT

	  // SPA_ADAPT_DMA_BUF_RD_CNT_REG 
	, o_ADAPT_DMA_BUF_RD_CNT

	  // SPA_ADAPT_DMA_OUT0_CNT_REG 
	, o_ADAPT_DMA_OUT0_CNT

	  // SPA_SMAP_DMA_BUF_WR_CNT_REG 
	, o_SMAP_DMA_BUF_WR_CNT

	  // SPA_SMAP_DMA_BUF_RD_CNT_REG 
	, o_SMAP_DMA_BUF_RD_CNT

	  // SPA_SMAP_DMA_OUT0_CNT_REG 
	, o_SMAP_DMA_OUT0_CNT

	  // SPA_BDS_DMA_BUF_WR_CNT_REG 
	, o_BDS_DMA_BUF_WR_CNT

	  // SPA_BDS_DMA_BUF_RD_CNT_REG 
	, o_BDS_DMA_BUF_RD_CNT

	  // SPA_BDS_DMA_OUT0_CNT_REG 
	, o_BDS_DMA_OUT0_CNT

	  // SPA_ADAPT_WDATA_CNT_REG 
	, o_ADAPT_WDATA_CNT

	  // SPA_SMAP_WDATA_CNT_REG 
	, o_SMAP_WDATA_CNT

	  // SPA_BDS_WDATA_CNT_REG 
	, o_BDS_WDATA_CNT

);

// Parameters (Basic)

// Parameters (SFR Addr)
parameter	SPA_SW_RESET		= 13'h0000>>2;
parameter	SPA_CORE_START		= 13'h0004>>2;
parameter	SPA_MODE		= 13'h0008>>2;
parameter	SPA_MODULE_EN		= 13'h000c>>2;
parameter	SPA_RX_XD		= 13'h0010>>2;
parameter	SPA_RX_YD		= 13'h0014>>2;
parameter	SPA_TX_IMG_SIZE		= 13'h0018>>2;
parameter	SPA_RX_PADDING_VAL		= 13'h001c>>2;
parameter	SPA_VERSION		= 13'h0024>>2;
parameter	SPA_IRQ_ENABLE		= 13'h0030>>2;
parameter	SPA_IRQ_PEND		= 13'h0034>>2;
parameter	SPA_IRQ_SVC_CNT		= 13'h0038>>2;
parameter	SPA_RAM_SW_MODE		= 13'h003c>>2;
parameter	SPA_RAM_CS		= 13'h0040>>2;
parameter	SPA_RAM_DATA		= 13'h0048>>2;
parameter	SPA_RAM_ADDR		= 13'h004c>>2;
parameter	SPA_CORE_BAND_DONE		= 13'h0054>>2;
parameter	SPA_CORE_PAGE_DONE		= 13'h0058>>2;
parameter	SPA_TBL_RX_CNT		= 13'h006c>>2;
parameter	SPA_TBL_TX_CNT		= 13'h0070>>2;
parameter	SPA_TBL_END_STATUS1		= 13'h0074>>2;
parameter	SPA_TBL_START		= 13'h0080>>2;
parameter	SPA_TBL_ENABLE		= 13'h0084>>2;
parameter	SPA_TBL_ADDR_00		= 13'h008c>>2;
parameter	SPA_TBL_ADDR_01		= 13'h0090>>2;
parameter	SPA_TBL_ADDR_02		= 13'h0094>>2;
parameter	SPA_TBL_ADDR_03		= 13'h0098>>2;
parameter	SPA_TBL_ADDR_04		= 13'h009c>>2;
parameter	SPA_TBL_ADDR_05		= 13'h00a0>>2;
parameter	SPA_TBL_ADDR_06		= 13'h00a4>>2;
parameter	SPA_TBL_ADDR_07		= 13'h00a8>>2;
parameter	SPA_TBL_ADDR_08		= 13'h00ac>>2;
parameter	SPA_TBL_ADDR_09		= 13'h00b0>>2;
parameter	SPA_TBL_ADDR_10		= 13'h00b4>>2;
parameter	SPA_TBL_ADDR_11		= 13'h00b8>>2;
parameter	SPA_TBL_ADDR_12		= 13'h00bc>>2;
parameter	SPA_TBL_ADDR_13		= 13'h00c0>>2;
parameter	SPA_TBL_ADDR_14		= 13'h00c4>>2;
parameter	SPA_TBL_ADDR_15		= 13'h00c8>>2;
parameter	SPA_TBL_ADDR_16		= 13'h00cc>>2;
parameter	SPA_TBL_ADDR_17		= 13'h00d0>>2;
parameter	SPA_TBL_ADDR_18		= 13'h00d4>>2;
parameter	SPA_TBL_ADDR_19		= 13'h00d8>>2;
parameter	SPA_TBL_ADDR_20		= 13'h00dc>>2;
parameter	SPA_TBL_ADDR_21		= 13'h00e0>>2;
parameter	SPA_TBL_ADDR_22		= 13'h00e4>>2;
parameter	SPA_TBL_ADDR_23		= 13'h00e8>>2;
parameter	SPA_TBL_ADDR_24		= 13'h00ec>>2;
parameter	SPA_RX_START		= 13'h0140>>2;
parameter	SPA_RX_INCR		= 13'h0148>>2;
parameter	SPA_RX_CH0_PREV_ADDR		= 13'h014c>>2;
parameter	SPA_RX_CH1_PREV_ADDR		= 13'h0150>>2;
parameter	SPA_RX_CH2_PREV_ADDR		= 13'h0154>>2;
parameter	SPA_RX_CH0_CURR_ADDR		= 13'h0158>>2;
parameter	SPA_RX_CH1_CURR_ADDR		= 13'h015c>>2;
parameter	SPA_RX_CH2_CURR_ADDR		= 13'h0160>>2;
parameter	SPA_RX_CH0_START_ADDR		= 13'h0164>>2;
parameter	SPA_RX_CH1_START_ADDR		= 13'h0168>>2;
parameter	SPA_RX_CH2_START_ADDR		= 13'h016c>>2;
parameter	SPA_RX_BLK_CNT		= 13'h0170>>2;
parameter	SPA_RX_STATUS		= 13'h0174>>2;
parameter	SPA_RX_CH0_CUR_ADDR		= 13'h0178>>2;
parameter	SPA_RX_CH1_CUR_ADDR		= 13'h017c>>2;
parameter	SPA_RX_CH2_CUR_ADDR		= 13'h0180>>2;
parameter	SPA_RX_CH0_SVC_CNT		= 13'h0184>>2;
parameter	SPA_RX_CH1_SVC_CNT		= 13'h0188>>2;
parameter	SPA_RX_CH2_SVC_CNT		= 13'h018c>>2;
parameter	SPA_RX_DMA_CON		= 13'h0190>>2;
parameter	SPA_RX_ERR_STATUS		= 13'h0194>>2;
parameter	SPA_TX_START		= 13'h01c0>>2;
parameter	SPA_TX_DMA_CON		= 13'h01c4>>2;
parameter	SPA_TX_BAND_NUM		= 13'h01c8>>2;
parameter	SPA_TX_DATA_INCR		= 13'h01cc>>2;
parameter	SPA_TX_CH0_START_ADDR		= 13'h01d4>>2;
parameter	SPA_TX_CH1_START_ADDR		= 13'h01d8>>2;
parameter	SPA_TX_CH2_START_ADDR		= 13'h01dc>>2;
parameter	SPA_TX_BLK_CNT		= 13'h01e8>>2;
parameter	SPA_TX_STATUS		= 13'h01ec>>2;
parameter	SPA_TX_ADDR_CH0_MAX		= 13'h01f0>>2;
parameter	SPA_TX_ADDR_CH0_MIN		= 13'h01f4>>2;
parameter	SPA_TX_ADDR_CH1_MAX		= 13'h01f8>>2;
parameter	SPA_TX_ADDR_CH1_MIN		= 13'h01fc>>2;
parameter	SPA_TX_ADDR_CH2_MAX		= 13'h0200>>2;
parameter	SPA_TX_ADDR_CH2_MIN		= 13'h0204>>2;
parameter	SPA_TX_CH0_CUR_ADDR		= 13'h0218>>2;
parameter	SPA_TX_CH1_CUR_ADDR		= 13'h021c>>2;
parameter	SPA_TX_CH2_CUR_ADDR		= 13'h0220>>2;
parameter	SPA_TX_CH0_SVC_CNT		= 13'h022c>>2;
parameter	SPA_TX_CH1_SVC_CNT		= 13'h0230>>2;
parameter	SPA_TX_CH2_SVC_CNT		= 13'h0234>>2;
parameter	SPA_TX_ERR_STATUS		= 13'h0240>>2;
parameter	SPA_ADAPT_DMA_CON		= 13'h0280>>2;
parameter	SPA_ADAPT_DMA_ADDR		= 13'h0284>>2;
parameter	SPA_ADAPT_DMA_ADDR_INCR		= 13'h0288>>2;
parameter	SPA_ADAPT_DMA_STATUS		= 13'h028c>>2;
parameter	SPA_ADAPT_TX_ADDR_MAX		= 13'h0290>>2;
parameter	SPA_ADAPT_TX_ADDR_MIN		= 13'h0294>>2;
parameter	SPA_ADAPT_TX_CUR_ADDR		= 13'h0298>>2;
parameter	SPA_ADAPT_TX_SVC_CNT		= 13'h029c>>2;
parameter	SPA_ADAPT_START		= 13'h02a0>>2;
parameter	SPA_ADAPT_BAND_CNT		= 13'h02a4>>2;
parameter	SPA_SMAP_DMA_CON		= 13'h02c0>>2;
parameter	SPA_SMAP_DMA_ADDR		= 13'h02c4>>2;
parameter	SPA_SMAP_DMA_ADDR_INCR		= 13'h02c8>>2;
parameter	SPA_SMAP_DMA_STATUS		= 13'h02cc>>2;
parameter	SPA_SMAP_TX_ADDR_MAX		= 13'h02d0>>2;
parameter	SPA_SMAP_TX_ADDR_MIN		= 13'h02d4>>2;
parameter	SPA_SMAP_TX_CUR_ADDR		= 13'h02d8>>2;
parameter	SPA_SMAP_TX_SVC_CNT		= 13'h02dc>>2;
parameter	SPA_SMAP_START		= 13'h02e0>>2;
parameter	SPA_SMAP_BAND_CNT		= 13'h02e4>>2;
parameter	SPA_BDS_DMA_CON		= 13'h0300>>2;
parameter	SPA_BDS_DMA_ADDR		= 13'h0304>>2;
parameter	SPA_BDS_DMA_ADDR_INCR		= 13'h0308>>2;
parameter	SPA_BDS_DMA_STATUS		= 13'h030c>>2;
parameter	SPA_BDS_TX_ADDR_MAX		= 13'h0310>>2;
parameter	SPA_BDS_TX_ADDR_MIN		= 13'h0314>>2;
parameter	SPA_BDS_TX_CUR_ADDR		= 13'h0318>>2;
parameter	SPA_BDS_TX_SVC_CNT		= 13'h031c>>2;
parameter	SPA_BDS_START		= 13'h0320>>2;
parameter	SPA_BDS_BAND_CNT		= 13'h0324>>2;
parameter	SPA_RX_CH0_CRC		= 13'h0340>>2;
parameter	SPA_RX_CH1_CRC		= 13'h0344>>2;
parameter	SPA_RX_CH2_CRC		= 13'h0348>>2;
parameter	SPA_RC1_CH0_CRC		= 13'h0350>>2;
parameter	SPA_RC1_CH1_CRC		= 13'h0354>>2;
parameter	SPA_RC1_CH2_CRC		= 13'h0358>>2;
parameter	SPA_RC1_CH0_CRC_DEBUG		= 13'h0360>>2;
parameter	SPA_RC1_CH1_CRC_DEBUG		= 13'h0364>>2;
parameter	SPA_RC1_CH2_CRC_DEBUG		= 13'h0368>>2;
parameter	SPA_S1D_CH0_CRC		= 13'h0370>>2;
parameter	SPA_S1D_CH1_CRC		= 13'h0374>>2;
parameter	SPA_S1D_CH2_CRC		= 13'h0378>>2;
parameter	SPA_SEG1_CH0_CRC		= 13'h0380>>2;
parameter	SPA_SEG1_CH1_CRC		= 13'h0384>>2;
parameter	SPA_SEG1_CH2_CRC		= 13'h0388>>2;
parameter	SPA_SEG1_ATT_CRC		= 13'h038c>>2;
parameter	SPA_SCC_CH0_CRC		= 13'h0390>>2;
parameter	SPA_SCC_CH1_CRC		= 13'h0394>>2;
parameter	SPA_SCC_CH2_CRC		= 13'h0398>>2;
parameter	SPA_SCC_ATT_CRC		= 13'h039c>>2;
parameter	SPA_SEG2_CH0_CRC		= 13'h03a0>>2;
parameter	SPA_SEG2_CH1_CRC		= 13'h03a4>>2;
parameter	SPA_SEG2_CH2_CRC		= 13'h03a8>>2;
parameter	SPA_SEG2_ATT_CRC		= 13'h03ac>>2;
parameter	SPA_BSSA_CH0_CRC		= 13'h03b0>>2;
parameter	SPA_BSSA_CH1_CRC		= 13'h03b4>>2;
parameter	SPA_BSSA_CH2_CRC		= 13'h03b8>>2;
parameter	SPA_DMATX_CH0_CRC		= 13'h03c0>>2;
parameter	SPA_DMATX_CH1_CRC		= 13'h03c4>>2;
parameter	SPA_DMATX_CH2_CRC		= 13'h03c8>>2;
parameter	SPA_RC2_CH0_CRC		= 13'h03d0>>2;
parameter	SPA_RC2_CH1_CRC		= 13'h03d4>>2;
parameter	SPA_RC2_CH2_CRC		= 13'h03d8>>2;
parameter	SPA_ADAPT_CRC		= 13'h03e0>>2;
parameter	SPA_SMAP_CRC		= 13'h03e4>>2;
parameter	SPA_BDS_CRC		= 13'h03e8>>2;
parameter	SPA_VSD_CH0_CRC		= 13'h03f0>>2;
parameter	SPA_VSD_CH1_CRC		= 13'h03f4>>2;
parameter	SPA_VSD_CH2_CRC		= 13'h03f8>>2;
parameter	SPA_CIS_CH0_CRC		= 13'h0400>>2;
parameter	SPA_CIS_CH1_CRC		= 13'h0404>>2;
parameter	SPA_CIS_CH2_CRC		= 13'h0408>>2;
parameter	SPA_BSSB_CH0_CRC		= 13'h0410>>2;
parameter	SPA_BSSB_CH1_CRC		= 13'h0414>>2;
parameter	SPA_BSSB_CH2_CRC		= 13'h0418>>2;
parameter	SPA_S1D_DEBUG_FLAG		= 13'h0440>>2;
parameter	SPA_SCC_DEBUG_FLAG		= 13'h0444>>2;
parameter	SPA_BDS_DEBUG_FLAG		= 13'h0448>>2;
parameter	SPA_BSSA_DEBUG_FLAG		= 13'h044c>>2;
parameter	SPA_BSSB_DEBUG_FLAG		= 13'h0450>>2;
parameter	SPA_VSD_A		= 13'h0480>>2;
parameter	SPA_VSD_B		= 13'h0484>>2;
parameter	SPA_VSD_C		= 13'h0488>>2;
parameter	SPA_VSC_D		= 13'h048c>>2;
parameter	SPA_VSD_E		= 13'h0490>>2;
parameter	SPA_VSD_F		= 13'h0494>>2;
parameter	SPA_VSD_G		= 13'h0498>>2;
parameter	SPA_VSD_H		= 13'h049c>>2;
parameter	SPA_CIS_SUB_COEF_R		= 13'h04c0>>2;
parameter	SPA_CIS_SUB_COEF_G		= 13'h04c4>>2;
parameter	SPA_CIS_SUB_COEF_B		= 13'h04c8>>2;
parameter	SPA_RC1_SHIFT_VAL		= 13'h0500>>2;
parameter	SPA_RC1_SHIFT_OFST		= 13'h0504>>2;
parameter	SPA_RC1_LOOP		= 13'h0508>>2;
parameter	SPA_RC1_X_COF_00_01		= 13'h0510>>2;
parameter	SPA_RC1_X_COF_02_03		= 13'h0514>>2;
parameter	SPA_RC1_X_COF_10_11		= 13'h0518>>2;
parameter	SPA_RC1_X_COF_12_13		= 13'h051c>>2;
parameter	SPA_RC1_X_COF_20_21		= 13'h0520>>2;
parameter	SPA_RC1_X_COF_22_23		= 13'h0524>>2;
parameter	SPA_RC1_X_COF_30_31		= 13'h0528>>2;
parameter	SPA_RC1_X_COF_32_33		= 13'h052c>>2;
parameter	SPA_RC1_Y_COF_00_01		= 13'h0530>>2;
parameter	SPA_RC1_Y_COF_02_03		= 13'h0534>>2;
parameter	SPA_RC1_Y_COF_10_11		= 13'h0538>>2;
parameter	SPA_RC1_Y_COF_12_13		= 13'h053c>>2;
parameter	SPA_RC1_Y_COF_20_21		= 13'h0540>>2;
parameter	SPA_RC1_Y_COF_22_23		= 13'h0544>>2;
parameter	SPA_RC1_Y_COF_30_31		= 13'h0548>>2;
parameter	SPA_RC1_Y_COF_32_33		= 13'h054c>>2;
parameter	SPA_SEG1_CON		= 13'h0580>>2;
parameter	SPA_SEG1_HVLINE_TH		= 13'h0584>>2;
parameter	SPA_SEG1_EDGE_TH		= 13'h0588>>2;
parameter	SPA_SEG1_LINE_TH		= 13'h058c>>2;
parameter	SPA_SEG1_ZC_TH		= 13'h0590>>2;
parameter	SPA_SCC_CON		= 13'h05c0>>2;
parameter	SPA_SEG2_CON		= 13'h0600>>2;
parameter	SPA_SEG2_PARAM1		= 13'h0604>>2;
parameter	SPA_SEG2_PARAM2		= 13'h0608>>2;
parameter	SPA_SEG2_FAR_CHROMA_PARAM		= 13'h060c>>2;
parameter	SPA_SEG2_FAR_Y_PARAM		= 13'h0610>>2;
parameter	SPA_SEG2_NEUT_CHROMA_PARAM		= 13'h0614>>2;
parameter	SPA_PAGE_EN		= 13'h07c0>>2;
parameter	SPA_BLOCK_SIZE		= 13'h07c4>>2;
parameter	SPA_AREA_SIZE		= 13'h07c8>>2;
parameter	SPA_CHAR_LENGTH_THICK_V		= 13'h07cc>>2;
parameter	SPA_CHAR_LENGTH_THICK_H		= 13'h07d0>>2;
parameter	SPA_DIFF_CHANGE_V		= 13'h07d4>>2;
parameter	SPA_DIFF_CHANGE_H		= 13'h07d8>>2;
parameter	SPA_DIR_TH1		= 13'h07dc>>2;
parameter	SPA_DIR_TH2		= 13'h07e0>>2;
parameter	SPA_OUT_AREA_OFFSET1		= 13'h07e4>>2;
parameter	SPA_OUT_AREA_OFFSET2		= 13'h07e8>>2;
parameter	SPA_LINE_SPACE		= 13'h07ec>>2;
parameter	SPA_TEXT_FLAG		= 13'h07f0>>2;
parameter	SPA_TEXT_AREA1_W		= 13'h07f4>>2;
parameter	SPA_TEXT_AREA1_H		= 13'h07f8>>2;
parameter	SPA_TEXT_AREA2_W		= 13'h07fc>>2;
parameter	SPA_TEXT_AREA2_H		= 13'h0800>>2;
parameter	SPA_TEXT_AREA3_W		= 13'h0804>>2;
parameter	SPA_TEXT_AREA3_H		= 13'h0808>>2;
parameter	SPA_ABS_PRE_SCAN_LINE		= 13'h0840>>2;
parameter	SPA_ABS_PRE_SCAN_IWIN		= 13'h0844>>2;
parameter	SPA_ABS_TH		= 13'h0848>>2;
parameter	SPA_ABS_VALID_PERCENTAGE		= 13'h084c>>2;
parameter	SPA_ABS_BK_STD_TH		= 13'h0850>>2;
parameter	SPA_ABS_SIGMA		= 13'h0854>>2;
parameter	SPA_ABS_BG_BACKUP		= 13'h0858>>2;
parameter	SPA_ABS_COLOR_EXCEPTION		= 13'h085c>>2;
parameter	SPA_ABS_TOP_BG_LEVEL		= 13'h0860>>2;
parameter	SPA_ABS_TOP_PEAK_CONFIDENCE		= 13'h0864>>2;
parameter	SPA_ABS_PRE_SCAN_START		= 13'h0868>>2;
parameter	SPA_MAD_PRE_SCAN_LINE		= 13'h0880>>2;
parameter	SPA_MAD_PRE_SCAN_IWIN		= 13'h0884>>2;
parameter	SPA_MAD_TH		= 13'h0888>>2;
parameter	SPA_MAD_VALID_PERCENTAGE		= 13'h088c>>2;
parameter	SPA_MAD_BK_STD_TH		= 13'h0890>>2;
parameter	SPA_MAD_SIGMA		= 13'h0894>>2;
parameter	SPA_MAD_BG_BACKUP		= 13'h0898>>2;
parameter	SPA_MAD_COLOR_EXCEPTION		= 13'h089c>>2;
parameter	SPA_MAD_TOP_BG_LEVEL		= 13'h08a0>>2;
parameter	SPA_MAD_TOP_PEAK_CONFIDENCE		= 13'h08a4>>2;
parameter	SPA_MAD_PRE_SCAN_START		= 13'h08a8>>2;
parameter	SPA_NEWABSD_SCAN_RANGE		= 13'h08c0>>2;
parameter	SPA_NEWABSD_PRE_SCAN_IWIN		= 13'h08c4>>2;
parameter	SPA_NEWABSD_CHOMA_TH		= 13'h08c8>>2;
parameter	SPA_NEWABSD_LIMIT		= 13'h08cc>>2;
parameter	SPA_NEWABSD_HISTO_PEAK		= 13'h08d0>>2;
parameter	SPA_NEWABSD_HISTO_LEFT		= 13'h08d4>>2;
parameter	SPA_NEWABSD_HISTO_RIGHT		= 13'h08d8>>2;
parameter	SPA_NEWABSD_RESULT		= 13'h08dc>>2;
parameter	SPA_CLA_CON1		= 13'h0900>>2;
parameter	SPA_CLA_CON2		= 13'h0904>>2;
parameter	SPA_TOTAL_BIN_CNT		= 13'h0908>>2;
parameter	SPA_HL_RANGE2		= 13'h090c>>2;
parameter	SPA_HL_COLOR2		= 13'h0910>>2;
parameter	SPA_BTEXT_CNT		= 13'h0914>>2;
parameter	SPA_TEXT_CNT		= 13'h0918>>2;
parameter	SPA_HT_CNT		= 13'h091c>>2;
parameter	SPA_EDGE_CNT		= 13'h0920>>2;
parameter	SPA_WHITE_CNT		= 13'h0924>>2;
parameter	SPA_CONTONE_CNT		= 13'h0928>>2;
parameter	SPA_WHITE_WO_TEXT_CNT		= 13'h092c>>2;
parameter	SPA_WHITE_WO_HT_TEXT_CNT		= 13'h0930>>2;
parameter	SPA_CONTENT_SIZE		= 13'h0934>>2;
parameter	SPA_MARGIN1		= 13'h0980>>2;
parameter	SPA_MARGIN2		= 13'h0984>>2;
parameter	SPA_TH1		= 13'h0988>>2;
parameter	SPA_TH2		= 13'h098c>>2;
parameter	SPA_HLIGHT_SEL_EN		= 13'h0990>>2;
parameter	SPA_AVG_TH		= 13'h0994>>2;
parameter	SPA_HISTO_WIN_VAL		= 13'h0998>>2;
parameter	SPA_RATIO_TH		= 13'h099c>>2;
parameter	SPA_LIMIT_TH		= 13'h09a0>>2;
parameter	SPA_BRIGHT_STRETCH_OFFSET		= 13'h09a4>>2;
parameter	SPA_ACB_TH1		= 13'h09a8>>2;
parameter	SPA_ACB_TH2		= 13'h09ac>>2;
parameter	SPA_OBJECT_TH		= 13'h09b0>>2;
parameter	SPA_ACBD_RESULT1		= 13'h09b4>>2;
parameter	SPA_ACBD_RESULT2		= 13'h09b8>>2;
parameter	SPA_ACBD_ACSREFON		= 13'h09bc>>2;
parameter	SPA_ACS_CON		= 13'h09c0>>2;
parameter	SPA_ACS_MARK_POS_UPPER		= 13'h09c4>>2;
parameter	SPA_ACS_MARK_POS_LOWER		= 13'h09c8>>2;
parameter	SPA_ACS_MARK_POS_LEFT		= 13'h09cc>>2;
parameter	SPA_ACS_MARK_POS_RIGHT		= 13'h09d0>>2;
parameter	SPA_ACS_SATURATION_TH		= 13'h09d4>>2;
parameter	SPA_ACS_HT_TH		= 13'h09d8>>2;
parameter	SPA_ACS_CBMAX1		= 13'h09dc>>2;
parameter	SPA_ACS_CBMAX2		= 13'h09e0>>2;
parameter	SPA_ACS_CBMAX3		= 13'h09e4>>2;
parameter	SPA_ACS_CBMAX4		= 13'h09e8>>2;
parameter	SPA_ACS_CBMIN1		= 13'h09ec>>2;
parameter	SPA_ACS_CBMIN2		= 13'h09f0>>2;
parameter	SPA_ACS_CBMIN3		= 13'h09f4>>2;
parameter	SPA_ACS_CBMIN4		= 13'h09f8>>2;
parameter	SPA_ACS_CRMAX1		= 13'h09fc>>2;
parameter	SPA_ACS_CRMAX2		= 13'h0a00>>2;
parameter	SPA_ACS_CRMAX3		= 13'h0a04>>2;
parameter	SPA_ACS_CRMAX4		= 13'h0a08>>2;
parameter	SPA_ACS_CRMIN1		= 13'h0a0c>>2;
parameter	SPA_ACS_CRMIN2		= 13'h0a10>>2;
parameter	SPA_ACS_CRMIN3		= 13'h0a14>>2;
parameter	SPA_ACS_CRMIN4		= 13'h0a18>>2;
parameter	SPA_ACS_CBMAXH1		= 13'h0a1c>>2;
parameter	SPA_ACS_CBMAXH2		= 13'h0a20>>2;
parameter	SPA_ACS_CBMAXH3		= 13'h0a24>>2;
parameter	SPA_ACS_CBMAXH4		= 13'h0a28>>2;
parameter	SPA_ACS_CBMINH1		= 13'h0a2c>>2;
parameter	SPA_ACS_CBMINH2		= 13'h0a30>>2;
parameter	SPA_ACS_CBMINH3		= 13'h0a34>>2;
parameter	SPA_ACS_CBMINH4		= 13'h0a38>>2;
parameter	SPA_ACS_CRMAXH1		= 13'h0a3c>>2;
parameter	SPA_ACS_CRMAXH2		= 13'h0a40>>2;
parameter	SPA_ACS_CRMAXH3		= 13'h0a44>>2;
parameter	SPA_ACS_CRMAXH4		= 13'h0a48>>2;
parameter	SPA_ACS_CRMINH1		= 13'h0a4c>>2;
parameter	SPA_ACS_CRMINH2		= 13'h0a50>>2;
parameter	SPA_ACS_CRMINH3		= 13'h0a54>>2;
parameter	SPA_ACS_CRMINH4		= 13'h0a58>>2;
parameter	SPA_ACS_VALUE_TH		= 13'h0a5c>>2;
parameter	SPA_ACS_TBLK_PAGE		= 13'h0a60>>2;
parameter	SPA_ACS_TBLK_NPAGE		= 13'h0a64>>2;
parameter	SPA_ACS_CBLK		= 13'h0a68>>2;
parameter	SPA_ACS_SBLK_PAGE		= 13'h0a6c>>2;
parameter	SPA_ACS_SPXL_BLK_PAGE		= 13'h0a70>>2;
parameter	SPA_ACS_SPXL_PAGE		= 13'h0a74>>2;
parameter	SPA_ACS_TEXT_PAGE		= 13'h0a78>>2;
parameter	SPA_ACS_HT_PAGE		= 13'h0a7c>>2;
parameter	SPA_ACS_EDGE_PAGE		= 13'h0a80>>2;
parameter	SPA_AVG_HT_ACS00		= 13'h0a88>>2;
parameter	SPA_AVG_HT_ACS01		= 13'h0a8c>>2;
parameter	SPA_AVG_HT_ACS02		= 13'h0a90>>2;
parameter	SPA_AVG_HT_ACS03		= 13'h0a94>>2;
parameter	SPA_AVG_HT_ACS04		= 13'h0a98>>2;
parameter	SPA_AVG_HT_ACS05		= 13'h0a9c>>2;
parameter	SPA_AVG_HT_ACS06		= 13'h0aa0>>2;
parameter	SPA_AVG_HT_ACS07		= 13'h0aa4>>2;
parameter	SPA_AVG_HT_ACS08		= 13'h0aa8>>2;
parameter	SPA_AVG_HT_ACS09		= 13'h0aac>>2;
parameter	SPA_AVG_HT_ACS10		= 13'h0ab0>>2;
parameter	SPA_AVG_HT_ACS11		= 13'h0ab4>>2;
parameter	SPA_AVG_HT_ACS12		= 13'h0ab8>>2;
parameter	SPA_AVG_HT_ACS13		= 13'h0abc>>2;
parameter	SPA_AVG_HT_ACS14		= 13'h0ac0>>2;
parameter	SPA_AVG_HT_ACS15		= 13'h0ac4>>2;
parameter	SPA_AVG_NHT_ACS00		= 13'h0ac8>>2;
parameter	SPA_AVG_NHT_ACS01		= 13'h0acc>>2;
parameter	SPA_AVG_NHT_ACS02		= 13'h0ad0>>2;
parameter	SPA_AVG_NHT_ACS03		= 13'h0ad4>>2;
parameter	SPA_AVG_NHT_ACS04		= 13'h0ad8>>2;
parameter	SPA_AVG_NHT_ACS05		= 13'h0adc>>2;
parameter	SPA_AVG_NHT_ACS06		= 13'h0ae0>>2;
parameter	SPA_AVG_NHT_ACS07		= 13'h0ae4>>2;
parameter	SPA_AVG_NHT_ACS08		= 13'h0ae8>>2;
parameter	SPA_AVG_NHT_ACS09		= 13'h0aec>>2;
parameter	SPA_AVG_NHT_ACS10		= 13'h0af0>>2;
parameter	SPA_AVG_NHT_ACS11		= 13'h0af4>>2;
parameter	SPA_AVG_NHT_ACS12		= 13'h0af8>>2;
parameter	SPA_AVG_NHT_ACS13		= 13'h0afc>>2;
parameter	SPA_AVG_NHT_ACS14		= 13'h0b00>>2;
parameter	SPA_AVG_NHT_ACS15		= 13'h0b04>>2;
parameter	SPA_ACS_SATURATION_TH2		= 13'h0b08>>2;
parameter	SPA_ACS_VALID_RANGE_H		= 13'h0b0c>>2;
parameter	SPA_ACS_VALID_RANGE_W		= 13'h0b10>>2;
parameter	SPA_ACS_V2_CON		= 13'h0b14>>2;
parameter	SPA_ACS_V2_SATURATION_TH		= 13'h0b18>>2;
parameter	SPA_ACS_V2_SATURATION_TH2		= 13'h0b1c>>2;
parameter	SPA_ACS_V2_HT_TH		= 13'h0b20>>2;
parameter	SPA_ACS_V2_VALUE_TH		= 13'h0b24>>2;
parameter	SPA_ACS_V2_TBLK_PAGE		= 13'h0b28>>2;
parameter	SPA_ACS_V2_TBLK_NPAGE		= 13'h0b2c>>2;
parameter	SPA_ACS_V2_CBLK		= 13'h0b30>>2;
parameter	SPA_ACS_V2_SBLK_PAGE		= 13'h0b34>>2;
parameter	SPA_ACS_V2_SPXL_BLK_PAGE		= 13'h0b38>>2;
parameter	SPA_ACS_V2_SPXL_PAGE		= 13'h0b3c>>2;
parameter	SPA_BLANK_CON0		= 13'h0b40>>2;
parameter	SPA_BLANK_CON1		= 13'h0b44>>2;
parameter	SPA_BLANK_MARK_POS_UPPER		= 13'h0b48>>2;
parameter	SPA_BLANK_MARK_POS_LOWER		= 13'h0b4c>>2;
parameter	SPA_BLANK_MARK_POS_LEFT		= 13'h0b50>>2;
parameter	SPA_BLANK_MARK_POS_RIGHT		= 13'h0b54>>2;
parameter	SPA_BLANK_COLOR_BLK		= 13'h0b58>>2;
parameter	SPA_BLANK_TOTALBLK		= 13'h0b5c>>2;
parameter	SPA_BLANK_CONTBLK		= 13'h0b60>>2;
parameter	SPA_BLANK_BLANKBLK		= 13'h0b64>>2;
parameter	SPA_BLANK_DARKBLK		= 13'h0b68>>2;
parameter	SPA_BLANK_COLORBLK		= 13'h0b6c>>2;
parameter	SPA_BLANK_Y_MIN_MAX		= 13'h0b70>>2;
parameter	SPA_BLANK_CB_MIN_MAX		= 13'h0b74>>2;
parameter	SPA_BLANK_CR_MIN_MAX		= 13'h0b78>>2;
parameter	SPA_RC2_OUTIMG_WIDTH_HEIGHT		= 13'h0b80>>2;
parameter	SPA_RC2_OVERLAP		= 13'h0b84>>2;
parameter	SPA_RC2_FRAC		= 13'h0b88>>2;
parameter	SPA_BDS_CON		= 13'h0bc0>>2;
parameter	SPA_BDS_EDGE1		= 13'h0bc4>>2;
parameter	SPA_BDS_EDGE2		= 13'h0bc8>>2;
parameter	SPA_BDS_EURION1		= 13'h0bcc>>2;
parameter	SPA_BDS_EURION2		= 13'h0bd0>>2;
parameter	SPA_BDS_OFFSET		= 13'h0bd4>>2;
parameter	SPA_BDS_CONTENTS		= 13'h0bd8>>2;
parameter	SPA_SMAP_PARAM_B		= 13'h0c84>>2;
parameter	SPA_SMAP_PARAM_C		= 13'h0c88>>2;
parameter	SPA_SMAP_ADAPT_CON		= 13'h0c8c>>2;
parameter	SPA_SMAP_ADAPT_R_MAX0		= 13'h0c90>>2;
parameter	SPA_SMAP_ADAPT_R_MAX1		= 13'h0c94>>2;
parameter	SPA_SMAP_ADAPT_R_MAX2		= 13'h0c98>>2;
parameter	SPA_SMAP_ADAPT_R_MAX3		= 13'h0c9c>>2;
parameter	SPA_SMAP_ADAPT_R_MAX4		= 13'h0ca0>>2;
parameter	SPA_SMAP_ADAPT_R_MAX5		= 13'h0ca4>>2;
parameter	SPA_SMAP_ADAPT_R_MAX6		= 13'h0ca8>>2;
parameter	SPA_SMAP_ADAPT_R_MAX7		= 13'h0cac>>2;
parameter	SPA_SMAP_ADAPT_R_MIN0		= 13'h0cb0>>2;
parameter	SPA_SMAP_ADAPT_R_MIN1		= 13'h0cb4>>2;
parameter	SPA_SMAP_ADAPT_R_MIN2		= 13'h0cb8>>2;
parameter	SPA_SMAP_ADAPT_R_MIN3		= 13'h0cbc>>2;
parameter	SPA_SMAP_ADAPT_R_MIN4		= 13'h0cc0>>2;
parameter	SPA_SMAP_ADAPT_R_MIN5		= 13'h0cc4>>2;
parameter	SPA_SMAP_ADAPT_R_MIN6		= 13'h0cc8>>2;
parameter	SPA_SMAP_ADAPT_R_MIN7		= 13'h0ccc>>2;
parameter	SPA_SMAP_ADAPT_G_MAX0		= 13'h0cd0>>2;
parameter	SPA_SMAP_ADAPT_G_MAX1		= 13'h0cd4>>2;
parameter	SPA_SMAP_ADAPT_G_MAX2		= 13'h0cd8>>2;
parameter	SPA_SMAP_ADAPT_G_MAX3		= 13'h0cdc>>2;
parameter	SPA_SMAP_ADAPT_G_MAX4		= 13'h0ce0>>2;
parameter	SPA_SMAP_ADAPT_G_MAX5		= 13'h0ce4>>2;
parameter	SPA_SMAP_ADAPT_G_MAX6		= 13'h0ce8>>2;
parameter	SPA_SMAP_ADAPT_G_MAX7		= 13'h0cec>>2;
parameter	SPA_SMAP_ADAPT_G_MIN0		= 13'h0cf0>>2;
parameter	SPA_SMAP_ADAPT_G_MIN1		= 13'h0cf4>>2;
parameter	SPA_SMAP_ADAPT_G_MIN2		= 13'h0cf8>>2;
parameter	SPA_SMAP_ADAPT_G_MIN3		= 13'h0cfc>>2;
parameter	SPA_SMAP_ADAPT_G_MIN4		= 13'h0d00>>2;
parameter	SPA_SMAP_ADAPT_G_MIN5		= 13'h0d04>>2;
parameter	SPA_SMAP_ADAPT_G_MIN6		= 13'h0d08>>2;
parameter	SPA_SMAP_ADAPT_G_MIN7		= 13'h0d0c>>2;
parameter	SPA_SMAP_ADAPT_B_MAX0		= 13'h0d10>>2;
parameter	SPA_SMAP_ADAPT_B_MAX1		= 13'h0d14>>2;
parameter	SPA_SMAP_ADAPT_B_MAX2		= 13'h0d18>>2;
parameter	SPA_SMAP_ADAPT_B_MAX3		= 13'h0d1c>>2;
parameter	SPA_SMAP_ADAPT_B_MAX4		= 13'h0d20>>2;
parameter	SPA_SMAP_ADAPT_B_MAX5		= 13'h0d24>>2;
parameter	SPA_SMAP_ADAPT_B_MAX6		= 13'h0d28>>2;
parameter	SPA_SMAP_ADAPT_B_MAX7		= 13'h0d2c>>2;
parameter	SPA_SMAP_ADAPT_B_MIN0		= 13'h0d30>>2;
parameter	SPA_SMAP_ADAPT_B_MIN1		= 13'h0d34>>2;
parameter	SPA_SMAP_ADAPT_B_MIN2		= 13'h0d38>>2;
parameter	SPA_SMAP_ADAPT_B_MIN3		= 13'h0d3c>>2;
parameter	SPA_SMAP_ADAPT_B_MIN4		= 13'h0d40>>2;
parameter	SPA_SMAP_ADAPT_B_MIN5		= 13'h0d44>>2;
parameter	SPA_SMAP_ADAPT_B_MIN6		= 13'h0d48>>2;
parameter	SPA_SMAP_ADAPT_B_MIN7		= 13'h0d4c>>2;
parameter	SPA_TBL_ADDR_00_UP		= 13'h108c>>2;
parameter	SPA_TBL_ADDR_01_UP		= 13'h1090>>2;
parameter	SPA_TBL_ADDR_02_UP		= 13'h1094>>2;
parameter	SPA_TBL_ADDR_03_UP		= 13'h1098>>2;
parameter	SPA_TBL_ADDR_04_UP		= 13'h109c>>2;
parameter	SPA_TBL_ADDR_05_UP		= 13'h10a0>>2;
parameter	SPA_TBL_ADDR_06_UP		= 13'h10a4>>2;
parameter	SPA_TBL_ADDR_07_UP		= 13'h10a8>>2;
parameter	SPA_TBL_ADDR_08_UP		= 13'h10ac>>2;
parameter	SPA_TBL_ADDR_09_UP		= 13'h10b0>>2;
parameter	SPA_TBL_ADDR_10_UP		= 13'h10b4>>2;
parameter	SPA_TBL_ADDR_11_UP		= 13'h10b8>>2;
parameter	SPA_TBL_ADDR_12_UP		= 13'h10bc>>2;
parameter	SPA_TBL_ADDR_13_UP		= 13'h10c0>>2;
parameter	SPA_TBL_ADDR_14_UP		= 13'h10c4>>2;
parameter	SPA_TBL_ADDR_15_UP		= 13'h10c8>>2;
parameter	SPA_TBL_ADDR_16_UP		= 13'h10cc>>2;
parameter	SPA_TBL_ADDR_17_UP		= 13'h10d0>>2;
parameter	SPA_TBL_ADDR_18_UP		= 13'h10d4>>2;
parameter	SPA_TBL_ADDR_19_UP		= 13'h10d8>>2;
parameter	SPA_TBL_ADDR_20_UP		= 13'h10dc>>2;
parameter	SPA_TBL_ADDR_21_UP		= 13'h10e0>>2;
parameter	SPA_TBL_ADDR_22_UP		= 13'h10e4>>2;
parameter	SPA_TBL_ADDR_23_UP		= 13'h10e8>>2;
parameter	SPA_TBL_ADDR_24_UP		= 13'h10ec>>2;
parameter	SPA_RX_CH0_PREV_ADDR_UP		= 13'h114c>>2;
parameter	SPA_RX_CH1_PREV_ADDR_UP		= 13'h1150>>2;
parameter	SPA_RX_CH2_PREV_ADDR_UP		= 13'h1154>>2;
parameter	SPA_RX_CH0_CURR_ADDR_UP		= 13'h1158>>2;
parameter	SPA_RX_CH1_CURR_ADDR_UP		= 13'h115c>>2;
parameter	SPA_RX_CH2_CURR_ADDR_UP		= 13'h1160>>2;
parameter	SPA_RX_CH0_START_ADDR_UP		= 13'h1164>>2;
parameter	SPA_RX_CH1_START_ADDR_UP		= 13'h1168>>2;
parameter	SPA_RX_CH2_START_ADDR_UP		= 13'h116c>>2;
parameter	SPA_RX_CUR_ADDR_CH0_UP		= 13'h1178>>2;
parameter	SPA_RX_CUR_ADDR_CH1_UP		= 13'h117c>>2;
parameter	SPA_RX_CUR_ADDR_CH2_UP		= 13'h1180>>2;
parameter	SPA_TX_CH0_START_ADDR_UP		= 13'h11d4>>2;
parameter	SPA_TX_CH1_START_ADDR_UP		= 13'h11d8>>2;
parameter	SPA_TX_CH2_START_ADDR_UP		= 13'h11dc>>2;
parameter	SPA_TX_ADDR_CH0_MAX_UP		= 13'h11f0>>2;
parameter	SPA_TX_ADDR_CH0_MIN_UP		= 13'h11f4>>2;
parameter	SPA_TX_ADDR_CH1_MAX_UP		= 13'h11f8>>2;
parameter	SPA_TX_ADDR_CH1_MIN_UP		= 13'h11fc>>2;
parameter	SPA_TX_ADDR_CH2_MAX_UP		= 13'h1200>>2;
parameter	SPA_TX_ADDR_CH2_MIN_UP		= 13'h1204>>2;
parameter	SPA_TX_CH0_CUR_ADDR_UP		= 13'h1218>>2;
parameter	SPA_TX_CH1_CUR_ADDR_UP		= 13'h121c>>2;
parameter	SPA_TX_CH2_CUR_ADDR_UP		= 13'h1220>>2;
parameter	SPA_ADAPT_DMA_ADDR_UP		= 13'h1284>>2;
parameter	SPA_ADAPT_TX_ADDR_MAX_UP		= 13'h1290>>2;
parameter	SPA_ADAPT_TX_ADDR_MIN_UP		= 13'h1294>>2;
parameter	SPA_ADAPT_TX_CUR_ADDR_UP		= 13'h1298>>2;
parameter	SPA_SMAP_DMA_ADDR_UP		= 13'h12c4>>2;
parameter	SPA_SMAP_TX_ADDR_MAX_UP		= 13'h12d0>>2;
parameter	SPA_SMAP_TX_ADDR_MIN_UP		= 13'h12d4>>2;
parameter	SPA_SMAP_TX_CUR_ADDR_UP		= 13'h12d8>>2;
parameter	SPA_BDS_DMA_ADDR_UP		= 13'h1304>>2;
parameter	SPA_BDS_TX_ADDR_MAX_UP		= 13'h1310>>2;
parameter	SPA_BDS_TX_ADDR_MIN_UP		= 13'h1314>>2;
parameter	SPA_BDS_TX_CUR_ADDR_UP		= 13'h1318>>2;
parameter	SPA_ADAPT_DMA_BUF_WR_CNT		= 13'h1320>>2;
parameter	SPA_ADAPT_DMA_BUF_RD_CNT		= 13'h1324>>2;
parameter	SPA_ADAPT_DMA_OUT0_CNT		= 13'h1328>>2;
parameter	SPA_SMAP_DMA_BUF_WR_CNT		= 13'h132c>>2;
parameter	SPA_SMAP_DMA_BUF_RD_CNT		= 13'h1330>>2;
parameter	SPA_SMAP_DMA_OUT0_CNT		= 13'h1334>>2;
parameter	SPA_BDS_DMA_BUF_WR_CNT		= 13'h1338>>2;
parameter	SPA_BDS_DMA_BUF_RD_CNT		= 13'h133c>>2;
parameter	SPA_BDS_DMA_OUT0_CNT		= 13'h1340>>2;
parameter	SPA_ADAPT_WDATA_CNT		= 13'h1344>>2;
parameter	SPA_SMAP_WDATA_CNT		= 13'h1348>>2;
parameter	SPA_BDS_WDATA_CNT		= 13'h134c>>2;


// APB Interface
input  			i_PCLK;
input  			i_PRESETn;
input  [10:0]	i_PADDR;
input  			i_PSEL;
input  			i_PENABLE;
input  			i_PWRITE;
input  [31:0]	i_PWDATA;
output [31:0]	o_PRDATA;

// SPA_SW_RESET_REG
output 			o_DMA_RESET;
output 			o_GLOBAL_RESET;

// SPA_CORE_START_REG
output 			o_CORE_START;
output 			o_CORE_BUSY;

// SPA_MODE_REG
output [1:0]	o_RX_COLOR_MODE;
output [1:0]	o_TX_COLOR_MODE;
output [2:0]	o_RX_DPI_MODE;

// SPA_MODULE_EN_REG
output 			o_VSD_EN;
output 			o_CIS_EN;
output 			o_RC1_EN;
output 			o_S1D_EN;
output 			o_SEG1_EN;
output 			o_SCC_EN;
output 			o_SEG2_EN;
output 			o_ABSD_EN;
output 			o_NEWABSD_EN;
output 			o_MAGD_EN;
output 			o_ACS_EN;
output 			o_BLANK_EN;
output 			o_ACBD_EN;
output 			o_ORIENT_EN;
output 			o_CLA_EN;
output 			o_BDS_EN;
output 			o_ADAPT_EN;
output 			o_SMAP_EN;
output 			o_TX_CH_EN;

// SPA_RX_XD_REG
output [15:0]	o_RX_XD;

// SPA_RX_YD_REG
output [15:0]	o_RX_YD;

// SPA_TX_IMG_SIZE_REG
output [15:0]	o_TX_XD;
output [15:0]	o_TX_YD;

// SPA_RX_PADDING_VAL_REG
output [7:0]	o_CH0_PADDING_VAL;
output [7:0]	o_CH1_PADDING_VAL;
output [7:0]	o_CH2_PADDING_VAL;

// SPA_VERSION_REG
output [31:0]	o_VERSION;

// SPA_IRQ_ENABLE_REG
output 			o_RX_BAND_START_EN;
output 			o_RX_BAND_END_EN;
output 			o_TX_BAND_START_EN;
output 			o_BAND_END_EN;
output 			o_PAGE_END_EN;
output 			o_ABS_DETECT_DONE_EN;
output 			o_ADAPT_TX_END_EN;
output 			o_SMAP_TX_END_EN;
output 			o_SW_RESET_DONE;
output 			o_TX_ERR;
output 			o_DTX_ADAPT_START_EN;
output 			o_DTX_SMAP_START_EN;
output 			o_DMA_TX_ADDR_ERR_CH0;
output 			o_DMA_TX_ADDR_ERR_CH1;
output 			o_DMA_TX_ADDR_ERR_CH2;
output 			o_MAGD_DONE;
output 			o_CLA_DONE;
output 			o_ADAPT_TX_ADDR_ERR_EN;
output 			o_SMAP_TX_ADDR_ERR_EN;
output 			o_TBL_DMA_END;
output 			o_TX_YD_ERR;
output 			o_RX_ERR;
output 			o_BDS_TX_END_EN;
output 			o_DTX_BDS_START_EN;
output 			o_BDS_TX_ADDR_ERR_EN;
output 			o_ORI_DONE;
output 			o_nABSD_DETECT_DONE;
output 			o_ACBD_DETECT_DONE;
output 			o_ACS_DONE;
output 			o_VSD_DONE;
output 			o_TX_CH_START_ERR_EN;
output 			o_TX_PAGE_END;

// SPA_IRQ_PEND_REG
output 			o_RX_BAND_START;
output 			o_RX_BAND_END;
output 			o_TX_BAND_START;
output 			o_BAND_END;
output 			o_PAGE_END;
output 			o_ABSD_DETECT_END;
output 			o_ADAPT_TX_END;
output 			o_SMAP_TX_END;
output 			o_DMA_STOP_DONE;
output 			o_TX_ERR;
output 			o_DTX_ADAPT_START_ERR;
output 			o_DTX_SMAP_START_ERR;
output 			o_DMA_TX_ADDR_ERR_CH0;
output 			o_DMA_TX_ADDR_ERR_CH1;
output 			o_DMA_TX_ADDR_ERR_CH2;
output 			o_MAGD_DONE;
output 			o_CLA_DONE;
output 			o_ADAPT_TX_ADDR_ERR;
output 			o_SMAP_TX_ADDR_ERR;
output 			o_TBL_DMA_END;
output 			o_TX_YD_ERR;
output 			o_RX_ERR;
output 			o_BDS_TX_END;
output 			o_DTX_BDS_START_ERR;
output 			o_BDS_TX_ADDR_ERR;
output 			o_ORI_DONE;
output 			o_nABSD_DETECT_DONE;
output 			o_ACBD_DETECT_DONE;
output 			o_ACS_DONE;
output 			o_VSD_DONE;
output 			o_TX_CH_START_ERR;
output 			o_TX_PAGE_END;

// SPA_IRQ_SVC_CNT_REG
output [31:0]	o_IRQ_SVC_CNT;

// SPA_RAM_SW_MODE_REG
output 			o_RAM_SW_MODE;

// SPA_RAM_CS_REG
output 			o_RAM_CS_00;
output 			o_RAM_CS_01;
output 			o_RAM_CS_02;
output 			o_RAM_CS_03;
output 			o_RAM_CS_04;
output 			o_RAM_CS_05;
output 			o_RAM_CS_06;
output 			o_RAM_CS_07;
output 			o_RAM_CS_08;
output 			o_RAM_CS_09;
output 			o_RAM_CS_10;
output 			o_RAM_CS_11;
output 			o_RAM_CS_12;
output 			o_RAM_CS_13;
output 			o_RAM_CS_14;
output 			o_RAM_CS_15;
output 			o_RAM_CS_16;
output 			o_RAM_CS_17;
output 			o_RAM_CS_18;
output 			o_RAM_CS_19;
output 			o_RAM_CS_20;
output 			o_RAM_CS_21;
output 			o_RAM_CS_22;
output 			o_RAM_CS_23;
output 			o_RAM_CS_24;

// SPA_RAM_DATA_REG
output [31:0]	o_RAM_DATA;

// SPA_RAM_ADDR_REG
output [31:0]	o_RAM_ADDR;

// SPA_CORE_BAND_DONE_REG
output 			o_ALL_BAND_DONE;
output 			o_SEG2_BAND_DONE;
output 			o_SCC_BAND_DONE;
output 			o_SEG1_BAND_DONE;
output 			o_BSSB_BAND_DONE;
output 			o_S1D_BAND_DONE;
output 			o_RC1_BAND_DONE;
output 			o_CIS_BAND_DONE;
output 			o_VSD_BAND_DONE;

// SPA_CORE_PAGE_DONE_REG
output 			o_ALL_PAGE_DONE;
output 			o_SEG2_PAGE_DONE;
output 			o_SCC_PAGE_DONE;
output 			o_SEG1_PAGE_DONE;
output 			o_BSSB_PAGE_DONE;
output 			o_S1D_PAGE_END;
output 			o_RC1_PAGE_DONE;
output 			o_CIS_PAGE_DONE;
output 			o_VSD_PAGE_DONE;

// SPA_TBL_RX_CNT_REG
output [15:0]	o_TBL_RX_END_CNT;
output [15:0]	o_TBL_RX_START_CNT;

// SPA_TBL_TX_CNT_REG
output [15:0]	o_TBL_TX_END_CNT;
output [15:0]	o_TBL_TX_START_CNT;

// SPA_TBL_END_STATUS1_REG
output [29:0]	o_TBL_END_STATUS1;

// SPA_TBL_START_REG
output 			o_TBL_START;
output 			o_TBL_RW;

// SPA_TBL_ENABLE_REG
output 			o_TBL_ENABLE00;
output 			o_TBL_ENABLE01;
output 			o_TBL_ENABLE02;
output 			o_TBL_ENABLE03;
output 			o_TBL_ENABLE04;
output 			o_TBL_ENABLE05;
output 			o_TBL_ENABLE06;
output 			o_TBL_ENABLE07;
output 			o_TBL_ENABLE08;
output 			o_TBL_ENABLE09;
output 			o_TBL_ENABLE10;
output 			o_TBL_ENABLE11;
output 			o_TBL_ENABLE12;
output 			o_TBL_ENABLE13;
output 			o_TBL_ENABLE14;
output 			o_TBL_ENABLE15;
output 			o_TBL_ENABLE16;
output 			o_TBL_ENABLE17;
output 			o_TBL_ENABLE18;
output 			o_TBL_ENABLE19;
output 			o_TBL_ENABLE20;
output 			o_TBL_ENABLE21;
output 			o_TBL_ENABLE22;
output 			o_TBL_ENABLE23;
output 			o_TBL_ENABLE24;

// SPA_TBL_ADDR_00_REG
output [31:0]	o_TBL_ADDR_00;

// SPA_TBL_ADDR_01_REG
output [31:0]	o_TBL_ADDR_01;

// SPA_TBL_ADDR_02_REG
output [31:0]	o_TBL_ADDR_02;

// SPA_TBL_ADDR_03_REG
output [31:0]	o_TBL_ADDR_03;

// SPA_TBL_ADDR_04_REG
output [31:0]	o_TBL_ADDR_04;

// SPA_TBL_ADDR_05_REG
output [31:0]	o_TBL_ADDR_05;

// SPA_TBL_ADDR_06_REG
output [31:0]	o_TBL_ADDR_06;

// SPA_TBL_ADDR_07_REG
output [31:0]	o_TBL_ADDR_07;

// SPA_TBL_ADDR_08_REG
output [31:0]	o_TBL_ADDR_08;

// SPA_TBL_ADDR_09_REG
output [31:0]	o_TBL_ADDR_09;

// SPA_TBL_ADDR_10_REG
output [31:0]	o_TBL_ADDR_10;

// SPA_TBL_ADDR_11_REG
output [31:0]	o_TBL_ADDR_11;

// SPA_TBL_ADDR_12_REG
output [31:0]	o_TBL_ADDR_12;

// SPA_TBL_ADDR_13_REG
output [31:0]	o_TBL_ADDR_13;

// SPA_TBL_ADDR_14_REG
output [31:0]	o_TBL_ADDR_14;

// SPA_TBL_ADDR_15_REG
output [31:0]	o_TBL_ADDR_15;

// SPA_TBL_ADDR_16_REG
output [31:0]	o_TBL_ADDR_16;

// SPA_TBL_ADDR_17_REG
output [31:0]	o_TBL_ADDR_17;

// SPA_TBL_ADDR_18_REG
output [31:0]	o_TBL_ADDR_18;

// SPA_TBL_ADDR_19_REG
output [31:0]	o_TBL_ADDR_19;

// SPA_TBL_ADDR_20_REG
output [31:0]	o_TBL_ADDR_20;

// SPA_TBL_ADDR_21_REG
output [31:0]	o_TBL_ADDR_21;

// SPA_TBL_ADDR_22_REG
output [31:0]	o_TBL_ADDR_22;

// SPA_TBL_ADDR_23_REG
output [31:0]	o_TBL_ADDR_23;

// SPA_TBL_ADDR_24_REG
output [31:0]	o_TBL_ADDR_24;

// SPA_RX_START_REG
output 			o_RX_START;

// SPA_RX_INCR_REG
output [31:0]	o_RX_INCR;

// SPA_RX_CH0_PREV_ADDR_REG
output [31:0]	o_RX_CH0_PREV_ADDR;

// SPA_RX_CH1_PREV_ADDR_REG
output [31:0]	o_RX_CH1_PREV_ADDR;

// SPA_RX_CH2_PREV_ADDR_REG
output [31:0]	o_RX_CH2_PREV_ADDR;

// SPA_RX_CH0_CURR_ADDR_REG
output [31:0]	o_RX_CH0_CURR_ADDR;

// SPA_RX_CH1_CURR_ADDR_REG
output [31:0]	o_RX_CH1_CURR_ADDR;

// SPA_RX_CH2_CURR_ADDR_REG
output [31:0]	o_RX_CH2_CURR_ADDR;

// SPA_RX_CH0_START_ADDR_REG
output [31:0]	o_RX_CH0_START_ADDR;

// SPA_RX_CH1_START_ADDR_REG
output [31:0]	o_RX_CH1_START_ADDR;

// SPA_RX_CH2_START_ADDR_REG
output [31:0]	o_RX_CH2_START_ADDR;

// SPA_RX_BLK_CNT_REG
output [7:0]	o_RX_BLK_CNT;
output [7:0]	o_RX_BAND_CNT;

// SPA_RX_STATUS_REG
output 			o_BUSY;

// SPA_RX_CH0_CUR_ADDR_REG
output [31:0]	o_RX_CH0_CUR_ADDR;

// SPA_RX_CH1_CUR_ADDR_REG
output [31:0]	o_RX_CH1_CUR_ADDR;

// SPA_RX_CH2_CUR_ADDR_REG
output [31:0]	o_RX_CH2_CUR_ADDR;

// SPA_RX_CH0_SVC_CNT_REG
output [31:0]	o_RX_CH0_SVC_CNT;

// SPA_RX_CH1_SVC_CNT_REG
output [31:0]	o_RX_CH1_SVC_CNT;

// SPA_RX_CH2_SVC_CNT_REG
output [31:0]	o_RX_CH2_SVC_CNT;

// SPA_RX_DMA_CON_REG
output [2:0]	o_RX_ISSUE_CAP;
output [3:0]	o_RX_ARCACHE;
output 			o_RX_ARPROT0;
output 			o_RX_ARPROT1;
output 			o_RX_ARPROT2;
output [1:0]	o_RX_SWAP_EN;

// SPA_RX_ERR_STATUS_REG
output 			o_RX_RID_ERR_0;
output 			o_RX_RID_ERR_1;
output 			o_RX_RID_ERR_2;
output 			o_RX_RID_ERR_3;
output 			o_RX_RRESP_ERR_0;
output 			o_RX_RRESP_ERR_1;

// SPA_TX_START_REG
output 			o_TX_START;

// SPA_TX_DMA_CON_REG
output [4:0]	o_MAX_WISSUE;
output 			o_TX_INT_CHECK;
output 			o_ALPHA_CH_ON;
output 			o_ARB_MODE;
output [3:0]	o_TX_AWCACHE;
output 			o_TX_AWPROT0;
output 			o_TX_AWPROT1;
output 			o_TX_AWPROT2;
output [1:0]	o_TX_SWAP_EN;

// SPA_TX_BAND_NUM_REG
output [7:0]	o_TX_BAND_NUM;

// SPA_TX_DATA_INCR_REG
output [15:0]	o_TX_DATA_INCR;

// SPA_TX_CH0_START_ADDR_REG
output [31:0]	o_TX_CH0_START_ADDR;

// SPA_TX_CH1_START_ADDR_REG
output [31:0]	o_TX_CH1_START_ADDR;

// SPA_TX_CH2_START_ADDR_REG
output [31:0]	o_TX_CH2_START_ADDR;

// SPA_TX_BLK_CNT_REG
output [7:0]	o_TX_BLK_CNT;
output [7:0]	o_TX_BAND_CNT;

// SPA_TX_STATUS_REG
output 			o_BUSY;

// SPA_TX_ADDR_CH0_MAX_REG
output [31:0]	o_TX_ADDR_CH0_MAX;

// SPA_TX_ADDR_CH0_MIN_REG
output [31:0]	o_TX_ADDR_CH0_MIN;

// SPA_TX_ADDR_CH1_MAX_REG
output [31:0]	o_TX_ADDR_CH1_MAX;

// SPA_TX_ADDR_CH1_MIN_REG
output [31:0]	o_TX_ADDR_CH1_MIN;

// SPA_TX_ADDR_CH2_MAX_REG
output [31:0]	o_TX_ADDR_CH2_MAX;

// SPA_TX_ADDR_CH2_MIN_REG
output [31:0]	o_TX_ADDR_CH2_MIN;

// SPA_TX_CH0_CUR_ADDR_REG
output [31:0]	o_TX_CH0_CUR_ADDR;

// SPA_TX_CH1_CUR_ADDR_REG
output [31:0]	o_TX_CH1_CUR_ADDR;

// SPA_TX_CH2_CUR_ADDR_REG
output [31:0]	o_TX_CH2_CUR_ADDR;

// SPA_TX_CH0_SVC_CNT_REG
output [31:0]	o_TX_CH0_SVC_CNT;

// SPA_TX_CH1_SVC_CNT_REG
output [31:0]	o_TX_CH1_SVC_CNT;

// SPA_TX_CH2_SVC_CNT_REG
output [31:0]	o_TX_CH2_SVC_CNT;

// SPA_TX_ERR_STATUS_REG
output 			o_TX_ERR_ID_0;
output 			o_TX_ERR_ID_1;
output 			o_TX_ERR_ID_2;
output 			o_TX_ERR_ID_3;
output 			o_TX_ERR_RESP_0;
output 			o_TX_ERR_RESP_1;

// SPA_ADAPT_DMA_CON_REG
output [1:0]	o_ADAPT_SMAP_INT_CHECK;
output [7:0]	o_ADAPT_OUT_BANDS;

// SPA_ADAPT_DMA_ADDR_REG
output [31:0]	o_ADAPT_ADDR;

// SPA_ADAPT_DMA_ADDR_INCR_REG
output [31:0]	o_ADAPT_ADDR_INCR;

// SPA_ADAPT_DMA_STATUS_REG
output 			o_ADAPT_TX_BUSY;
output [15:0]	o_ADAPT_OUT_LINES;

// SPA_ADAPT_TX_ADDR_MAX_REG
output [31:0]	o_ADAPT_TX_ADDR_MAX;

// SPA_ADAPT_TX_ADDR_MIN_REG
output [31:0]	o_ADAPT_TX_ADDR_MIN;

// SPA_ADAPT_TX_CUR_ADDR_REG
output [31:0]	o_ADAPT_TX_CUR_ADDR;

// SPA_ADAPT_TX_SVC_CNT_REG
output [31:0]	o_ADAPT_TX_SVC_CNT;

// SPA_ADAPT_START_REG
output 			o_ADAPT_START;

// SPA_ADAPT_BAND_CNT_REG
output [7:0]	o_ADAPT_BAND_CNT;

// SPA_SMAP_DMA_CON_REG
output [7:0]	o_SMAP_OUT_BANDS;

// SPA_SMAP_DMA_ADDR_REG
output [31:0]	o_SMAP_ADDR;

// SPA_SMAP_DMA_ADDR_INCR_REG
output [31:0]	o_SMAP_ADDR_INCR;

// SPA_SMAP_DMA_STATUS_REG
output 			o_SMAP_TX_BUSY;
output [15:0]	o_SMAP_OUT_LINES;

// SPA_SMAP_TX_ADDR_MAX_REG
output [31:0]	o_SMAP_TX_ADDR_MAX;

// SPA_SMAP_TX_ADDR_MIN_REG
output [31:0]	o_SMAP_TX_ADDR_MIN;

// SPA_SMAP_TX_CUR_ADDR_REG
output [31:0]	o_SMAP_TX_CUR_ADDR;

// SPA_SMAP_TX_SVC_CNT_REG
output [31:0]	o_SMAP_TX_SVC_CNT;

// SPA_SMAP_START_REG
output 			o_SMAP_START;

// SPA_SMAP_BAND_CNT_REG
output [7:0]	o_SMAP_BAND_CNT;

// SPA_BDS_DMA_CON_REG
output [7:0]	o_BDS_OUT_BANDS;

// SPA_BDS_DMA_ADDR_REG
output [31:0]	o_BDS_ADDR;

// SPA_BDS_DMA_ADDR_INCR_REG
output [31:0]	o_BDS_ADDR_INCR;

// SPA_BDS_DMA_STATUS_REG
output 			o_BDS_TX_BUSY;
output [15:0]	o_BDS_OUT_LINES;

// SPA_BDS_TX_ADDR_MAX_REG
output [31:0]	o_BDS_TX_ADDR_MAX;

// SPA_BDS_TX_ADDR_MIN_REG
output [31:0]	o_BDS_TX_ADDR_MIN;

// SPA_BDS_TX_CUR_ADDR_REG
output [31:0]	o_BDS_TX_CUR_ADDR;

// SPA_BDS_TX_SVC_CNT_REG
output [31:0]	o_BDS_TX_SVC_CNT;

// SPA_BDS_START_REG
output 			o_BDS_START;

// SPA_BDS_BAND_CNT_REG
output [7:0]	o_BDS_BAND_CNT;

// SPA_RX_CH0_CRC_REG
output [31:0]	o_RX_CH0_CRC;

// SPA_RX_CH1_CRC_REG
output [31:0]	o_RX_CH1_CRC;

// SPA_RX_CH2_CRC_REG
output [31:0]	o_RX_CH2_CRC;

// SPA_RC1_CH0_CRC_REG
output [31:0]	o_RC1_CH0_CRC;

// SPA_RC1_CH1_CRC_REG
output [31:0]	o_RC1_CH1_CRC;

// SPA_RC1_CH2_CRC_REG
output [31:0]	o_RC1_CH2_CRC;

// SPA_RC1_CH0_CRC_DEBUG_REG
output [31:0]	o_RC1_CH0_CRC_DEBUG;

// SPA_RC1_CH1_CRC_DEBUG_REG
output [31:0]	o_RC1_CH1_CRC_DEBUG;

// SPA_RC1_CH2_CRC_DEBUG_REG
output [31:0]	o_RC1_CH2_CRC_DEBUG;

// SPA_S1D_CH0_CRC_REG
output [31:0]	o_S1D_CH0_CRC;

// SPA_S1D_CH1_CRC_REG
output [31:0]	o_S1D_CH1_CRC;

// SPA_S1D_CH2_CRC_REG
output [31:0]	o_S1D_CH2_CRC;

// SPA_SEG1_CH0_CRC_REG
output [31:0]	o_SEG1_CH0_CRC;

// SPA_SEG1_CH1_CRC_REG
output [31:0]	o_SEG1_CH1_CRC;

// SPA_SEG1_CH2_CRC_REG
output [31:0]	o_SEG1_CH2_CRC;

// SPA_SEG1_ATT_CRC_REG
output [31:0]	o_SEG1_ATT_CRC;

// SPA_SCC_CH0_CRC_REG
output [31:0]	o_SCC_CH0_CRC;

// SPA_SCC_CH1_CRC_REG
output [31:0]	o_SCC_CH1_CRC;

// SPA_SCC_CH2_CRC_REG
output [31:0]	o_SCC_CH2_CRC;

// SPA_SCC_ATT_CRC_REG
output [31:0]	o_SCC_ATT_CRC;

// SPA_SEG2_CH0_CRC_REG
output [31:0]	o_SEG2_CH0_CRC;

// SPA_SEG2_CH1_CRC_REG
output [31:0]	o_SEG2_CH1_CRC;

// SPA_SEG2_CH2_CRC_REG
output [31:0]	o_SEG2_CH2_CRC;

// SPA_SEG2_ATT_CRC_REG
output [31:0]	o_SEG2_ATT_CRC;

// SPA_BSSA_CH0_CRC_REG
output [31:0]	o_BSSA_CH0_CRC;

// SPA_BSSA_CH1_CRC_REG
output [31:0]	o_BSSA_CH1_CRC;

// SPA_BSSA_CH2_CRC_REG
output [31:0]	o_BSSA_CH2_CRC;

// SPA_DMATX_CH0_CRC_REG
output [31:0]	o_DMATX_CH0_CRC;

// SPA_DMATX_CH1_CRC_REG
output [31:0]	o_DMATX_CH1_CRC;

// SPA_DMATX_CH2_CRC_REG
output [31:0]	o_DMATX_CH2_CRC;

// SPA_RC2_CH0_CRC_REG
output [31:0]	o_RC2_CH0_CRC;

// SPA_RC2_CH1_CRC_REG
output [31:0]	o_RC2_CH1_CRC;

// SPA_RC2_CH2_CRC_REG
output [31:0]	o_RC2_CH2_CRC;

// SPA_ADAPT_CRC_REG
output [31:0]	o_ADAPT_CRC;

// SPA_SMAP_CRC_REG
output [31:0]	o_SMAP_CRC;

// SPA_BDS_CRC_REG
output [31:0]	o_BDS_CRC;

// SPA_VSD_CH0_CRC_REG
output [31:0]	o_VSD_CH0_CRC;

// SPA_VSD_CH1_CRC_REG
output [31:0]	o_VSD_CH1_CRC;

// SPA_VSD_CH2_CRC_REG
output [31:0]	o_VSD_CH2_CRC;

// SPA_CIS_CH0_CRC_REG
output [31:0]	o_CIS_CH0_CRC;

// SPA_CIS_CH1_CRC_REG
output [31:0]	o_CIS_CH1_CRC;

// SPA_CIS_CH2_CRC_REG
output [31:0]	o_CIS_CH2_CRC;

// SPA_BSSB_CH0_CRC_REG
output [31:0]	o_BSSB_CH0_CRC;

// SPA_BSSB_CH1_CRC_REG
output [31:0]	o_BSSB_CH1_CRC;

// SPA_BSSB_CH2_CRC_REG
output [31:0]	o_BSSB_CH2_CRC;

// SPA_S1D_DEBUG_FLAG_REG
output [7:0]	o_DEBUG_FLAG;

// SPA_SCC_DEBUG_FLAG_REG
output [7:0]	o_DEBUG_FLAG;

// SPA_BDS_DEBUG_FLAG_REG
output [7:0]	o_DEBUG_FLAG;

// SPA_BSSA_DEBUG_FLAG_REG
output [7:0]	o_BSSA_DEBUG_FLAG;

// SPA_BSSB_DEBUG_FLAG_REG
output [7:0]	o_BSSB_DEBUG_FLAG;

// SPA_VSD_A_REG
output [1:0]	o_VSC_DEBUG;
output 			o_VSC_CUR_MEM_INIT;

// SPA_VSD_B_REG
output [7:0]	o_VSD_K_DEPTH_MIN;
output [3:0]	o_VSD_TOP_BAND;

// SPA_VSD_C_REG
output [7:0]	o_VSD_K_DEPTH_MAX_TOP;
output [7:0]	o_VSD_K_DEPTH_MIN_TOP;
output [7:0]	o_VSD_K_DEPTH_MAX;
output [7:0]	o_VSD_K_DEPTH_MID;

// SPA_VSC_D_REG
output [7:0]	o_VSD_W_DEPTH_MAX;
output [7:0]	o_VSD_W_DEPTH_MID;
output [7:0]	o_VSD_W_DEPTH_MIN;
output [6:0]	o_VSD_K_DEPTH_COND;

// SPA_VSD_E_REG
output [7:0]	o_VSD_THICKNESS_TH;
output [7:0]	o_VSD_W_DEPTH_COND;
output [7:0]	o_VSD_W_DEPTH_MAX_TOP;
output [7:0]	o_VSD_W_DEPTH_MIN_TOP;

// SPA_VSD_F_REG
output [6:0]	o_VSD_CHROMA_TH2_TOP;
output [6:0]	o_VSD_CHROMA_TH1_TOP;
output [6:0]	o_VSD_CHROMA_TH2;
output [6:0]	o_VSD_CHROMA_TH1;

// SPA_VSD_G_REG
output [7:0]	o_VSD_FREQUENCY_TH;
output [7:0]	o_VSD_CONTINUITY_TH;

// SPA_VSD_H_REG
output [12:0]	o_VSD_REFINE_TH;
output 			o_VSD_REFINE_EN;

// SPA_CIS_SUB_COEF_R_REG
output [8:0]	o_CIS_SUB_COEF_R1;
output [8:0]	o_CIS_SUB_COEF_R2;

// SPA_CIS_SUB_COEF_G_REG
output [8:0]	o_CIS_SUB_COEF_G0;
output [8:0]	o_CIS_SUB_COEF_G1;
output [8:0]	o_CIS_SUB_COEF_G2;

// SPA_CIS_SUB_COEF_B_REG
output [8:0]	o_CIS_SUB_COEF_B0;
output [8:0]	o_CIS_SUB_COEF_B1;

// SPA_RC1_SHIFT_VAL_REG
output [31:0]	o_RC1_SHIFT_VAL;

// SPA_RC1_SHIFT_OFST_REG
output [31:0]	o_RC1_SHIFT_OFST;

// SPA_RC1_LOOP_REG
output [2:0]	o_RC1_LOOP_Y;
output [2:0]	o_RC1_LOOP_X;

// SPA_RC1_X_COF_00_01_REG
output [11:0]	o_RC1_X_COF_01;
output [11:0]	o_RC1_X_COF_00;

// SPA_RC1_X_COF_02_03_REG
output [11:0]	o_RC1_X_COF_03;
output [11:0]	o_RC1_X_COF_02;

// SPA_RC1_X_COF_10_11_REG
output [11:0]	o_RC1_X_COF_11;
output [11:0]	o_RC1_X_COF_10;

// SPA_RC1_X_COF_12_13_REG
output [11:0]	o_RC1_X_COF_13;
output [11:0]	o_RC1_X_COF_12;

// SPA_RC1_X_COF_20_21_REG
output [11:0]	o_RC1_X_COF_21;
output [11:0]	o_RC1_X_COF_20;

// SPA_RC1_X_COF_22_23_REG
output [11:0]	o_RC1_X_COF_23;
output [11:0]	o_RC1_X_COF_22;

// SPA_RC1_X_COF_30_31_REG
output [11:0]	o_RC1_X_COF_31;
output [11:0]	o_RC1_X_COF_30;

// SPA_RC1_X_COF_32_33_REG
output [11:0]	o_RC1_X_COF_33;
output [11:0]	o_RC1_X_COF_32;

// SPA_RC1_Y_COF_00_01_REG
output [11:0]	o_RC1_Y_COF_01;
output [11:0]	o_RC1_Y_COF_00;

// SPA_RC1_Y_COF_02_03_REG
output [11:0]	o_RC1_Y_COF_03;
output [11:0]	o_RC1_Y_COF_02;

// SPA_RC1_Y_COF_10_11_REG
output [11:0]	o_RC1_Y_COF_11;
output [11:0]	o_RC1_Y_COF_10;

// SPA_RC1_Y_COF_12_13_REG
output [11:0]	o_RC1_Y_COF_13;
output [11:0]	o_RC1_Y_COF_12;

// SPA_RC1_Y_COF_20_21_REG
output [11:0]	o_RC1_Y_COF_21;
output [11:0]	o_RC1_Y_COF_20;

// SPA_RC1_Y_COF_22_23_REG
output [11:0]	o_RC1_Y_COF_23;
output [11:0]	o_RC1_Y_COF_22;

// SPA_RC1_Y_COF_30_31_REG
output [11:0]	o_RC1_Y_COF_31;
output [11:0]	o_RC1_Y_COF_30;

// SPA_RC1_Y_COF_32_33_REG
output [11:0]	o_RC1_Y_COF_33;
output [11:0]	o_RC1_Y_COF_32;

// SPA_SEG1_CON_REG
output 			o_Enable_Y_text;

// SPA_SEG1_HVLINE_TH_REG
output [7:0]	o_HVline_level_th;
output [7:0]	o_HVline_minmaxdiff_th2;
output [7:0]	o_HVline_minmaxdiff_th1;
output [7:0]	o_HVline_diff_th;

// SPA_SEG1_EDGE_TH_REG
output [7:0]	o_Highfreq_th;
output [7:0]	o_Lowfreq_th2;
output [7:0]	o_Lowfreq_th;

// SPA_SEG1_LINE_TH_REG
output [7:0]	o_Uni_edge_th;
output [7:0]	o_Uni_edge_th2;
output [7:0]	o_Uni_lowfreq_th;
output [7:0]	o_Uni_highfreq_th;

// SPA_SEG1_ZC_TH_REG
output [2:0]	o_ZC_scaling_shift;
output [7:0]	o_ZC_edge_th;
output [7:0]	o_White_th;

// SPA_SCC_CON_REG
output 			o_SCC_LATTICE_STEP;
output [1:0]	o_SCC_FLOATING_MODE;

// SPA_SEG2_CON_REG
output 			o_Enable_FAR_9x9;
output 			o_Enable_uniformtext;
output 			o_Enable_contoneImage;

// SPA_SEG2_PARAM1_REG
output [6:0]	o_edgecount_th;
output [1:0]	o_text_index;
output [7:0]	o_FG_level_th;

// SPA_SEG2_PARAM2_REG
output [6:0]	o_zccount_th;
output [6:0]	o_uniformlinecount_th;
output [6:0]	o_halftonecount_th;
output [6:0]	o_bgcnt_th;

// SPA_SEG2_FAR_CHROMA_PARAM_REG
output [3:0]	o_FAR_chroma_th2_shiftcoef;
output [7:0]	o_FAR_chroma_th;

// SPA_SEG2_FAR_Y_PARAM_REG
output [3:0]	o_FAR_Y_th3_shiftcoef2;
output [3:0]	o_FAR_Y_th2_shiftcoef1;
output [7:0]	o_FAR_Y_th;

// SPA_SEG2_NEUT_CHROMA_PARAM_REG
output [3:0]	o_Neut_chroma_th2_shiftcoef;
output [7:0]	o_Neut_chroma_th;

// SPA_PAGE_EN_REG
output 			o_PAGE_EN;

// SPA_BLOCK_SIZE_REG
output [6:0]	o_BLOCK_SIZE_H;
output [5:0]	o_BLOCK_SIZE_W;

// SPA_AREA_SIZE_REG
output [13:0]	o_AREA_SIZE_H;
output [13:0]	o_AREA_SIZE_W;

// SPA_CHAR_LENGTH_THICK_V_REG
output [7:0]	o_CHAR_THICK_MAX_V;
output [7:0]	o_CHAR_THICK_MIN_V;
output [7:0]	o_CHAR_LENGTH_MIN_V;

// SPA_CHAR_LENGTH_THICK_H_REG
output [7:0]	o_CHAR_THICK_MAX_H;
output [7:0]	o_CHAR_THICK_MIN_H;
output [7:0]	o_CHAR_LENGTH_MIN_H;

// SPA_DIFF_CHANGE_V_REG
output [6:0]	o_CHANGE_CNT_TH_V;
output [6:0]	o_CHANGE_RATIO_TH_V;
output [3:0]	o_DIFF_SHIFT2_V;
output [3:0]	o_DIFF_SHIFT1_V;

// SPA_DIFF_CHANGE_H_REG
output [6:0]	o_CHANGE_CNT_TH_H;
output [6:0]	o_CHANGE_RATIO_TH_H;
output [3:0]	o_DIFF_SHIFT2_H;
output [3:0]	o_DIFF_SHIFT1_H;

// SPA_DIR_TH1_REG
output [7:0]	o_DIR_MAX_LOW_TH;
output [7:0]	o_DIR_TH;
output [7:0]	o_DIR_MAX_TH;
output [7:0]	o_DIR_MIN_TH;

// SPA_DIR_TH2_REG
output [7:0]	o_DIR_DIFF_TH3;
output [7:0]	o_DIR_DIFF_TH2;
output [7:0]	o_DIR_DIFF_TH1;
output [7:0]	o_DIR_MAX_HIGH_TH;

// SPA_OUT_AREA_OFFSET1_REG
output [10:0]	o_OUT_AREA_OFFSET_W;
output [10:0]	o_OUT_AREA_OFFSET_H;

// SPA_OUT_AREA_OFFSET2_REG
output [10:0]	o_OUT_AREA_OFFSET;

// SPA_LINE_SPACE_REG
output [7:0]	o_LINE_SPACE_V;
output [7:0]	o_LINE_SPACE_H;

// SPA_TEXT_FLAG_REG
output 			o_TEXT_FLAG1;
output 			o_TEXT_FLAG2;
output 			o_TEXT_FLAG3;

// SPA_TEXT_AREA1_W_REG
output [13:0]	o_TEXT_AREA1_EN_W;
output [13:0]	o_TEXT_AREA1_ST_W;

// SPA_TEXT_AREA1_H_REG
output [13:0]	o_TEXT_AREA1_EN_H;
output [13:0]	o_TEXT_AREA1_ST_H;

// SPA_TEXT_AREA2_W_REG
output [13:0]	o_TEXT_AREA2_EN_W;
output [13:0]	o_TEXT_AREA2_ST_W;

// SPA_TEXT_AREA2_H_REG
output [13:0]	o_TEXT_AREA2_EN_H;
output [13:0]	o_TEXT_AREA2_ST_H;

// SPA_TEXT_AREA3_W_REG
output [13:0]	o_TEXT_AREA3_EN_W;
output [13:0]	o_TEXT_AREA3_ST_W;

// SPA_TEXT_AREA3_H_REG
output [13:0]	o_TEXT_AREA3_EN_H;
output [13:0]	o_TEXT_AREA3_ST_H;

// SPA_ABS_PRE_SCAN_LINE_REG
output [13:0]	o_ABS_PRE_SCAN_LINE;

// SPA_ABS_PRE_SCAN_IWIN_REG
output [13:0]	o_ABS_IWIN_END;
output [13:0]	o_ABS_IWIN_START;

// SPA_ABS_TH_REG
output [7:0]	o_ABS_WHITE_TH;
output [7:0]	o_ABS_BLACK_TH;
output 			o_ABS_NOISE_REM;

// SPA_ABS_VALID_PERCENTAGE_REG
output [6:0]	o_ABS_VALID_PERCENTAGE;

// SPA_ABS_BK_STD_TH_REG
output [7:0]	o_ABS_BK_STD_TH;

// SPA_ABS_SIGMA_REG
output [6:0]	o_ABS_PERCENTAGE;
output [5:0]	o_ABS_DETECT_SIGMA;
output [5:0]	o_ABS_CONFID_SIGMA;

// SPA_ABS_BG_BACKUP_REG
output 			o_ABS_BG_BACKUP_EN;
output [7:0]	o_ABS_BG_BACKUP_TH;

// SPA_ABS_COLOR_EXCEPTION_REG
output 			o_ABS_COLOR_EXCEPTION;
output [7:0]	o_ABS_COLOR_TH2;
output [7:0]	o_ABS_COLOR_TH1;

// SPA_ABS_TOP_BG_LEVEL_REG
output [7:0]	o_ABS_TOP_BG_LEVEL;
output [7:0]	o_ABS_MAX_CB;
output [7:0]	o_ABS_MAX_CR;

// SPA_ABS_TOP_PEAK_CONFIDENCE_REG
output [6:0]	o_ABS_TOP_PEAK_CONFIDENCE;
output 			o_ABS_SUCCESS;

// SPA_ABS_PRE_SCAN_START_REG
output [13:0]	o_ABS_PRE_SCAN_START;

// SPA_MAD_PRE_SCAN_LINE_REG
output [13:0]	o_MAD_PRE_SCAN_LINE;

// SPA_MAD_PRE_SCAN_IWIN_REG
output [13:0]	o_MAD_IWIN_END;
output [13:0]	o_MAD_IWIN_START;

// SPA_MAD_TH_REG
output [7:0]	o_MAD_WHITE_TH;
output [7:0]	o_MAD_BLACK_TH;
output 			o_MAD_NOISE_REM;

// SPA_MAD_VALID_PERCENTAGE_REG
output [6:0]	o_MAD_VALID_PERCENTAGE;

// SPA_MAD_BK_STD_TH_REG
output [7:0]	o_MAD_BK_STD_TH;

// SPA_MAD_SIGMA_REG
output [6:0]	o_MAD_PERCENTAGE;
output [5:0]	o_MAD_DETECT_SIGMA;
output [5:0]	o_MAD_CONFID_SIGMA;

// SPA_MAD_BG_BACKUP_REG
output 			o_MAD_BG_BACKUP_EN;
output [7:0]	o_MAD_BG_BACKUP_TH;

// SPA_MAD_COLOR_EXCEPTION_REG
output 			o_MAD_COLOR_EXCEPTION;
output [7:0]	o_MAD_COLOR_TH2;
output [7:0]	o_MAD_COLOR_TH1;

// SPA_MAD_TOP_BG_LEVEL_REG
output [7:0]	o_MAD_TOP_BG_LEVEL;
output [7:0]	o_MAD_MAX_CB;
output [7:0]	o_MAD_MAX_CR;

// SPA_MAD_TOP_PEAK_CONFIDENCE_REG
output [6:0]	o_MAD_TOP_PEAK_CONFIDENCE;
output 			o_MAD_SUCCESS;

// SPA_MAD_PRE_SCAN_START_REG
output [13:0]	o_MAD_PRE_SCAN_START;

// SPA_NEWABSD_SCAN_RANGE_REG
output [13:0]	o_ABS_PRE_SCAN_LINE;
output [13:0]	o_ABS_PRE_SCAN_START;

// SPA_NEWABSD_PRE_SCAN_IWIN_REG
output [13:0]	o_ABS_IWIN_END;
output [13:0]	o_ABS_IWIN_START;

// SPA_NEWABSD_CHOMA_TH_REG
output [7:0]	o_COLOR_RIDGE_TH;
output [7:0]	o_GRAY_RIDGE_TH;
output [7:0]	o_CHROMA_TH;

// SPA_NEWABSD_LIMIT_REG
output [7:0]	o_RIGHT_LIMIT;
output [7:0]	o_LEFT_LIMIT;

// SPA_NEWABSD_HISTO_PEAK_REG
output [7:0]	o_HISTO_COLOR_PEAK;
output [7:0]	o_HISTO_GRAY_PEAK;

// SPA_NEWABSD_HISTO_LEFT_REG
output [7:0]	o_HISTO_COLOR_LEFT;
output [7:0]	o_HISTO_GRAY_LEFT;

// SPA_NEWABSD_HISTO_RIGHT_REG
output [7:0]	o_HISTO_COLOR_RIGHT;
output [7:0]	o_HISTO_GRAY_RIGHT;

// SPA_NEWABSD_RESULT_REG
output 			o_PAPER_COLOR_FLAG;
output [3:0]	o_MEM_READ_STAT;

// SPA_CLA_CON1_REG
output [7:0]	o_HLCOUNT_MAXTH1;
output [7:0]	o_HLCOUNT_MAXTH2;
output [7:0]	o_HLCOUNT_DIFFTH1;
output [7:0]	o_HLCOUNT_DIFFTH2;

// SPA_CLA_CON2_REG
output [7:0]	o_HLGRAY_DIFFTH;
output [10:0]	o_ContentsSizeTh;

// SPA_TOTAL_BIN_CNT_REG
output [31:0]	o_TOTAL_BIN_CNT;

// SPA_HL_RANGE2_REG
output [31:0]	o_HL_RANGE2;

// SPA_HL_COLOR2_REG
output [31:0]	o_HL_COLOR2;

// SPA_BTEXT_CNT_REG
output [31:0]	o_BTEXT_CNT;

// SPA_TEXT_CNT_REG
output [31:0]	o_TEXT_CNT;

// SPA_HT_CNT_REG
output [31:0]	o_HT_CNT;

// SPA_EDGE_CNT_REG
output [31:0]	o_EDGE_CNT;

// SPA_WHITE_CNT_REG
output [31:0]	o_WHITE_CNT;

// SPA_CONTONE_CNT_REG
output [31:0]	o_CONTONE_CNT;

// SPA_WHITE_WO_TEXT_CNT_REG
output [31:0]	o_WHITE_WO_TEXT_CNT;

// SPA_WHITE_WO_HT_TEXT_CNT_REG
output [31:0]	o_WHITE_WO_HT_TEXT_CNT;

// SPA_CONTENT_SIZE_REG
output [13:0]	o_ContentSizeW;
output [13:0]	o_ContentSizeH;

// SPA_MARGIN1_REG
output [15:0]	o_BOTTOM_MARGIN;
output [15:0]	o_TOP_MARGIN;

// SPA_MARGIN2_REG
output [15:0]	o_RIGHT_MARGIN;
output [15:0]	o_LEFT_MARGIN;

// SPA_TH1_REG
output [9:0]	o_HIGH_TH_MAX1;
output [9:0]	o_LOW_TH_MIN1;

// SPA_TH2_REG
output [9:0]	o_HIGH_TH_MAX2;
output [9:0]	o_LOW_TH_MIN2;

// SPA_HLIGHT_SEL_EN_REG
output 			o_HLIGHT_SEL_EN;

// SPA_AVG_TH_REG
output [7:0]	o_AVG_TH;

// SPA_HISTO_WIN_VAL_REG
output [7:0]	o_HISTCR_WIN_VAL_HIGH;
output [7:0]	o_HISTCR_WIN_VAL_LOW;
output [7:0]	o_HISTCB_WIN_VAL_HIGH;
output [7:0]	o_HISTCB_WIN_VAL_LOW;

// SPA_RATIO_TH_REG
output [9:0]	o_RATIO_TH_CR;
output [9:0]	o_RATIO_TH_CB;

// SPA_LIMIT_TH_REG
output [7:0]	o_LIMIT_TH_MAX;
output [7:0]	o_LIMIT_TH_MIN;

// SPA_BRIGHT_STRETCH_OFFSET_REG
output [7:0]	o_STRETCH_OFFSET;
output [7:0]	o_BRIGHT_TH;
output 			o_BRIGHT_EN;

// SPA_ACB_TH1_REG
output [5:0]	o_ACB_GRAY_RIDGE;
output [9:0]	o_ACB_PEAK_RATIO_TH;

// SPA_ACB_TH2_REG
output [7:0]	o_ACB_RIGHT_LIMIT;
output [7:0]	o_ACB_LEFT_LIMIT;

// SPA_OBJECT_TH_REG
output [3:0]	o_OBJ_AREA_TH;
output [7:0]	o_OBJ_INDEX_TH;

// SPA_ACBD_RESULT1_REG
output [7:0]	o_BRIGHT_OFFSET;
output [7:0]	o_FINAL_MAX;
output [7:0]	o_FINAL_MIN;

// SPA_ACBD_RESULT2_REG
output [7:0]	o_PEAK_ID;
output [7:0]	o_ANKER_POINT;
output [3:0]	o_MEM_READ_STAT;

// SPA_ACBD_ACSREFON_REG
output 			o_ACS_REF_ON;

// SPA_ACS_CON_REG
output 			o_ACS_SATAUTO_EN;
output 			o_ACS_HALFAUTO_EN;
output 			o_ACS_AUTO_EN;
output 			o_ACS_MARK_EN;
output 			o_ACS_HISTO_EN;
output 			o_ACS_RANGE_REAL_IMAGE;
output [7:0]	o_ACS_BLOCK_SIZE_X;
output [7:0]	o_ACS_BLOCK_SIZE_Y;
output [7:0]	o_ACS_WHITE_TH;

// SPA_ACS_MARK_POS_UPPER_REG
output [16:0]	o_ACS_MARK_UPPER;

// SPA_ACS_MARK_POS_LOWER_REG
output [16:0]	o_ACS_MARK_LOWER;

// SPA_ACS_MARK_POS_LEFT_REG
output [16:0]	o_ACS_MARK_LEFT;

// SPA_ACS_MARK_POS_RIGHT_REG
output [16:0]	o_ACS_MARK_RIGHT;

// SPA_ACS_SATURATION_TH_REG
output [7:0]	o_ACS_SATURATION_BLOCK_TH;
output [7:0]	o_ACS_SATURATION_PXL_TH;

// SPA_ACS_HT_TH_REG
output [14:0]	o_ACS_PUREHALFTONE_CNT;
output [14:0]	o_ACS_HALFTONE_CNT;

// SPA_ACS_CBMAX1_REG
output [7:0]	o_ACS_CB_MAX_03;
output [7:0]	o_ACS_CB_MAX_02;
output [7:0]	o_ACS_CB_MAX_01;
output [7:0]	o_ACS_CB_MAX_00;

// SPA_ACS_CBMAX2_REG
output [7:0]	o_ACS_CB_MAX_07;
output [7:0]	o_ACS_CB_MAX_06;
output [7:0]	o_ACS_CB_MAX_05;
output [7:0]	o_ACS_CB_MAX_04;

// SPA_ACS_CBMAX3_REG
output [7:0]	o_ACS_CB_MAX_11;
output [7:0]	o_ACS_CB_MAX_10;
output [7:0]	o_ACS_CB_MAX_09;
output [7:0]	o_ACS_CB_MAX_08;

// SPA_ACS_CBMAX4_REG
output [7:0]	o_ACS_CB_MAX_15;
output [7:0]	o_ACS_CB_MAX_14;
output [7:0]	o_ACS_CB_MAX_13;
output [7:0]	o_ACS_CB_MAX_12;

// SPA_ACS_CBMIN1_REG
output [7:0]	o_ACS_CB_MIN_03;
output [7:0]	o_ACS_CB_MIN_02;
output [7:0]	o_ACS_CB_MIN_01;
output [7:0]	o_ACS_CB_MIN_00;

// SPA_ACS_CBMIN2_REG
output [7:0]	o_ACS_CB_MIN_07;
output [7:0]	o_ACS_CB_MIN_06;
output [7:0]	o_ACS_CB_MIN_05;
output [7:0]	o_ACS_CB_MIN_04;

// SPA_ACS_CBMIN3_REG
output [7:0]	o_ACS_CB_MIN_11;
output [7:0]	o_ACS_CB_MIN_10;
output [7:0]	o_ACS_CB_MIN_09;
output [7:0]	o_ACS_CB_MIN_08;

// SPA_ACS_CBMIN4_REG
output [7:0]	o_ACS_CB_MIN_15;
output [7:0]	o_ACS_CB_MIN_14;
output [7:0]	o_ACS_CB_MIN_13;
output [7:0]	o_ACS_CB_MIN_12;

// SPA_ACS_CRMAX1_REG
output [7:0]	o_ACS_CR_MAX_03;
output [7:0]	o_ACS_CR_MAX_02;
output [7:0]	o_ACS_CR_MAX_01;
output [7:0]	o_ACS_CR_MAX_00;

// SPA_ACS_CRMAX2_REG
output [7:0]	o_ACS_CR_MAX_07;
output [7:0]	o_ACS_CR_MAX_06;
output [7:0]	o_ACS_CR_MAX_05;
output [7:0]	o_ACS_CR_MAX_04;

// SPA_ACS_CRMAX3_REG
output [7:0]	o_ACS_CR_MAX_11;
output [7:0]	o_ACS_CR_MAX_10;
output [7:0]	o_ACS_CR_MAX_09;
output [7:0]	o_ACS_CR_MAX_08;

// SPA_ACS_CRMAX4_REG
output [7:0]	o_ACS_CR_MAX_15;
output [7:0]	o_ACS_CR_MAX_14;
output [7:0]	o_ACS_CR_MAX_13;
output [7:0]	o_ACS_CR_MAX_12;

// SPA_ACS_CRMIN1_REG
output [7:0]	o_ACS_CR_MIN_03;
output [7:0]	o_ACS_CR_MIN_02;
output [7:0]	o_ACS_CR_MIN_01;
output [7:0]	o_ACS_CR_MIN_00;

// SPA_ACS_CRMIN2_REG
output [7:0]	o_ACS_CR_MIN_07;
output [7:0]	o_ACS_CR_MIN_06;
output [7:0]	o_ACS_CR_MIN_05;
output [7:0]	o_ACS_CR_MIN_04;

// SPA_ACS_CRMIN3_REG
output [7:0]	o_ACS_CR_MIN_11;
output [7:0]	o_ACS_CR_MIN_10;
output [7:0]	o_ACS_CR_MIN_09;
output [7:0]	o_ACS_CR_MIN_08;

// SPA_ACS_CRMIN4_REG
output [7:0]	o_ACS_CR_MIN_15;
output [7:0]	o_ACS_CR_MIN_14;
output [7:0]	o_ACS_CR_MIN_13;
output [7:0]	o_ACS_CR_MIN_12;

// SPA_ACS_CBMAXH1_REG
output [7:0]	o_ACS_CB_MAXH_03;
output [7:0]	o_ACS_CB_MAXH_02;
output [7:0]	o_ACS_CB_MAXH_01;
output [7:0]	o_ACS_CB_MAXH_00;

// SPA_ACS_CBMAXH2_REG
output [7:0]	o_ACS_CB_MAXH_07;
output [7:0]	o_ACS_CB_MAXH_06;
output [7:0]	o_ACS_CB_MAXH_05;
output [7:0]	o_ACS_CB_MAXH_04;

// SPA_ACS_CBMAXH3_REG
output [7:0]	o_ACS_CB_MAXH_11;
output [7:0]	o_ACS_CB_MAXH_10;
output [7:0]	o_ACS_CB_MAXH_09;
output [7:0]	o_ACS_CB_MAXH_08;

// SPA_ACS_CBMAXH4_REG
output [7:0]	o_ACS_CB_MAXH_15;
output [7:0]	o_ACS_CB_MAXH_14;
output [7:0]	o_ACS_CB_MAXH_13;
output [7:0]	o_ACS_CB_MAXH_12;

// SPA_ACS_CBMINH1_REG
output [7:0]	o_ACS_CB_MINH_03;
output [7:0]	o_ACS_CB_MINH_02;
output [7:0]	o_ACS_CB_MINH_01;
output [7:0]	o_ACS_CB_MINH_00;

// SPA_ACS_CBMINH2_REG
output [7:0]	o_ACS_CB_MINH_07;
output [7:0]	o_ACS_CB_MINH_06;
output [7:0]	o_ACS_CB_MINH_05;
output [7:0]	o_ACS_CB_MINH_04;

// SPA_ACS_CBMINH3_REG
output [7:0]	o_ACS_CB_MINH_11;
output [7:0]	o_ACS_CB_MINH_10;
output [7:0]	o_ACS_CB_MINH_09;
output [7:0]	o_ACS_CB_MINH_08;

// SPA_ACS_CBMINH4_REG
output [7:0]	o_ACS_CB_MINH_15;
output [7:0]	o_ACS_CB_MINH_14;
output [7:0]	o_ACS_CB_MINH_13;
output [7:0]	o_ACS_CB_MINH_12;

// SPA_ACS_CRMAXH1_REG
output [7:0]	o_ACS_CR_MAXH_03;
output [7:0]	o_ACS_CR_MAXH_02;
output [7:0]	o_ACS_CR_MAXH_01;
output [7:0]	o_ACS_CR_MAXH_00;

// SPA_ACS_CRMAXH2_REG
output [7:0]	o_ACS_CR_MAXH_07;
output [7:0]	o_ACS_CR_MAXH_06;
output [7:0]	o_ACS_CR_MAXH_05;
output [7:0]	o_ACS_CR_MAXH_04;

// SPA_ACS_CRMAXH3_REG
output [7:0]	o_ACS_CR_MAXH_11;
output [7:0]	o_ACS_CR_MAXH_10;
output [7:0]	o_ACS_CR_MAXH_09;
output [7:0]	o_ACS_CR_MAXH_08;

// SPA_ACS_CRMAXH4_REG
output [7:0]	o_ACS_CR_MAXH_15;
output [7:0]	o_ACS_CR_MAXH_14;
output [7:0]	o_ACS_CR_MAXH_13;
output [7:0]	o_ACS_CR_MAXH_12;

// SPA_ACS_CRMINH1_REG
output [7:0]	o_ACS_CR_MINH_03;
output [7:0]	o_ACS_CR_MINH_02;
output [7:0]	o_ACS_CR_MINH_01;
output [7:0]	o_ACS_CR_MINH_00;

// SPA_ACS_CRMINH2_REG
output [7:0]	o_ACS_CR_MINH_07;
output [7:0]	o_ACS_CR_MINH_06;
output [7:0]	o_ACS_CR_MINH_05;
output [7:0]	o_ACS_CR_MINH_04;

// SPA_ACS_CRMINH3_REG
output [7:0]	o_ACS_CR_MINH_11;
output [7:0]	o_ACS_CR_MINH_10;
output [7:0]	o_ACS_CR_MINH_09;
output [7:0]	o_ACS_CR_MINH_08;

// SPA_ACS_CRMINH4_REG
output [7:0]	o_ACS_CR_MINH_15;
output [7:0]	o_ACS_CR_MINH_14;
output [7:0]	o_ACS_CR_MINH_13;
output [7:0]	o_ACS_CR_MINH_12;

// SPA_ACS_VALUE_TH_REG
output [7:0]	o_ACS_VALUE_BLOCK_TH;
output [7:0]	o_ACS_VALUE_PXL_TH;

// SPA_ACS_TBLK_PAGE_REG
output [31:0]	o_ACS_TBLK_PAGE;

// SPA_ACS_TBLK_NPAGE_REG
output [31:0]	o_ACS_TBLK_NPAGE;

// SPA_ACS_CBLK_REG
output [31:0]	o_ACS_CBLK;

// SPA_ACS_SBLK_PAGE_REG
output [31:0]	o_ACS_SBLK_PAGE;

// SPA_ACS_SPXL_BLK_PAGE_REG
output [31:0]	o_ACS_SPXL_BLK_PAGE;

// SPA_ACS_SPXL_PAGE_REG
output [31:0]	o_ACS_SPXL_PAGE;

// SPA_ACS_TEXT_PAGE_REG
output [31:0]	o_ACS_TEXT_PAGE;

// SPA_ACS_HT_PAGE_REG
output [31:0]	o_ACS_HT_PAGE;

// SPA_ACS_EDGE_PAGE_REG
output [31:0]	o_ACS_EDGE_PAGE;

// SPA_AVG_HT_ACS00_REG
output [31:0]	o_AVG_HT_ACS00;

// SPA_AVG_HT_ACS01_REG
output [31:0]	o_AVG_HT_ACS01;

// SPA_AVG_HT_ACS02_REG
output [31:0]	o_AVG_HT_ACS02;

// SPA_AVG_HT_ACS03_REG
output [31:0]	o_AVG_HT_ACS03;

// SPA_AVG_HT_ACS04_REG
output [31:0]	o_AVG_HT_ACS04;

// SPA_AVG_HT_ACS05_REG
output [31:0]	o_AVG_HT_ACS05;

// SPA_AVG_HT_ACS06_REG
output [31:0]	o_AVG_HT_ACS06;

// SPA_AVG_HT_ACS07_REG
output [31:0]	o_AVG_HT_ACS07;

// SPA_AVG_HT_ACS08_REG
output [31:0]	o_AVG_HT_ACS08;

// SPA_AVG_HT_ACS09_REG
output [31:0]	o_AVG_HT_ACS09;

// SPA_AVG_HT_ACS10_REG
output [31:0]	o_AVG_HT_ACS10;

// SPA_AVG_HT_ACS11_REG
output [31:0]	o_AVG_HT_ACS11;

// SPA_AVG_HT_ACS12_REG
output [31:0]	o_AVG_HT_ACS12;

// SPA_AVG_HT_ACS13_REG
output [31:0]	o_AVG_HT_ACS13;

// SPA_AVG_HT_ACS14_REG
output [31:0]	o_AVG_HT_ACS14;

// SPA_AVG_HT_ACS15_REG
output [31:0]	o_AVG_HT_ACS15;

// SPA_AVG_NHT_ACS00_REG
output [31:0]	o_AVG_NHT_ACS00;

// SPA_AVG_NHT_ACS01_REG
output [31:0]	o_AVG_NHT_ACS01;

// SPA_AVG_NHT_ACS02_REG
output [31:0]	o_AVG_NHT_ACS02;

// SPA_AVG_NHT_ACS03_REG
output [31:0]	o_AVG_NHT_ACS03;

// SPA_AVG_NHT_ACS04_REG
output [31:0]	o_AVG_NHT_ACS04;

// SPA_AVG_NHT_ACS05_REG
output [31:0]	o_AVG_NHT_ACS05;

// SPA_AVG_NHT_ACS06_REG
output [31:0]	o_AVG_NHT_ACS06;

// SPA_AVG_NHT_ACS07_REG
output [31:0]	o_AVG_NHT_ACS07;

// SPA_AVG_NHT_ACS08_REG
output [31:0]	o_AVG_NHT_ACS08;

// SPA_AVG_NHT_ACS09_REG
output [31:0]	o_AVG_NHT_ACS09;

// SPA_AVG_NHT_ACS10_REG
output [31:0]	o_AVG_NHT_ACS10;

// SPA_AVG_NHT_ACS11_REG
output [31:0]	o_AVG_NHT_ACS11;

// SPA_AVG_NHT_ACS12_REG
output [31:0]	o_AVG_NHT_ACS12;

// SPA_AVG_NHT_ACS13_REG
output [31:0]	o_AVG_NHT_ACS13;

// SPA_AVG_NHT_ACS14_REG
output [31:0]	o_AVG_NHT_ACS14;

// SPA_AVG_NHT_ACS15_REG
output [31:0]	o_AVG_NHT_ACS15;

// SPA_ACS_SATURATION_TH2_REG
output [14:0]	o_ACS_SATURATION_PXL_CNT_TH;

// SPA_ACS_VALID_RANGE_H_REG
output [13:0]	o_VALID_BOTTOM;
output [13:0]	o_VALID_TOP;

// SPA_ACS_VALID_RANGE_W_REG
output [13:0]	o_VALID_RIGHT;
output [13:0]	o_VALID_LEFT;

// SPA_ACS_V2_CON_REG
output [7:0]	o_ACS_V2_BLOCK_SIZE_X;
output [7:0]	o_ACS_V2_BLOCK_SIZE_Y;
output [7:0]	o_ACS_V2_WHITE_TH;

// SPA_ACS_V2_SATURATION_TH_REG
output [7:0]	o_ACS_V2_SATURATION_BLOCK_TH;
output [7:0]	o_ACS_V2_SATURATION_PXL_TH;

// SPA_ACS_V2_SATURATION_TH2_REG
output [14:0]	o_ACS_V2_SATURATION_TH2;

// SPA_ACS_V2_HT_TH_REG
output [14:0]	o_ACS_V2_PUREHALFTONE_CNT;
output [14:0]	o_ACS_V2_HALFTONE_CNT;

// SPA_ACS_V2_VALUE_TH_REG
output [7:0]	o_ACS_V2_VALUE_BLOCK_TH;
output [7:0]	o_ACS_V2_VALUE_PXL_TH;

// SPA_ACS_V2_TBLK_PAGE_REG
output [31:0]	o_ACS_V2_TBLK_PAGE;

// SPA_ACS_V2_TBLK_NPAGE_REG
output [31:0]	o_ACS_V2_TBLK_NPAGE;

// SPA_ACS_V2_CBLK_REG
output [31:0]	o_ACS_V2_CBLK;

// SPA_ACS_V2_SBLK_PAGE_REG
output [31:0]	o_ACS_V2_SBLK_PAGE;

// SPA_ACS_V2_SPXL_BLK_PAGE_REG
output [31:0]	o_ACS_V2_SPXL_BLK_PAGE;

// SPA_ACS_V2_SPXL_PAGE_REG
output [31:0]	o_ACS_V2_SPXL_PAGE;

// SPA_BLANK_CON0_REG
output 			o_BLANK_AUTO_EN;
output 			o_BLANK_MARK_EN;
output 			o_BLANK_RANGE_REAL_IMAGE;
output [7:0]	o_BLANK_BLOCK_SIZE_H;
output [7:0]	o_BLANK_BLOCK_SIZE_V;

// SPA_BLANK_CON1_REG
output [7:0]	o_BLANK_DARKBLK_TH;
output [7:0]	o_BLANK_CONT_PCT;

// SPA_BLANK_MARK_POS_UPPER_REG
output [16:0]	o_BLANK_MARK_UPPER;

// SPA_BLANK_MARK_POS_LOWER_REG
output [16:0]	o_BLANK_MARK_LOWER;

// SPA_BLANK_MARK_POS_LEFT_REG
output [16:0]	o_BLANK_MARK_LEFT;

// SPA_BLANK_MARK_POS_RIGHT_REG
output [16:0]	o_BLANK_MARK_RIGHT;

// SPA_BLANK_COLOR_BLK_REG
output [7:0]	o_BLANK_COLORBLOCK_CR_THU;
output [7:0]	o_BLANK_COLORBLOCK_CR_THL;
output [7:0]	o_BLANK_COLORBLOCK_CB_THU;
output [7:0]	o_BLANK_COLORBLOCK_CB_THL;

// SPA_BLANK_TOTALBLK_REG
output [31:0]	o_BLANK_TBLK_PAGE;

// SPA_BLANK_CONTBLK_REG
output [31:0]	o_BLANK_CONTBLK_PAGE;

// SPA_BLANK_BLANKBLK_REG
output [31:0]	o_BLANK_BLACKBLK_PAGE;

// SPA_BLANK_DARKBLK_REG
output [31:0]	o_BLANK_DARKBLK;

// SPA_BLANK_COLORBLK_REG
output [31:0]	o_BLANK_CBLK;

// SPA_BLANK_Y_MIN_MAX_REG
output [7:0]	o_BLANK_U_MAX;
output [7:0]	o_BLANK_Y_MIN;

// SPA_BLANK_CB_MIN_MAX_REG
output [7:0]	o_BLANK_CB_MAX;
output [7:0]	o_BLANK_CB_MIN;

// SPA_BLANK_CR_MIN_MAX_REG
output [7:0]	o_BLANK_CR_MAX;
output [7:0]	o_BLANK_CR_MIN;

// SPA_RC2_OUTIMG_WIDTH_HEIGHT_REG
output [7:0]	o_RC2_OUTIMG_HEIGHT;
output [8:0]	o_RC2_OUTIMG_WIDTH;

// SPA_RC2_OVERLAP_REG
output [5:0]	o_RC2_OVERLAP;
output 			o_RC2_MASK_IMG_BD;

// SPA_RC2_FRAC_REG
output [11:0]	o_RC2_H_FRAC;
output [11:0]	o_RC2_V_FRAC;

// SPA_BDS_CON_REG
output 			o_MIRROR;
output [7:0]	o_EDGE_TH;

// SPA_BDS_EDGE1_REG
output [7:0]	o_EDGE_Y_LOW;
output [7:0]	o_EDGE_Y_HIGH;
output [7:0]	o_EDGE_CNT_TH;

// SPA_BDS_EDGE2_REG
output [7:0]	o_EDGE_CR_LOW;
output [7:0]	o_EDGE_CR_HIGH;
output [7:0]	o_EDGE_CB_LOW;
output [7:0]	o_EDGE_CB_HIGH;

// SPA_BDS_EURION1_REG
output [7:0]	o_EURion_Y_LOW;
output [7:0]	o_EURion_Y_HIGH;

// SPA_BDS_EURION2_REG
output [7:0]	o_EURion_CR_LOW;
output [7:0]	o_EURion_CR_HIGH;
output [7:0]	o_EURion_CB_LOW;
output [7:0]	o_EURion_CB_HIGH;

// SPA_BDS_OFFSET_REG
output [7:0]	o_OFFSET_BOTTOM;
output [7:0]	o_OFFSET_TOP;
output [7:0]	o_OFFSET_RIGHT;
output [7:0]	o_OFFSET_LEFT;

// SPA_BDS_CONTENTS_REG
output [15:0]	o_CONTENS_END;
output [15:0]	o_CONTENS_START;

// SPA_SMAP_PARAM_B_REG
output [7:0]	o_SMAP_G_Range2;
output [7:0]	o_SMAP_G_Range1;
output [7:0]	o_SMAP_R_Range2;
output [7:0]	o_SMAP_R_Range1;

// SPA_SMAP_PARAM_C_REG
output 			o_SMAP_Refine_Enable;
output [3:0]	o_SMAP_BinTH3;
output [3:0]	o_SMAP_BinTH2;
output [3:0]	o_SMAP_BinTH1;
output [7:0]	o_SMAP_B_Range2;
output [7:0]	o_SMAP_B_Range1;

// SPA_SMAP_ADAPT_CON_REG
output 			o_SMAP_ADAPT_EN;
output [5:0]	o_SMAP_ADAPT_AVGDIV;

// SPA_SMAP_ADAPT_R_MAX0_REG
output [7:0]	o_SMAP_ADAPT_R_MAX00;
output [7:0]	o_SMAP_ADAPT_R_MAX01;
output [7:0]	o_SMAP_ADAPT_R_MAX02;
output [7:0]	o_SMAP_ADAPT_R_MAX03;

// SPA_SMAP_ADAPT_R_MAX1_REG
output [7:0]	o_SMAP_ADAPT_R_MAX10;
output [7:0]	o_SMAP_ADAPT_R_MAX11;
output [7:0]	o_SMAP_ADAPT_R_MAX12;
output [7:0]	o_SMAP_ADAPT_R_MAX13;

// SPA_SMAP_ADAPT_R_MAX2_REG
output [7:0]	o_SMAP_ADAPT_R_MAX20;
output [7:0]	o_SMAP_ADAPT_R_MAX21;
output [7:0]	o_SMAP_ADAPT_R_MAX22;
output [7:0]	o_SMAP_ADAPT_R_MAX23;

// SPA_SMAP_ADAPT_R_MAX3_REG
output [7:0]	o_SMAP_ADAPT_R_MAX30;
output [7:0]	o_SMAP_ADAPT_R_MAX31;
output [7:0]	o_SMAP_ADAPT_R_MAX32;
output [7:0]	o_SMAP_ADAPT_R_MAX33;

// SPA_SMAP_ADAPT_R_MAX4_REG
output [7:0]	o_SMAP_ADAPT_R_MAX40;
output [7:0]	o_SMAP_ADAPT_R_MAX41;
output [7:0]	o_SMAP_ADAPT_R_MAX42;
output [7:0]	o_SMAP_ADAPT_R_MAX43;

// SPA_SMAP_ADAPT_R_MAX5_REG
output [7:0]	o_SMAP_ADAPT_R_MAX50;
output [7:0]	o_SMAP_ADAPT_R_MAX51;
output [7:0]	o_SMAP_ADAPT_R_MAX52;
output [7:0]	o_SMAP_ADAPT_R_MAX53;

// SPA_SMAP_ADAPT_R_MAX6_REG
output [7:0]	o_SMAP_ADAPT_R_MAX60;
output [7:0]	o_SMAP_ADAPT_R_MAX61;
output [7:0]	o_SMAP_ADAPT_R_MAX62;
output [7:0]	o_SMAP_ADAPT_R_MAX63;

// SPA_SMAP_ADAPT_R_MAX7_REG
output [7:0]	o_SMAP_ADAPT_R_MAX70;
output [7:0]	o_SMAP_ADAPT_R_MAX71;
output [7:0]	o_SMAP_ADAPT_R_MAX72;
output [7:0]	o_SMAP_ADAPT_R_MAX73;

// SPA_SMAP_ADAPT_R_MIN0_REG
output [7:0]	o_SMAP_ADAPT_R_MIN00;
output [7:0]	o_SMAP_ADAPT_R_MIN01;
output [7:0]	o_SMAP_ADAPT_R_MIN02;
output [7:0]	o_SMAP_ADAPT_R_MIN03;

// SPA_SMAP_ADAPT_R_MIN1_REG
output [7:0]	o_SMAP_ADAPT_R_MIN10;
output [7:0]	o_SMAP_ADAPT_R_MIN11;
output [7:0]	o_SMAP_ADAPT_R_MIN12;
output [7:0]	o_SMAP_ADAPT_R_MIN13;

// SPA_SMAP_ADAPT_R_MIN2_REG
output [7:0]	o_SMAP_ADAPT_R_MIN20;
output [7:0]	o_SMAP_ADAPT_R_MIN21;
output [7:0]	o_SMAP_ADAPT_R_MIN22;
output [7:0]	o_SMAP_ADAPT_R_MIN23;

// SPA_SMAP_ADAPT_R_MIN3_REG
output [7:0]	o_SMAP_ADAPT_R_MIN30;
output [7:0]	o_SMAP_ADAPT_R_MIN31;
output [7:0]	o_SMAP_ADAPT_R_MIN32;
output [7:0]	o_SMAP_ADAPT_R_MIN33;

// SPA_SMAP_ADAPT_R_MIN4_REG
output [7:0]	o_SMAP_ADAPT_R_MIN40;
output [7:0]	o_SMAP_ADAPT_R_MIN41;
output [7:0]	o_SMAP_ADAPT_R_MIN42;
output [7:0]	o_SMAP_ADAPT_R_MIN43;

// SPA_SMAP_ADAPT_R_MIN5_REG
output [7:0]	o_SMAP_ADAPT_R_MIN50;
output [7:0]	o_SMAP_ADAPT_R_MIN51;
output [7:0]	o_SMAP_ADAPT_R_MIN52;
output [7:0]	o_SMAP_ADAPT_R_MIN53;

// SPA_SMAP_ADAPT_R_MIN6_REG
output [7:0]	o_SMAP_ADAPT_R_MIN60;
output [7:0]	o_SMAP_ADAPT_R_MIN61;
output [7:0]	o_SMAP_ADAPT_R_MIN62;
output [7:0]	o_SMAP_ADAPT_R_MIN63;

// SPA_SMAP_ADAPT_R_MIN7_REG
output [7:0]	o_SMAP_ADAPT_R_MIN70;
output [7:0]	o_SMAP_ADAPT_R_MIN71;
output [7:0]	o_SMAP_ADAPT_R_MIN72;
output [7:0]	o_SMAP_ADAPT_R_MIN73;

// SPA_SMAP_ADAPT_G_MAX0_REG
output [7:0]	o_SMAP_ADAPT_G_MAX00;
output [7:0]	o_SMAP_ADAPT_G_MAX01;
output [7:0]	o_SMAP_ADAPT_G_MAX02;
output [7:0]	o_SMAP_ADAPT_G_MAX03;

// SPA_SMAP_ADAPT_G_MAX1_REG
output [7:0]	o_SMAP_ADAPT_G_MAX10;
output [7:0]	o_SMAP_ADAPT_G_MAX11;
output [7:0]	o_SMAP_ADAPT_G_MAX12;
output [7:0]	o_SMAP_ADAPT_G_MAX13;

// SPA_SMAP_ADAPT_G_MAX2_REG
output [7:0]	o_SMAP_ADAPT_G_MAX20;
output [7:0]	o_SMAP_ADAPT_G_MAX21;
output [7:0]	o_SMAP_ADAPT_G_MAX22;
output [7:0]	o_SMAP_ADAPT_G_MAX23;

// SPA_SMAP_ADAPT_G_MAX3_REG
output [7:0]	o_SMAP_ADAPT_G_MAX30;
output [7:0]	o_SMAP_ADAPT_G_MAX31;
output [7:0]	o_SMAP_ADAPT_G_MAX32;
output [7:0]	o_SMAP_ADAPT_G_MAX33;

// SPA_SMAP_ADAPT_G_MAX4_REG
output [7:0]	o_SMAP_ADAPT_G_MAX40;
output [7:0]	o_SMAP_ADAPT_G_MAX41;
output [7:0]	o_SMAP_ADAPT_G_MAX42;
output [7:0]	o_SMAP_ADAPT_G_MAX43;

// SPA_SMAP_ADAPT_G_MAX5_REG
output [7:0]	o_SMAP_ADAPT_G_MAX50;
output [7:0]	o_SMAP_ADAPT_G_MAX51;
output [7:0]	o_SMAP_ADAPT_G_MAX52;
output [7:0]	o_SMAP_ADAPT_G_MAX53;

// SPA_SMAP_ADAPT_G_MAX6_REG
output [7:0]	o_SMAP_ADAPT_G_MAX60;
output [7:0]	o_SMAP_ADAPT_G_MAX61;
output [7:0]	o_SMAP_ADAPT_G_MAX62;
output [7:0]	o_SMAP_ADAPT_G_MAX63;

// SPA_SMAP_ADAPT_G_MAX7_REG
output [7:0]	o_SMAP_ADAPT_G_MAX70;
output [7:0]	o_SMAP_ADAPT_G_MAX71;
output [7:0]	o_SMAP_ADAPT_G_MAX72;
output [7:0]	o_SMAP_ADAPT_G_MAX73;

// SPA_SMAP_ADAPT_G_MIN0_REG
output [7:0]	o_SMAP_ADAPT_G_MIN00;
output [7:0]	o_SMAP_ADAPT_G_MIN01;
output [7:0]	o_SMAP_ADAPT_G_MIN02;
output [7:0]	o_SMAP_ADAPT_G_MIN03;

// SPA_SMAP_ADAPT_G_MIN1_REG
output [7:0]	o_SMAP_ADAPT_G_MIN10;
output [7:0]	o_SMAP_ADAPT_G_MIN11;
output [7:0]	o_SMAP_ADAPT_G_MIN12;
output [7:0]	o_SMAP_ADAPT_G_MIN13;

// SPA_SMAP_ADAPT_G_MIN2_REG
output [7:0]	o_SMAP_ADAPT_G_MIN20;
output [7:0]	o_SMAP_ADAPT_G_MIN21;
output [7:0]	o_SMAP_ADAPT_G_MIN22;
output [7:0]	o_SMAP_ADAPT_G_MIN23;

// SPA_SMAP_ADAPT_G_MIN3_REG
output [7:0]	o_SMAP_ADAPT_G_MIN30;
output [7:0]	o_SMAP_ADAPT_G_MIN31;
output [7:0]	o_SMAP_ADAPT_G_MIN32;
output [7:0]	o_SMAP_ADAPT_G_MIN33;

// SPA_SMAP_ADAPT_G_MIN4_REG
output [7:0]	o_SMAP_ADAPT_G_MIN40;
output [7:0]	o_SMAP_ADAPT_G_MIN41;
output [7:0]	o_SMAP_ADAPT_G_MIN42;
output [7:0]	o_SMAP_ADAPT_G_MIN43;

// SPA_SMAP_ADAPT_G_MIN5_REG
output [7:0]	o_SMAP_ADAPT_G_MIN50;
output [7:0]	o_SMAP_ADAPT_G_MIN51;
output [7:0]	o_SMAP_ADAPT_G_MIN52;
output [7:0]	o_SMAP_ADAPT_G_MIN53;

// SPA_SMAP_ADAPT_G_MIN6_REG
output [7:0]	o_SMAP_ADAPT_G_MIN60;
output [7:0]	o_SMAP_ADAPT_G_MIN61;
output [7:0]	o_SMAP_ADAPT_G_MIN62;
output [7:0]	o_SMAP_ADAPT_G_MIN63;

// SPA_SMAP_ADAPT_G_MIN7_REG
output [7:0]	o_SMAP_ADAPT_G_MIN70;
output [7:0]	o_SMAP_ADAPT_G_MIN71;
output [7:0]	o_SMAP_ADAPT_G_MIN72;
output [7:0]	o_SMAP_ADAPT_G_MIN73;

// SPA_SMAP_ADAPT_B_MAX0_REG
output [7:0]	o_SMAP_ADAPT_B_MAX00;
output [7:0]	o_SMAP_ADAPT_B_MAX01;
output [7:0]	o_SMAP_ADAPT_B_MAX02;
output [7:0]	o_SMAP_ADAPT_B_MAX03;

// SPA_SMAP_ADAPT_B_MAX1_REG
output [7:0]	o_SMAP_ADAPT_B_MAX10;
output [7:0]	o_SMAP_ADAPT_B_MAX11;
output [7:0]	o_SMAP_ADAPT_B_MAX12;
output [7:0]	o_SMAP_ADAPT_B_MAX13;

// SPA_SMAP_ADAPT_B_MAX2_REG
output [7:0]	o_SMAP_ADAPT_B_MAX20;
output [7:0]	o_SMAP_ADAPT_B_MAX21;
output [7:0]	o_SMAP_ADAPT_B_MAX22;
output [7:0]	o_SMAP_ADAPT_B_MAX23;

// SPA_SMAP_ADAPT_B_MAX3_REG
output [7:0]	o_SMAP_ADAPT_B_MAX30;
output [7:0]	o_SMAP_ADAPT_B_MAX31;
output [7:0]	o_SMAP_ADAPT_B_MAX32;
output [7:0]	o_SMAP_ADAPT_B_MAX33;

// SPA_SMAP_ADAPT_B_MAX4_REG
output [7:0]	o_SMAP_ADAPT_B_MAX40;
output [7:0]	o_SMAP_ADAPT_B_MAX41;
output [7:0]	o_SMAP_ADAPT_B_MAX42;
output [7:0]	o_SMAP_ADAPT_B_MAX43;

// SPA_SMAP_ADAPT_B_MAX5_REG
output [7:0]	o_SMAP_ADAPT_B_MAX50;
output [7:0]	o_SMAP_ADAPT_B_MAX51;
output [7:0]	o_SMAP_ADAPT_B_MAX52;
output [7:0]	o_SMAP_ADAPT_B_MAX53;

// SPA_SMAP_ADAPT_B_MAX6_REG
output [7:0]	o_SMAP_ADAPT_B_MAX60;
output [7:0]	o_SMAP_ADAPT_B_MAX61;
output [7:0]	o_SMAP_ADAPT_B_MAX62;
output [7:0]	o_SMAP_ADAPT_B_MAX63;

// SPA_SMAP_ADAPT_B_MAX7_REG
output [7:0]	o_SMAP_ADAPT_B_MAX70;
output [7:0]	o_SMAP_ADAPT_B_MAX71;
output [7:0]	o_SMAP_ADAPT_B_MAX72;
output [7:0]	o_SMAP_ADAPT_B_MAX73;

// SPA_SMAP_ADAPT_B_MIN0_REG
output [7:0]	o_SMAP_ADAPT_B_MIN00;
output [7:0]	o_SMAP_ADAPT_B_MIN01;
output [7:0]	o_SMAP_ADAPT_B_MIN02;
output [7:0]	o_SMAP_ADAPT_B_MIN03;

// SPA_SMAP_ADAPT_B_MIN1_REG
output [7:0]	o_SMAP_ADAPT_B_MIN10;
output [7:0]	o_SMAP_ADAPT_B_MIN11;
output [7:0]	o_SMAP_ADAPT_B_MIN12;
output [7:0]	o_SMAP_ADAPT_B_MIN13;

// SPA_SMAP_ADAPT_B_MIN2_REG
output [7:0]	o_SMAP_ADAPT_B_MIN20;
output [7:0]	o_SMAP_ADAPT_B_MIN21;
output [7:0]	o_SMAP_ADAPT_B_MIN22;
output [7:0]	o_SMAP_ADAPT_B_MIN23;

// SPA_SMAP_ADAPT_B_MIN3_REG
output [7:0]	o_SMAP_ADAPT_B_MIN30;
output [7:0]	o_SMAP_ADAPT_B_MIN31;
output [7:0]	o_SMAP_ADAPT_B_MIN32;
output [7:0]	o_SMAP_ADAPT_B_MIN33;

// SPA_SMAP_ADAPT_B_MIN4_REG
output [7:0]	o_SMAP_ADAPT_B_MIN40;
output [7:0]	o_SMAP_ADAPT_B_MIN41;
output [7:0]	o_SMAP_ADAPT_B_MIN42;
output [7:0]	o_SMAP_ADAPT_B_MIN43;

// SPA_SMAP_ADAPT_B_MIN5_REG
output [7:0]	o_SMAP_ADAPT_B_MIN50;
output [7:0]	o_SMAP_ADAPT_B_MIN51;
output [7:0]	o_SMAP_ADAPT_B_MIN52;
output [7:0]	o_SMAP_ADAPT_B_MIN53;

// SPA_SMAP_ADAPT_B_MIN6_REG
output [7:0]	o_SMAP_ADAPT_B_MIN60;
output [7:0]	o_SMAP_ADAPT_B_MIN61;
output [7:0]	o_SMAP_ADAPT_B_MIN62;
output [7:0]	o_SMAP_ADAPT_B_MIN63;

// SPA_SMAP_ADAPT_B_MIN7_REG
output [7:0]	o_SMAP_ADAPT_B_MIN70;
output [7:0]	o_SMAP_ADAPT_B_MIN71;
output [7:0]	o_SMAP_ADAPT_B_MIN72;
output [7:0]	o_SMAP_ADAPT_B_MIN73;

// SPA_TBL_ADDR_00_UP_REG
output [7:0]	o_TBL_ADDR_00_UP;

// SPA_TBL_ADDR_01_UP_REG
output [7:0]	o_TBL_ADDR_01_UP;

// SPA_TBL_ADDR_02_UP_REG
output [7:0]	o_TBL_ADDR_02_UP;

// SPA_TBL_ADDR_03_UP_REG
output [7:0]	o_TBL_ADDR_03_UP;

// SPA_TBL_ADDR_04_UP_REG
output [7:0]	o_TBL_ADDR_04_UP;

// SPA_TBL_ADDR_05_UP_REG
output [7:0]	o_TBL_ADDR_05_UP;

// SPA_TBL_ADDR_06_UP_REG
output [7:0]	o_TBL_ADDR_06_UP;

// SPA_TBL_ADDR_07_UP_REG
output [7:0]	o_TBL_ADDR_07_UP;

// SPA_TBL_ADDR_08_UP_REG
output [7:0]	o_TBL_ADDR_08_UP;

// SPA_TBL_ADDR_09_UP_REG
output [7:0]	o_TBL_ADDR_09_UP;

// SPA_TBL_ADDR_10_UP_REG
output [7:0]	o_TBL_ADDR_10_UP;

// SPA_TBL_ADDR_11_UP_REG
output [7:0]	o_TBL_ADDR_11_UP;

// SPA_TBL_ADDR_12_UP_REG
output [7:0]	o_TBL_ADDR_12_UP;

// SPA_TBL_ADDR_13_UP_REG
output [7:0]	o_TBL_ADDR_13_UP;

// SPA_TBL_ADDR_14_UP_REG
output [7:0]	o_TBL_ADDR_14_UP;

// SPA_TBL_ADDR_15_UP_REG
output [7:0]	o_TBL_ADDR_15_UP;

// SPA_TBL_ADDR_16_UP_REG
output [7:0]	o_TBL_ADDR_16_UP;

// SPA_TBL_ADDR_17_UP_REG
output [7:0]	o_TBL_ADDR_17_UP;

// SPA_TBL_ADDR_18_UP_REG
output [7:0]	o_TBL_ADDR_18_UP;

// SPA_TBL_ADDR_19_UP_REG
output [7:0]	o_TBL_ADDR_19_UP;

// SPA_TBL_ADDR_20_UP_REG
output [7:0]	o_TBL_ADDR_20_UP;

// SPA_TBL_ADDR_21_UP_REG
output [7:0]	o_TBL_ADDR_21_UP;

// SPA_TBL_ADDR_22_UP_REG
output [7:0]	o_TBL_ADDR_22_UP;

// SPA_TBL_ADDR_23_UP_REG
output [7:0]	o_TBL_ADDR_23_UP;

// SPA_TBL_ADDR_24_UP_REG
output [7:0]	o_TBL_ADDR_24_UP;

// SPA_RX_CH0_PREV_ADDR_UP_REG
output [7:0]	o_RX_CH0_PREV_ADDR_UP;

// SPA_RX_CH1_PREV_ADDR_UP_REG
output [7:0]	o_RX_CH1_PREV_ADDR_UP;

// SPA_RX_CH2_PREV_ADDR_UP_REG
output [7:0]	o_RX_CH2_PREV_ADDR_UP;

// SPA_RX_CH0_CURR_ADDR_UP_REG
output [7:0]	o_RX_CH0_CURR_ADDR_UP;

// SPA_RX_CH1_CURR_ADDR_UP_REG
output [7:0]	o_RX_CH1_CURR_ADDR_UP;

// SPA_RX_CH2_CURR_ADDR_UP_REG
output [7:0]	o_RX_CH2_CURR_ADDR_UP;

// SPA_RX_CH0_START_ADDR_UP_REG
output [7:0]	o_RX_CH0_START_ADDR_UP;

// SPA_RX_CH1_START_ADDR_UP_REG
output [7:0]	o_RX_CH1_START_ADDR_UP;

// SPA_RX_CH2_START_ADDR_UP_REG
output [7:0]	o_RX_CH2_START_ADDR_UP;

// SPA_RX_CUR_ADDR_CH0_UP_REG
output [7:0]	o_RX_CUR_ADDR_CH0_UP;

// SPA_RX_CUR_ADDR_CH1_UP_REG
output [7:0]	o_RX_CUR_ADDR_CH1_UP;

// SPA_RX_CUR_ADDR_CH2_UP_REG
output [7:0]	o_RX_CUR_ADDR_CH2_UP;

// SPA_TX_CH0_START_ADDR_UP_REG
output [7:0]	o_TX_CH0_START_ADDR_UP;

// SPA_TX_CH1_START_ADDR_UP_REG
output [7:0]	o_TX_CH1_START_ADDR_UP;

// SPA_TX_CH2_START_ADDR_UP_REG
output [7:0]	o_TX_CH2_START_ADDR_UP;

// SPA_TX_ADDR_CH0_MAX_UP_REG
output [7:0]	o_TX_ADDR_CH0_MAX_UP;

// SPA_TX_ADDR_CH0_MIN_UP_REG
output [7:0]	o_TX_ADDR_CH0_MIN_UP;

// SPA_TX_ADDR_CH1_MAX_UP_REG
output [7:0]	o_TX_ADDR_CH1_MAX_UP;

// SPA_TX_ADDR_CH1_MIN_UP_REG
output [7:0]	o_TX_ADDR_CH1_MIN_UP;

// SPA_TX_ADDR_CH2_MAX_UP_REG
output [7:0]	o_TX_ADDR_CH2_MAX_UP;

// SPA_TX_ADDR_CH2_MIN_UP_REG
output [7:0]	o_TX_ADDR_CH2_MIN_UP;

// SPA_TX_CH0_CUR_ADDR_UP_REG
output [7:0]	o_TX_CH0_CUR_ADDR_UP;

// SPA_TX_CH1_CUR_ADDR_UP_REG
output [7:0]	o_TX_CH1_CUR_ADDR_UP;

// SPA_TX_CH2_CUR_ADDR_UP_REG
output [7:0]	o_TX_CH2_CUR_ADDR_UP;

// SPA_ADAPT_DMA_ADDR_UP_REG
output [7:0]	o_ADAPT_ADDR_UP;

// SPA_ADAPT_TX_ADDR_MAX_UP_REG
output [7:0]	o_ADAPT_TX_ADDR_MAX_UP;

// SPA_ADAPT_TX_ADDR_MIN_UP_REG
output [7:0]	o_ADAPT_TX_ADDR_MIN_UP;

// SPA_ADAPT_TX_CUR_ADDR_UP_REG
output [7:0]	o_ADAPT_TX_CUR_ADDR_UP;

// SPA_SMAP_DMA_ADDR_UP_REG
output [7:0]	o_SMAP_ADDR_UP;

// SPA_SMAP_TX_ADDR_MAX_UP_REG
output [7:0]	o_SMAP_TX_ADDR_MAX_UP;

// SPA_SMAP_TX_ADDR_MIN_UP_REG
output [7:0]	o_SMAP_TX_ADDR_MIN_UP;

// SPA_SMAP_TX_CUR_ADDR_UP_REG
output [7:0]	o_SMAP_TX_CUR_ADDR_UP;

// SPA_BDS_DMA_ADDR_UP_REG
output [7:0]	o_BDS_ADDR_UP;

// SPA_BDS_TX_ADDR_MAX_UP_REG
output [7:0]	o_BDS_TX_ADDR_MAX_UP;

// SPA_BDS_TX_ADDR_MIN_UP_REG
output [7:0]	o_BDS_TX_ADDR_MIN_UP;

// SPA_BDS_TX_CUR_ADDR_UP_REG
output [7:0]	o_BDS_TX_CUR_ADDR_UP;

// SPA_ADAPT_DMA_BUF_WR_CNT_REG
output [31:0]	o_ADAPT_DMA_BUF_WR_CNT;

// SPA_ADAPT_DMA_BUF_RD_CNT_REG
output [31:0]	o_ADAPT_DMA_BUF_RD_CNT;

// SPA_ADAPT_DMA_OUT0_CNT_REG
output [31:0]	o_ADAPT_DMA_OUT0_CNT;

// SPA_SMAP_DMA_BUF_WR_CNT_REG
output [31:0]	o_SMAP_DMA_BUF_WR_CNT;

// SPA_SMAP_DMA_BUF_RD_CNT_REG
output [31:0]	o_SMAP_DMA_BUF_RD_CNT;

// SPA_SMAP_DMA_OUT0_CNT_REG
output [31:0]	o_SMAP_DMA_OUT0_CNT;

// SPA_BDS_DMA_BUF_WR_CNT_REG
output [31:0]	o_BDS_DMA_BUF_WR_CNT;

// SPA_BDS_DMA_BUF_RD_CNT_REG
output [31:0]	o_BDS_DMA_BUF_RD_CNT;

// SPA_BDS_DMA_OUT0_CNT_REG
output [31:0]	o_BDS_DMA_OUT0_CNT;

// SPA_ADAPT_WDATA_CNT_REG
output [31:0]	o_ADAPT_WDATA_CNT;

// SPA_SMAP_WDATA_CNT_REG
output [31:0]	o_SMAP_WDATA_CNT;

// SPA_BDS_WDATA_CNT_REG
output [31:0]	o_BDS_WDATA_CNT;



// SPA_SW_RESET_REG
wire 			o_DMA_RESET;
wire 			o_GLOBAL_RESET;

// SPA_CORE_START_REG
wire 			o_CORE_START;
wire 			o_CORE_BUSY;

// SPA_MODE_REG
wire [1:0]	o_RX_COLOR_MODE;
wire [1:0]	o_TX_COLOR_MODE;
wire [2:0]	o_RX_DPI_MODE;

// SPA_MODULE_EN_REG
wire 			o_VSD_EN;
wire 			o_CIS_EN;
wire 			o_RC1_EN;
wire 			o_S1D_EN;
wire 			o_SEG1_EN;
wire 			o_SCC_EN;
wire 			o_SEG2_EN;
wire 			o_ABSD_EN;
wire 			o_NEWABSD_EN;
wire 			o_MAGD_EN;
wire 			o_ACS_EN;
wire 			o_BLANK_EN;
wire 			o_ACBD_EN;
wire 			o_ORIENT_EN;
wire 			o_CLA_EN;
wire 			o_BDS_EN;
wire 			o_ADAPT_EN;
wire 			o_SMAP_EN;
wire 			o_TX_CH_EN;

// SPA_RX_XD_REG
wire [15:0]	o_RX_XD;

// SPA_RX_YD_REG
wire [15:0]	o_RX_YD;

// SPA_TX_IMG_SIZE_REG
wire [15:0]	o_TX_XD;
wire [15:0]	o_TX_YD;

// SPA_RX_PADDING_VAL_REG
wire [7:0]	o_CH0_PADDING_VAL;
wire [7:0]	o_CH1_PADDING_VAL;
wire [7:0]	o_CH2_PADDING_VAL;

// SPA_VERSION_REG
wire [31:0]	o_VERSION;

// SPA_IRQ_ENABLE_REG
wire 			o_RX_BAND_START_EN;
wire 			o_RX_BAND_END_EN;
wire 			o_TX_BAND_START_EN;
wire 			o_BAND_END_EN;
wire 			o_PAGE_END_EN;
wire 			o_ABS_DETECT_DONE_EN;
wire 			o_ADAPT_TX_END_EN;
wire 			o_SMAP_TX_END_EN;
wire 			o_SW_RESET_DONE;
wire 			o_TX_ERR;
wire 			o_DTX_ADAPT_START_EN;
wire 			o_DTX_SMAP_START_EN;
wire 			o_DMA_TX_ADDR_ERR_CH0;
wire 			o_DMA_TX_ADDR_ERR_CH1;
wire 			o_DMA_TX_ADDR_ERR_CH2;
wire 			o_MAGD_DONE;
wire 			o_CLA_DONE;
wire 			o_ADAPT_TX_ADDR_ERR_EN;
wire 			o_SMAP_TX_ADDR_ERR_EN;
wire 			o_TBL_DMA_END;
wire 			o_TX_YD_ERR;
wire 			o_RX_ERR;
wire 			o_BDS_TX_END_EN;
wire 			o_DTX_BDS_START_EN;
wire 			o_BDS_TX_ADDR_ERR_EN;
wire 			o_ORI_DONE;
wire 			o_nABSD_DETECT_DONE;
wire 			o_ACBD_DETECT_DONE;
wire 			o_ACS_DONE;
wire 			o_VSD_DONE;
wire 			o_TX_CH_START_ERR_EN;
wire 			o_TX_PAGE_END;

// SPA_IRQ_PEND_REG
wire 			o_RX_BAND_START;
wire 			o_RX_BAND_END;
wire 			o_TX_BAND_START;
wire 			o_BAND_END;
wire 			o_PAGE_END;
wire 			o_ABSD_DETECT_END;
wire 			o_ADAPT_TX_END;
wire 			o_SMAP_TX_END;
wire 			o_DMA_STOP_DONE;
wire 			o_TX_ERR;
wire 			o_DTX_ADAPT_START_ERR;
wire 			o_DTX_SMAP_START_ERR;
wire 			o_DMA_TX_ADDR_ERR_CH0;
wire 			o_DMA_TX_ADDR_ERR_CH1;
wire 			o_DMA_TX_ADDR_ERR_CH2;
wire 			o_MAGD_DONE;
wire 			o_CLA_DONE;
wire 			o_ADAPT_TX_ADDR_ERR;
wire 			o_SMAP_TX_ADDR_ERR;
wire 			o_TBL_DMA_END;
wire 			o_TX_YD_ERR;
wire 			o_RX_ERR;
wire 			o_BDS_TX_END;
wire 			o_DTX_BDS_START_ERR;
wire 			o_BDS_TX_ADDR_ERR;
wire 			o_ORI_DONE;
wire 			o_nABSD_DETECT_DONE;
wire 			o_ACBD_DETECT_DONE;
wire 			o_ACS_DONE;
wire 			o_VSD_DONE;
wire 			o_TX_CH_START_ERR;
wire 			o_TX_PAGE_END;

// SPA_IRQ_SVC_CNT_REG
wire [31:0]	o_IRQ_SVC_CNT;

// SPA_RAM_SW_MODE_REG
wire 			o_RAM_SW_MODE;

// SPA_RAM_CS_REG
wire 			o_RAM_CS_00;
wire 			o_RAM_CS_01;
wire 			o_RAM_CS_02;
wire 			o_RAM_CS_03;
wire 			o_RAM_CS_04;
wire 			o_RAM_CS_05;
wire 			o_RAM_CS_06;
wire 			o_RAM_CS_07;
wire 			o_RAM_CS_08;
wire 			o_RAM_CS_09;
wire 			o_RAM_CS_10;
wire 			o_RAM_CS_11;
wire 			o_RAM_CS_12;
wire 			o_RAM_CS_13;
wire 			o_RAM_CS_14;
wire 			o_RAM_CS_15;
wire 			o_RAM_CS_16;
wire 			o_RAM_CS_17;
wire 			o_RAM_CS_18;
wire 			o_RAM_CS_19;
wire 			o_RAM_CS_20;
wire 			o_RAM_CS_21;
wire 			o_RAM_CS_22;
wire 			o_RAM_CS_23;
wire 			o_RAM_CS_24;

// SPA_RAM_DATA_REG
wire [31:0]	o_RAM_DATA;

// SPA_RAM_ADDR_REG
wire [31:0]	o_RAM_ADDR;

// SPA_CORE_BAND_DONE_REG
wire 			o_ALL_BAND_DONE;
wire 			o_SEG2_BAND_DONE;
wire 			o_SCC_BAND_DONE;
wire 			o_SEG1_BAND_DONE;
wire 			o_BSSB_BAND_DONE;
wire 			o_S1D_BAND_DONE;
wire 			o_RC1_BAND_DONE;
wire 			o_CIS_BAND_DONE;
wire 			o_VSD_BAND_DONE;

// SPA_CORE_PAGE_DONE_REG
wire 			o_ALL_PAGE_DONE;
wire 			o_SEG2_PAGE_DONE;
wire 			o_SCC_PAGE_DONE;
wire 			o_SEG1_PAGE_DONE;
wire 			o_BSSB_PAGE_DONE;
wire 			o_S1D_PAGE_END;
wire 			o_RC1_PAGE_DONE;
wire 			o_CIS_PAGE_DONE;
wire 			o_VSD_PAGE_DONE;

// SPA_TBL_RX_CNT_REG
wire [15:0]	o_TBL_RX_END_CNT;
wire [15:0]	o_TBL_RX_START_CNT;

// SPA_TBL_TX_CNT_REG
wire [15:0]	o_TBL_TX_END_CNT;
wire [15:0]	o_TBL_TX_START_CNT;

// SPA_TBL_END_STATUS1_REG
wire [29:0]	o_TBL_END_STATUS1;

// SPA_TBL_START_REG
wire 			o_TBL_START;
wire 			o_TBL_RW;

// SPA_TBL_ENABLE_REG
wire 			o_TBL_ENABLE00;
wire 			o_TBL_ENABLE01;
wire 			o_TBL_ENABLE02;
wire 			o_TBL_ENABLE03;
wire 			o_TBL_ENABLE04;
wire 			o_TBL_ENABLE05;
wire 			o_TBL_ENABLE06;
wire 			o_TBL_ENABLE07;
wire 			o_TBL_ENABLE08;
wire 			o_TBL_ENABLE09;
wire 			o_TBL_ENABLE10;
wire 			o_TBL_ENABLE11;
wire 			o_TBL_ENABLE12;
wire 			o_TBL_ENABLE13;
wire 			o_TBL_ENABLE14;
wire 			o_TBL_ENABLE15;
wire 			o_TBL_ENABLE16;
wire 			o_TBL_ENABLE17;
wire 			o_TBL_ENABLE18;
wire 			o_TBL_ENABLE19;
wire 			o_TBL_ENABLE20;
wire 			o_TBL_ENABLE21;
wire 			o_TBL_ENABLE22;
wire 			o_TBL_ENABLE23;
wire 			o_TBL_ENABLE24;

// SPA_TBL_ADDR_00_REG
wire [31:0]	o_TBL_ADDR_00;

// SPA_TBL_ADDR_01_REG
wire [31:0]	o_TBL_ADDR_01;

// SPA_TBL_ADDR_02_REG
wire [31:0]	o_TBL_ADDR_02;

// SPA_TBL_ADDR_03_REG
wire [31:0]	o_TBL_ADDR_03;

// SPA_TBL_ADDR_04_REG
wire [31:0]	o_TBL_ADDR_04;

// SPA_TBL_ADDR_05_REG
wire [31:0]	o_TBL_ADDR_05;

// SPA_TBL_ADDR_06_REG
wire [31:0]	o_TBL_ADDR_06;

// SPA_TBL_ADDR_07_REG
wire [31:0]	o_TBL_ADDR_07;

// SPA_TBL_ADDR_08_REG
wire [31:0]	o_TBL_ADDR_08;

// SPA_TBL_ADDR_09_REG
wire [31:0]	o_TBL_ADDR_09;

// SPA_TBL_ADDR_10_REG
wire [31:0]	o_TBL_ADDR_10;

// SPA_TBL_ADDR_11_REG
wire [31:0]	o_TBL_ADDR_11;

// SPA_TBL_ADDR_12_REG
wire [31:0]	o_TBL_ADDR_12;

// SPA_TBL_ADDR_13_REG
wire [31:0]	o_TBL_ADDR_13;

// SPA_TBL_ADDR_14_REG
wire [31:0]	o_TBL_ADDR_14;

// SPA_TBL_ADDR_15_REG
wire [31:0]	o_TBL_ADDR_15;

// SPA_TBL_ADDR_16_REG
wire [31:0]	o_TBL_ADDR_16;

// SPA_TBL_ADDR_17_REG
wire [31:0]	o_TBL_ADDR_17;

// SPA_TBL_ADDR_18_REG
wire [31:0]	o_TBL_ADDR_18;

// SPA_TBL_ADDR_19_REG
wire [31:0]	o_TBL_ADDR_19;

// SPA_TBL_ADDR_20_REG
wire [31:0]	o_TBL_ADDR_20;

// SPA_TBL_ADDR_21_REG
wire [31:0]	o_TBL_ADDR_21;

// SPA_TBL_ADDR_22_REG
wire [31:0]	o_TBL_ADDR_22;

// SPA_TBL_ADDR_23_REG
wire [31:0]	o_TBL_ADDR_23;

// SPA_TBL_ADDR_24_REG
wire [31:0]	o_TBL_ADDR_24;

// SPA_RX_START_REG
wire 			o_RX_START;

// SPA_RX_INCR_REG
wire [31:0]	o_RX_INCR;

// SPA_RX_CH0_PREV_ADDR_REG
wire [31:0]	o_RX_CH0_PREV_ADDR;

// SPA_RX_CH1_PREV_ADDR_REG
wire [31:0]	o_RX_CH1_PREV_ADDR;

// SPA_RX_CH2_PREV_ADDR_REG
wire [31:0]	o_RX_CH2_PREV_ADDR;

// SPA_RX_CH0_CURR_ADDR_REG
wire [31:0]	o_RX_CH0_CURR_ADDR;

// SPA_RX_CH1_CURR_ADDR_REG
wire [31:0]	o_RX_CH1_CURR_ADDR;

// SPA_RX_CH2_CURR_ADDR_REG
wire [31:0]	o_RX_CH2_CURR_ADDR;

// SPA_RX_CH0_START_ADDR_REG
wire [31:0]	o_RX_CH0_START_ADDR;

// SPA_RX_CH1_START_ADDR_REG
wire [31:0]	o_RX_CH1_START_ADDR;

// SPA_RX_CH2_START_ADDR_REG
wire [31:0]	o_RX_CH2_START_ADDR;

// SPA_RX_BLK_CNT_REG
wire [7:0]	o_RX_BLK_CNT;
wire [7:0]	o_RX_BAND_CNT;

// SPA_RX_STATUS_REG
wire 			o_BUSY;

// SPA_RX_CH0_CUR_ADDR_REG
wire [31:0]	o_RX_CH0_CUR_ADDR;

// SPA_RX_CH1_CUR_ADDR_REG
wire [31:0]	o_RX_CH1_CUR_ADDR;

// SPA_RX_CH2_CUR_ADDR_REG
wire [31:0]	o_RX_CH2_CUR_ADDR;

// SPA_RX_CH0_SVC_CNT_REG
wire [31:0]	o_RX_CH0_SVC_CNT;

// SPA_RX_CH1_SVC_CNT_REG
wire [31:0]	o_RX_CH1_SVC_CNT;

// SPA_RX_CH2_SVC_CNT_REG
wire [31:0]	o_RX_CH2_SVC_CNT;

// SPA_RX_DMA_CON_REG
wire [2:0]	o_RX_ISSUE_CAP;
wire [3:0]	o_RX_ARCACHE;
wire 			o_RX_ARPROT0;
wire 			o_RX_ARPROT1;
wire 			o_RX_ARPROT2;
wire [1:0]	o_RX_SWAP_EN;

// SPA_RX_ERR_STATUS_REG
wire 			o_RX_RID_ERR_0;
wire 			o_RX_RID_ERR_1;
wire 			o_RX_RID_ERR_2;
wire 			o_RX_RID_ERR_3;
wire 			o_RX_RRESP_ERR_0;
wire 			o_RX_RRESP_ERR_1;

// SPA_TX_START_REG
wire 			o_TX_START;

// SPA_TX_DMA_CON_REG
wire [4:0]	o_MAX_WISSUE;
wire 			o_TX_INT_CHECK;
wire 			o_ALPHA_CH_ON;
wire 			o_ARB_MODE;
wire [3:0]	o_TX_AWCACHE;
wire 			o_TX_AWPROT0;
wire 			o_TX_AWPROT1;
wire 			o_TX_AWPROT2;
wire [1:0]	o_TX_SWAP_EN;

// SPA_TX_BAND_NUM_REG
wire [7:0]	o_TX_BAND_NUM;

// SPA_TX_DATA_INCR_REG
wire [15:0]	o_TX_DATA_INCR;

// SPA_TX_CH0_START_ADDR_REG
wire [31:0]	o_TX_CH0_START_ADDR;

// SPA_TX_CH1_START_ADDR_REG
wire [31:0]	o_TX_CH1_START_ADDR;

// SPA_TX_CH2_START_ADDR_REG
wire [31:0]	o_TX_CH2_START_ADDR;

// SPA_TX_BLK_CNT_REG
wire [7:0]	o_TX_BLK_CNT;
wire [7:0]	o_TX_BAND_CNT;

// SPA_TX_STATUS_REG
wire 			o_BUSY;

// SPA_TX_ADDR_CH0_MAX_REG
wire [31:0]	o_TX_ADDR_CH0_MAX;

// SPA_TX_ADDR_CH0_MIN_REG
wire [31:0]	o_TX_ADDR_CH0_MIN;

// SPA_TX_ADDR_CH1_MAX_REG
wire [31:0]	o_TX_ADDR_CH1_MAX;

// SPA_TX_ADDR_CH1_MIN_REG
wire [31:0]	o_TX_ADDR_CH1_MIN;

// SPA_TX_ADDR_CH2_MAX_REG
wire [31:0]	o_TX_ADDR_CH2_MAX;

// SPA_TX_ADDR_CH2_MIN_REG
wire [31:0]	o_TX_ADDR_CH2_MIN;

// SPA_TX_CH0_CUR_ADDR_REG
wire [31:0]	o_TX_CH0_CUR_ADDR;

// SPA_TX_CH1_CUR_ADDR_REG
wire [31:0]	o_TX_CH1_CUR_ADDR;

// SPA_TX_CH2_CUR_ADDR_REG
wire [31:0]	o_TX_CH2_CUR_ADDR;

// SPA_TX_CH0_SVC_CNT_REG
wire [31:0]	o_TX_CH0_SVC_CNT;

// SPA_TX_CH1_SVC_CNT_REG
wire [31:0]	o_TX_CH1_SVC_CNT;

// SPA_TX_CH2_SVC_CNT_REG
wire [31:0]	o_TX_CH2_SVC_CNT;

// SPA_TX_ERR_STATUS_REG
wire 			o_TX_ERR_ID_0;
wire 			o_TX_ERR_ID_1;
wire 			o_TX_ERR_ID_2;
wire 			o_TX_ERR_ID_3;
wire 			o_TX_ERR_RESP_0;
wire 			o_TX_ERR_RESP_1;

// SPA_ADAPT_DMA_CON_REG
wire [1:0]	o_ADAPT_SMAP_INT_CHECK;
wire [7:0]	o_ADAPT_OUT_BANDS;

// SPA_ADAPT_DMA_ADDR_REG
wire [31:0]	o_ADAPT_ADDR;

// SPA_ADAPT_DMA_ADDR_INCR_REG
wire [31:0]	o_ADAPT_ADDR_INCR;

// SPA_ADAPT_DMA_STATUS_REG
wire 			o_ADAPT_TX_BUSY;
wire [15:0]	o_ADAPT_OUT_LINES;

// SPA_ADAPT_TX_ADDR_MAX_REG
wire [31:0]	o_ADAPT_TX_ADDR_MAX;

// SPA_ADAPT_TX_ADDR_MIN_REG
wire [31:0]	o_ADAPT_TX_ADDR_MIN;

// SPA_ADAPT_TX_CUR_ADDR_REG
wire [31:0]	o_ADAPT_TX_CUR_ADDR;

// SPA_ADAPT_TX_SVC_CNT_REG
wire [31:0]	o_ADAPT_TX_SVC_CNT;

// SPA_ADAPT_START_REG
wire 			o_ADAPT_START;

// SPA_ADAPT_BAND_CNT_REG
wire [7:0]	o_ADAPT_BAND_CNT;

// SPA_SMAP_DMA_CON_REG
wire [7:0]	o_SMAP_OUT_BANDS;

// SPA_SMAP_DMA_ADDR_REG
wire [31:0]	o_SMAP_ADDR;

// SPA_SMAP_DMA_ADDR_INCR_REG
wire [31:0]	o_SMAP_ADDR_INCR;

// SPA_SMAP_DMA_STATUS_REG
wire 			o_SMAP_TX_BUSY;
wire [15:0]	o_SMAP_OUT_LINES;

// SPA_SMAP_TX_ADDR_MAX_REG
wire [31:0]	o_SMAP_TX_ADDR_MAX;

// SPA_SMAP_TX_ADDR_MIN_REG
wire [31:0]	o_SMAP_TX_ADDR_MIN;

// SPA_SMAP_TX_CUR_ADDR_REG
wire [31:0]	o_SMAP_TX_CUR_ADDR;

// SPA_SMAP_TX_SVC_CNT_REG
wire [31:0]	o_SMAP_TX_SVC_CNT;

// SPA_SMAP_START_REG
wire 			o_SMAP_START;

// SPA_SMAP_BAND_CNT_REG
wire [7:0]	o_SMAP_BAND_CNT;

// SPA_BDS_DMA_CON_REG
wire [7:0]	o_BDS_OUT_BANDS;

// SPA_BDS_DMA_ADDR_REG
wire [31:0]	o_BDS_ADDR;

// SPA_BDS_DMA_ADDR_INCR_REG
wire [31:0]	o_BDS_ADDR_INCR;

// SPA_BDS_DMA_STATUS_REG
wire 			o_BDS_TX_BUSY;
wire [15:0]	o_BDS_OUT_LINES;

// SPA_BDS_TX_ADDR_MAX_REG
wire [31:0]	o_BDS_TX_ADDR_MAX;

// SPA_BDS_TX_ADDR_MIN_REG
wire [31:0]	o_BDS_TX_ADDR_MIN;

// SPA_BDS_TX_CUR_ADDR_REG
wire [31:0]	o_BDS_TX_CUR_ADDR;

// SPA_BDS_TX_SVC_CNT_REG
wire [31:0]	o_BDS_TX_SVC_CNT;

// SPA_BDS_START_REG
wire 			o_BDS_START;

// SPA_BDS_BAND_CNT_REG
wire [7:0]	o_BDS_BAND_CNT;

// SPA_RX_CH0_CRC_REG
wire [31:0]	o_RX_CH0_CRC;

// SPA_RX_CH1_CRC_REG
wire [31:0]	o_RX_CH1_CRC;

// SPA_RX_CH2_CRC_REG
wire [31:0]	o_RX_CH2_CRC;

// SPA_RC1_CH0_CRC_REG
wire [31:0]	o_RC1_CH0_CRC;

// SPA_RC1_CH1_CRC_REG
wire [31:0]	o_RC1_CH1_CRC;

// SPA_RC1_CH2_CRC_REG
wire [31:0]	o_RC1_CH2_CRC;

// SPA_RC1_CH0_CRC_DEBUG_REG
wire [31:0]	o_RC1_CH0_CRC_DEBUG;

// SPA_RC1_CH1_CRC_DEBUG_REG
wire [31:0]	o_RC1_CH1_CRC_DEBUG;

// SPA_RC1_CH2_CRC_DEBUG_REG
wire [31:0]	o_RC1_CH2_CRC_DEBUG;

// SPA_S1D_CH0_CRC_REG
wire [31:0]	o_S1D_CH0_CRC;

// SPA_S1D_CH1_CRC_REG
wire [31:0]	o_S1D_CH1_CRC;

// SPA_S1D_CH2_CRC_REG
wire [31:0]	o_S1D_CH2_CRC;

// SPA_SEG1_CH0_CRC_REG
wire [31:0]	o_SEG1_CH0_CRC;

// SPA_SEG1_CH1_CRC_REG
wire [31:0]	o_SEG1_CH1_CRC;

// SPA_SEG1_CH2_CRC_REG
wire [31:0]	o_SEG1_CH2_CRC;

// SPA_SEG1_ATT_CRC_REG
wire [31:0]	o_SEG1_ATT_CRC;

// SPA_SCC_CH0_CRC_REG
wire [31:0]	o_SCC_CH0_CRC;

// SPA_SCC_CH1_CRC_REG
wire [31:0]	o_SCC_CH1_CRC;

// SPA_SCC_CH2_CRC_REG
wire [31:0]	o_SCC_CH2_CRC;

// SPA_SCC_ATT_CRC_REG
wire [31:0]	o_SCC_ATT_CRC;

// SPA_SEG2_CH0_CRC_REG
wire [31:0]	o_SEG2_CH0_CRC;

// SPA_SEG2_CH1_CRC_REG
wire [31:0]	o_SEG2_CH1_CRC;

// SPA_SEG2_CH2_CRC_REG
wire [31:0]	o_SEG2_CH2_CRC;

// SPA_SEG2_ATT_CRC_REG
wire [31:0]	o_SEG2_ATT_CRC;

// SPA_BSSA_CH0_CRC_REG
wire [31:0]	o_BSSA_CH0_CRC;

// SPA_BSSA_CH1_CRC_REG
wire [31:0]	o_BSSA_CH1_CRC;

// SPA_BSSA_CH2_CRC_REG
wire [31:0]	o_BSSA_CH2_CRC;

// SPA_DMATX_CH0_CRC_REG
wire [31:0]	o_DMATX_CH0_CRC;

// SPA_DMATX_CH1_CRC_REG
wire [31:0]	o_DMATX_CH1_CRC;

// SPA_DMATX_CH2_CRC_REG
wire [31:0]	o_DMATX_CH2_CRC;

// SPA_RC2_CH0_CRC_REG
wire [31:0]	o_RC2_CH0_CRC;

// SPA_RC2_CH1_CRC_REG
wire [31:0]	o_RC2_CH1_CRC;

// SPA_RC2_CH2_CRC_REG
wire [31:0]	o_RC2_CH2_CRC;

// SPA_ADAPT_CRC_REG
wire [31:0]	o_ADAPT_CRC;

// SPA_SMAP_CRC_REG
wire [31:0]	o_SMAP_CRC;

// SPA_BDS_CRC_REG
wire [31:0]	o_BDS_CRC;

// SPA_VSD_CH0_CRC_REG
wire [31:0]	o_VSD_CH0_CRC;

// SPA_VSD_CH1_CRC_REG
wire [31:0]	o_VSD_CH1_CRC;

// SPA_VSD_CH2_CRC_REG
wire [31:0]	o_VSD_CH2_CRC;

// SPA_CIS_CH0_CRC_REG
wire [31:0]	o_CIS_CH0_CRC;

// SPA_CIS_CH1_CRC_REG
wire [31:0]	o_CIS_CH1_CRC;

// SPA_CIS_CH2_CRC_REG
wire [31:0]	o_CIS_CH2_CRC;

// SPA_BSSB_CH0_CRC_REG
wire [31:0]	o_BSSB_CH0_CRC;

// SPA_BSSB_CH1_CRC_REG
wire [31:0]	o_BSSB_CH1_CRC;

// SPA_BSSB_CH2_CRC_REG
wire [31:0]	o_BSSB_CH2_CRC;

// SPA_S1D_DEBUG_FLAG_REG
wire [7:0]	o_DEBUG_FLAG;

// SPA_SCC_DEBUG_FLAG_REG
wire [7:0]	o_DEBUG_FLAG;

// SPA_BDS_DEBUG_FLAG_REG
wire [7:0]	o_DEBUG_FLAG;

// SPA_BSSA_DEBUG_FLAG_REG
wire [7:0]	o_BSSA_DEBUG_FLAG;

// SPA_BSSB_DEBUG_FLAG_REG
wire [7:0]	o_BSSB_DEBUG_FLAG;

// SPA_VSD_A_REG
wire [1:0]	o_VSC_DEBUG;
wire 			o_VSC_CUR_MEM_INIT;

// SPA_VSD_B_REG
wire [7:0]	o_VSD_K_DEPTH_MIN;
wire [3:0]	o_VSD_TOP_BAND;

// SPA_VSD_C_REG
wire [7:0]	o_VSD_K_DEPTH_MAX_TOP;
wire [7:0]	o_VSD_K_DEPTH_MIN_TOP;
wire [7:0]	o_VSD_K_DEPTH_MAX;
wire [7:0]	o_VSD_K_DEPTH_MID;

// SPA_VSC_D_REG
wire [7:0]	o_VSD_W_DEPTH_MAX;
wire [7:0]	o_VSD_W_DEPTH_MID;
wire [7:0]	o_VSD_W_DEPTH_MIN;
wire [6:0]	o_VSD_K_DEPTH_COND;

// SPA_VSD_E_REG
wire [7:0]	o_VSD_THICKNESS_TH;
wire [7:0]	o_VSD_W_DEPTH_COND;
wire [7:0]	o_VSD_W_DEPTH_MAX_TOP;
wire [7:0]	o_VSD_W_DEPTH_MIN_TOP;

// SPA_VSD_F_REG
wire [6:0]	o_VSD_CHROMA_TH2_TOP;
wire [6:0]	o_VSD_CHROMA_TH1_TOP;
wire [6:0]	o_VSD_CHROMA_TH2;
wire [6:0]	o_VSD_CHROMA_TH1;

// SPA_VSD_G_REG
wire [7:0]	o_VSD_FREQUENCY_TH;
wire [7:0]	o_VSD_CONTINUITY_TH;

// SPA_VSD_H_REG
wire [12:0]	o_VSD_REFINE_TH;
wire 			o_VSD_REFINE_EN;

// SPA_CIS_SUB_COEF_R_REG
wire [8:0]	o_CIS_SUB_COEF_R1;
wire [8:0]	o_CIS_SUB_COEF_R2;

// SPA_CIS_SUB_COEF_G_REG
wire [8:0]	o_CIS_SUB_COEF_G0;
wire [8:0]	o_CIS_SUB_COEF_G1;
wire [8:0]	o_CIS_SUB_COEF_G2;

// SPA_CIS_SUB_COEF_B_REG
wire [8:0]	o_CIS_SUB_COEF_B0;
wire [8:0]	o_CIS_SUB_COEF_B1;

// SPA_RC1_SHIFT_VAL_REG
wire [31:0]	o_RC1_SHIFT_VAL;

// SPA_RC1_SHIFT_OFST_REG
wire [31:0]	o_RC1_SHIFT_OFST;

// SPA_RC1_LOOP_REG
wire [2:0]	o_RC1_LOOP_Y;
wire [2:0]	o_RC1_LOOP_X;

// SPA_RC1_X_COF_00_01_REG
wire [11:0]	o_RC1_X_COF_01;
wire [11:0]	o_RC1_X_COF_00;

// SPA_RC1_X_COF_02_03_REG
wire [11:0]	o_RC1_X_COF_03;
wire [11:0]	o_RC1_X_COF_02;

// SPA_RC1_X_COF_10_11_REG
wire [11:0]	o_RC1_X_COF_11;
wire [11:0]	o_RC1_X_COF_10;

// SPA_RC1_X_COF_12_13_REG
wire [11:0]	o_RC1_X_COF_13;
wire [11:0]	o_RC1_X_COF_12;

// SPA_RC1_X_COF_20_21_REG
wire [11:0]	o_RC1_X_COF_21;
wire [11:0]	o_RC1_X_COF_20;

// SPA_RC1_X_COF_22_23_REG
wire [11:0]	o_RC1_X_COF_23;
wire [11:0]	o_RC1_X_COF_22;

// SPA_RC1_X_COF_30_31_REG
wire [11:0]	o_RC1_X_COF_31;
wire [11:0]	o_RC1_X_COF_30;

// SPA_RC1_X_COF_32_33_REG
wire [11:0]	o_RC1_X_COF_33;
wire [11:0]	o_RC1_X_COF_32;

// SPA_RC1_Y_COF_00_01_REG
wire [11:0]	o_RC1_Y_COF_01;
wire [11:0]	o_RC1_Y_COF_00;

// SPA_RC1_Y_COF_02_03_REG
wire [11:0]	o_RC1_Y_COF_03;
wire [11:0]	o_RC1_Y_COF_02;

// SPA_RC1_Y_COF_10_11_REG
wire [11:0]	o_RC1_Y_COF_11;
wire [11:0]	o_RC1_Y_COF_10;

// SPA_RC1_Y_COF_12_13_REG
wire [11:0]	o_RC1_Y_COF_13;
wire [11:0]	o_RC1_Y_COF_12;

// SPA_RC1_Y_COF_20_21_REG
wire [11:0]	o_RC1_Y_COF_21;
wire [11:0]	o_RC1_Y_COF_20;

// SPA_RC1_Y_COF_22_23_REG
wire [11:0]	o_RC1_Y_COF_23;
wire [11:0]	o_RC1_Y_COF_22;

// SPA_RC1_Y_COF_30_31_REG
wire [11:0]	o_RC1_Y_COF_31;
wire [11:0]	o_RC1_Y_COF_30;

// SPA_RC1_Y_COF_32_33_REG
wire [11:0]	o_RC1_Y_COF_33;
wire [11:0]	o_RC1_Y_COF_32;

// SPA_SEG1_CON_REG
wire 			o_Enable_Y_text;

// SPA_SEG1_HVLINE_TH_REG
wire [7:0]	o_HVline_level_th;
wire [7:0]	o_HVline_minmaxdiff_th2;
wire [7:0]	o_HVline_minmaxdiff_th1;
wire [7:0]	o_HVline_diff_th;

// SPA_SEG1_EDGE_TH_REG
wire [7:0]	o_Highfreq_th;
wire [7:0]	o_Lowfreq_th2;
wire [7:0]	o_Lowfreq_th;

// SPA_SEG1_LINE_TH_REG
wire [7:0]	o_Uni_edge_th;
wire [7:0]	o_Uni_edge_th2;
wire [7:0]	o_Uni_lowfreq_th;
wire [7:0]	o_Uni_highfreq_th;

// SPA_SEG1_ZC_TH_REG
wire [2:0]	o_ZC_scaling_shift;
wire [7:0]	o_ZC_edge_th;
wire [7:0]	o_White_th;

// SPA_SCC_CON_REG
wire 			o_SCC_LATTICE_STEP;
wire [1:0]	o_SCC_FLOATING_MODE;

// SPA_SEG2_CON_REG
wire 			o_Enable_FAR_9x9;
wire 			o_Enable_uniformtext;
wire 			o_Enable_contoneImage;

// SPA_SEG2_PARAM1_REG
wire [6:0]	o_edgecount_th;
wire [1:0]	o_text_index;
wire [7:0]	o_FG_level_th;

// SPA_SEG2_PARAM2_REG
wire [6:0]	o_zccount_th;
wire [6:0]	o_uniformlinecount_th;
wire [6:0]	o_halftonecount_th;
wire [6:0]	o_bgcnt_th;

// SPA_SEG2_FAR_CHROMA_PARAM_REG
wire [3:0]	o_FAR_chroma_th2_shiftcoef;
wire [7:0]	o_FAR_chroma_th;

// SPA_SEG2_FAR_Y_PARAM_REG
wire [3:0]	o_FAR_Y_th3_shiftcoef2;
wire [3:0]	o_FAR_Y_th2_shiftcoef1;
wire [7:0]	o_FAR_Y_th;

// SPA_SEG2_NEUT_CHROMA_PARAM_REG
wire [3:0]	o_Neut_chroma_th2_shiftcoef;
wire [7:0]	o_Neut_chroma_th;

// SPA_PAGE_EN_REG
wire 			o_PAGE_EN;

// SPA_BLOCK_SIZE_REG
wire [6:0]	o_BLOCK_SIZE_H;
wire [5:0]	o_BLOCK_SIZE_W;

// SPA_AREA_SIZE_REG
wire [13:0]	o_AREA_SIZE_H;
wire [13:0]	o_AREA_SIZE_W;

// SPA_CHAR_LENGTH_THICK_V_REG
wire [7:0]	o_CHAR_THICK_MAX_V;
wire [7:0]	o_CHAR_THICK_MIN_V;
wire [7:0]	o_CHAR_LENGTH_MIN_V;

// SPA_CHAR_LENGTH_THICK_H_REG
wire [7:0]	o_CHAR_THICK_MAX_H;
wire [7:0]	o_CHAR_THICK_MIN_H;
wire [7:0]	o_CHAR_LENGTH_MIN_H;

// SPA_DIFF_CHANGE_V_REG
wire [6:0]	o_CHANGE_CNT_TH_V;
wire [6:0]	o_CHANGE_RATIO_TH_V;
wire [3:0]	o_DIFF_SHIFT2_V;
wire [3:0]	o_DIFF_SHIFT1_V;

// SPA_DIFF_CHANGE_H_REG
wire [6:0]	o_CHANGE_CNT_TH_H;
wire [6:0]	o_CHANGE_RATIO_TH_H;
wire [3:0]	o_DIFF_SHIFT2_H;
wire [3:0]	o_DIFF_SHIFT1_H;

// SPA_DIR_TH1_REG
wire [7:0]	o_DIR_MAX_LOW_TH;
wire [7:0]	o_DIR_TH;
wire [7:0]	o_DIR_MAX_TH;
wire [7:0]	o_DIR_MIN_TH;

// SPA_DIR_TH2_REG
wire [7:0]	o_DIR_DIFF_TH3;
wire [7:0]	o_DIR_DIFF_TH2;
wire [7:0]	o_DIR_DIFF_TH1;
wire [7:0]	o_DIR_MAX_HIGH_TH;

// SPA_OUT_AREA_OFFSET1_REG
wire [10:0]	o_OUT_AREA_OFFSET_W;
wire [10:0]	o_OUT_AREA_OFFSET_H;

// SPA_OUT_AREA_OFFSET2_REG
wire [10:0]	o_OUT_AREA_OFFSET;

// SPA_LINE_SPACE_REG
wire [7:0]	o_LINE_SPACE_V;
wire [7:0]	o_LINE_SPACE_H;

// SPA_TEXT_FLAG_REG
wire 			o_TEXT_FLAG1;
wire 			o_TEXT_FLAG2;
wire 			o_TEXT_FLAG3;

// SPA_TEXT_AREA1_W_REG
wire [13:0]	o_TEXT_AREA1_EN_W;
wire [13:0]	o_TEXT_AREA1_ST_W;

// SPA_TEXT_AREA1_H_REG
wire [13:0]	o_TEXT_AREA1_EN_H;
wire [13:0]	o_TEXT_AREA1_ST_H;

// SPA_TEXT_AREA2_W_REG
wire [13:0]	o_TEXT_AREA2_EN_W;
wire [13:0]	o_TEXT_AREA2_ST_W;

// SPA_TEXT_AREA2_H_REG
wire [13:0]	o_TEXT_AREA2_EN_H;
wire [13:0]	o_TEXT_AREA2_ST_H;

// SPA_TEXT_AREA3_W_REG
wire [13:0]	o_TEXT_AREA3_EN_W;
wire [13:0]	o_TEXT_AREA3_ST_W;

// SPA_TEXT_AREA3_H_REG
wire [13:0]	o_TEXT_AREA3_EN_H;
wire [13:0]	o_TEXT_AREA3_ST_H;

// SPA_ABS_PRE_SCAN_LINE_REG
wire [13:0]	o_ABS_PRE_SCAN_LINE;

// SPA_ABS_PRE_SCAN_IWIN_REG
wire [13:0]	o_ABS_IWIN_END;
wire [13:0]	o_ABS_IWIN_START;

// SPA_ABS_TH_REG
wire [7:0]	o_ABS_WHITE_TH;
wire [7:0]	o_ABS_BLACK_TH;
wire 			o_ABS_NOISE_REM;

// SPA_ABS_VALID_PERCENTAGE_REG
wire [6:0]	o_ABS_VALID_PERCENTAGE;

// SPA_ABS_BK_STD_TH_REG
wire [7:0]	o_ABS_BK_STD_TH;

// SPA_ABS_SIGMA_REG
wire [6:0]	o_ABS_PERCENTAGE;
wire [5:0]	o_ABS_DETECT_SIGMA;
wire [5:0]	o_ABS_CONFID_SIGMA;

// SPA_ABS_BG_BACKUP_REG
wire 			o_ABS_BG_BACKUP_EN;
wire [7:0]	o_ABS_BG_BACKUP_TH;

// SPA_ABS_COLOR_EXCEPTION_REG
wire 			o_ABS_COLOR_EXCEPTION;
wire [7:0]	o_ABS_COLOR_TH2;
wire [7:0]	o_ABS_COLOR_TH1;

// SPA_ABS_TOP_BG_LEVEL_REG
wire [7:0]	o_ABS_TOP_BG_LEVEL;
wire [7:0]	o_ABS_MAX_CB;
wire [7:0]	o_ABS_MAX_CR;

// SPA_ABS_TOP_PEAK_CONFIDENCE_REG
wire [6:0]	o_ABS_TOP_PEAK_CONFIDENCE;
wire 			o_ABS_SUCCESS;

// SPA_ABS_PRE_SCAN_START_REG
wire [13:0]	o_ABS_PRE_SCAN_START;

// SPA_MAD_PRE_SCAN_LINE_REG
wire [13:0]	o_MAD_PRE_SCAN_LINE;

// SPA_MAD_PRE_SCAN_IWIN_REG
wire [13:0]	o_MAD_IWIN_END;
wire [13:0]	o_MAD_IWIN_START;

// SPA_MAD_TH_REG
wire [7:0]	o_MAD_WHITE_TH;
wire [7:0]	o_MAD_BLACK_TH;
wire 			o_MAD_NOISE_REM;

// SPA_MAD_VALID_PERCENTAGE_REG
wire [6:0]	o_MAD_VALID_PERCENTAGE;

// SPA_MAD_BK_STD_TH_REG
wire [7:0]	o_MAD_BK_STD_TH;

// SPA_MAD_SIGMA_REG
wire [6:0]	o_MAD_PERCENTAGE;
wire [5:0]	o_MAD_DETECT_SIGMA;
wire [5:0]	o_MAD_CONFID_SIGMA;

// SPA_MAD_BG_BACKUP_REG
wire 			o_MAD_BG_BACKUP_EN;
wire [7:0]	o_MAD_BG_BACKUP_TH;

// SPA_MAD_COLOR_EXCEPTION_REG
wire 			o_MAD_COLOR_EXCEPTION;
wire [7:0]	o_MAD_COLOR_TH2;
wire [7:0]	o_MAD_COLOR_TH1;

// SPA_MAD_TOP_BG_LEVEL_REG
wire [7:0]	o_MAD_TOP_BG_LEVEL;
wire [7:0]	o_MAD_MAX_CB;
wire [7:0]	o_MAD_MAX_CR;

// SPA_MAD_TOP_PEAK_CONFIDENCE_REG
wire [6:0]	o_MAD_TOP_PEAK_CONFIDENCE;
wire 			o_MAD_SUCCESS;

// SPA_MAD_PRE_SCAN_START_REG
wire [13:0]	o_MAD_PRE_SCAN_START;

// SPA_NEWABSD_SCAN_RANGE_REG
wire [13:0]	o_ABS_PRE_SCAN_LINE;
wire [13:0]	o_ABS_PRE_SCAN_START;

// SPA_NEWABSD_PRE_SCAN_IWIN_REG
wire [13:0]	o_ABS_IWIN_END;
wire [13:0]	o_ABS_IWIN_START;

// SPA_NEWABSD_CHOMA_TH_REG
wire [7:0]	o_COLOR_RIDGE_TH;
wire [7:0]	o_GRAY_RIDGE_TH;
wire [7:0]	o_CHROMA_TH;

// SPA_NEWABSD_LIMIT_REG
wire [7:0]	o_RIGHT_LIMIT;
wire [7:0]	o_LEFT_LIMIT;

// SPA_NEWABSD_HISTO_PEAK_REG
wire [7:0]	o_HISTO_COLOR_PEAK;
wire [7:0]	o_HISTO_GRAY_PEAK;

// SPA_NEWABSD_HISTO_LEFT_REG
wire [7:0]	o_HISTO_COLOR_LEFT;
wire [7:0]	o_HISTO_GRAY_LEFT;

// SPA_NEWABSD_HISTO_RIGHT_REG
wire [7:0]	o_HISTO_COLOR_RIGHT;
wire [7:0]	o_HISTO_GRAY_RIGHT;

// SPA_NEWABSD_RESULT_REG
wire 			o_PAPER_COLOR_FLAG;
wire [3:0]	o_MEM_READ_STAT;

// SPA_CLA_CON1_REG
wire [7:0]	o_HLCOUNT_MAXTH1;
wire [7:0]	o_HLCOUNT_MAXTH2;
wire [7:0]	o_HLCOUNT_DIFFTH1;
wire [7:0]	o_HLCOUNT_DIFFTH2;

// SPA_CLA_CON2_REG
wire [7:0]	o_HLGRAY_DIFFTH;
wire [10:0]	o_ContentsSizeTh;

// SPA_TOTAL_BIN_CNT_REG
wire [31:0]	o_TOTAL_BIN_CNT;

// SPA_HL_RANGE2_REG
wire [31:0]	o_HL_RANGE2;

// SPA_HL_COLOR2_REG
wire [31:0]	o_HL_COLOR2;

// SPA_BTEXT_CNT_REG
wire [31:0]	o_BTEXT_CNT;

// SPA_TEXT_CNT_REG
wire [31:0]	o_TEXT_CNT;

// SPA_HT_CNT_REG
wire [31:0]	o_HT_CNT;

// SPA_EDGE_CNT_REG
wire [31:0]	o_EDGE_CNT;

// SPA_WHITE_CNT_REG
wire [31:0]	o_WHITE_CNT;

// SPA_CONTONE_CNT_REG
wire [31:0]	o_CONTONE_CNT;

// SPA_WHITE_WO_TEXT_CNT_REG
wire [31:0]	o_WHITE_WO_TEXT_CNT;

// SPA_WHITE_WO_HT_TEXT_CNT_REG
wire [31:0]	o_WHITE_WO_HT_TEXT_CNT;

// SPA_CONTENT_SIZE_REG
wire [13:0]	o_ContentSizeW;
wire [13:0]	o_ContentSizeH;

// SPA_MARGIN1_REG
wire [15:0]	o_BOTTOM_MARGIN;
wire [15:0]	o_TOP_MARGIN;

// SPA_MARGIN2_REG
wire [15:0]	o_RIGHT_MARGIN;
wire [15:0]	o_LEFT_MARGIN;

// SPA_TH1_REG
wire [9:0]	o_HIGH_TH_MAX1;
wire [9:0]	o_LOW_TH_MIN1;

// SPA_TH2_REG
wire [9:0]	o_HIGH_TH_MAX2;
wire [9:0]	o_LOW_TH_MIN2;

// SPA_HLIGHT_SEL_EN_REG
wire 			o_HLIGHT_SEL_EN;

// SPA_AVG_TH_REG
wire [7:0]	o_AVG_TH;

// SPA_HISTO_WIN_VAL_REG
wire [7:0]	o_HISTCR_WIN_VAL_HIGH;
wire [7:0]	o_HISTCR_WIN_VAL_LOW;
wire [7:0]	o_HISTCB_WIN_VAL_HIGH;
wire [7:0]	o_HISTCB_WIN_VAL_LOW;

// SPA_RATIO_TH_REG
wire [9:0]	o_RATIO_TH_CR;
wire [9:0]	o_RATIO_TH_CB;

// SPA_LIMIT_TH_REG
wire [7:0]	o_LIMIT_TH_MAX;
wire [7:0]	o_LIMIT_TH_MIN;

// SPA_BRIGHT_STRETCH_OFFSET_REG
wire [7:0]	o_STRETCH_OFFSET;
wire [7:0]	o_BRIGHT_TH;
wire 			o_BRIGHT_EN;

// SPA_ACB_TH1_REG
wire [5:0]	o_ACB_GRAY_RIDGE;
wire [9:0]	o_ACB_PEAK_RATIO_TH;

// SPA_ACB_TH2_REG
wire [7:0]	o_ACB_RIGHT_LIMIT;
wire [7:0]	o_ACB_LEFT_LIMIT;

// SPA_OBJECT_TH_REG
wire [3:0]	o_OBJ_AREA_TH;
wire [7:0]	o_OBJ_INDEX_TH;

// SPA_ACBD_RESULT1_REG
wire [7:0]	o_BRIGHT_OFFSET;
wire [7:0]	o_FINAL_MAX;
wire [7:0]	o_FINAL_MIN;

// SPA_ACBD_RESULT2_REG
wire [7:0]	o_PEAK_ID;
wire [7:0]	o_ANKER_POINT;
wire [3:0]	o_MEM_READ_STAT;

// SPA_ACBD_ACSREFON_REG
wire 			o_ACS_REF_ON;

// SPA_ACS_CON_REG
wire 			o_ACS_SATAUTO_EN;
wire 			o_ACS_HALFAUTO_EN;
wire 			o_ACS_AUTO_EN;
wire 			o_ACS_MARK_EN;
wire 			o_ACS_HISTO_EN;
wire 			o_ACS_RANGE_REAL_IMAGE;
wire [7:0]	o_ACS_BLOCK_SIZE_X;
wire [7:0]	o_ACS_BLOCK_SIZE_Y;
wire [7:0]	o_ACS_WHITE_TH;

// SPA_ACS_MARK_POS_UPPER_REG
wire [16:0]	o_ACS_MARK_UPPER;

// SPA_ACS_MARK_POS_LOWER_REG
wire [16:0]	o_ACS_MARK_LOWER;

// SPA_ACS_MARK_POS_LEFT_REG
wire [16:0]	o_ACS_MARK_LEFT;

// SPA_ACS_MARK_POS_RIGHT_REG
wire [16:0]	o_ACS_MARK_RIGHT;

// SPA_ACS_SATURATION_TH_REG
wire [7:0]	o_ACS_SATURATION_BLOCK_TH;
wire [7:0]	o_ACS_SATURATION_PXL_TH;

// SPA_ACS_HT_TH_REG
wire [14:0]	o_ACS_PUREHALFTONE_CNT;
wire [14:0]	o_ACS_HALFTONE_CNT;

// SPA_ACS_CBMAX1_REG
wire [7:0]	o_ACS_CB_MAX_03;
wire [7:0]	o_ACS_CB_MAX_02;
wire [7:0]	o_ACS_CB_MAX_01;
wire [7:0]	o_ACS_CB_MAX_00;

// SPA_ACS_CBMAX2_REG
wire [7:0]	o_ACS_CB_MAX_07;
wire [7:0]	o_ACS_CB_MAX_06;
wire [7:0]	o_ACS_CB_MAX_05;
wire [7:0]	o_ACS_CB_MAX_04;

// SPA_ACS_CBMAX3_REG
wire [7:0]	o_ACS_CB_MAX_11;
wire [7:0]	o_ACS_CB_MAX_10;
wire [7:0]	o_ACS_CB_MAX_09;
wire [7:0]	o_ACS_CB_MAX_08;

// SPA_ACS_CBMAX4_REG
wire [7:0]	o_ACS_CB_MAX_15;
wire [7:0]	o_ACS_CB_MAX_14;
wire [7:0]	o_ACS_CB_MAX_13;
wire [7:0]	o_ACS_CB_MAX_12;

// SPA_ACS_CBMIN1_REG
wire [7:0]	o_ACS_CB_MIN_03;
wire [7:0]	o_ACS_CB_MIN_02;
wire [7:0]	o_ACS_CB_MIN_01;
wire [7:0]	o_ACS_CB_MIN_00;

// SPA_ACS_CBMIN2_REG
wire [7:0]	o_ACS_CB_MIN_07;
wire [7:0]	o_ACS_CB_MIN_06;
wire [7:0]	o_ACS_CB_MIN_05;
wire [7:0]	o_ACS_CB_MIN_04;

// SPA_ACS_CBMIN3_REG
wire [7:0]	o_ACS_CB_MIN_11;
wire [7:0]	o_ACS_CB_MIN_10;
wire [7:0]	o_ACS_CB_MIN_09;
wire [7:0]	o_ACS_CB_MIN_08;

// SPA_ACS_CBMIN4_REG
wire [7:0]	o_ACS_CB_MIN_15;
wire [7:0]	o_ACS_CB_MIN_14;
wire [7:0]	o_ACS_CB_MIN_13;
wire [7:0]	o_ACS_CB_MIN_12;

// SPA_ACS_CRMAX1_REG
wire [7:0]	o_ACS_CR_MAX_03;
wire [7:0]	o_ACS_CR_MAX_02;
wire [7:0]	o_ACS_CR_MAX_01;
wire [7:0]	o_ACS_CR_MAX_00;

// SPA_ACS_CRMAX2_REG
wire [7:0]	o_ACS_CR_MAX_07;
wire [7:0]	o_ACS_CR_MAX_06;
wire [7:0]	o_ACS_CR_MAX_05;
wire [7:0]	o_ACS_CR_MAX_04;

// SPA_ACS_CRMAX3_REG
wire [7:0]	o_ACS_CR_MAX_11;
wire [7:0]	o_ACS_CR_MAX_10;
wire [7:0]	o_ACS_CR_MAX_09;
wire [7:0]	o_ACS_CR_MAX_08;

// SPA_ACS_CRMAX4_REG
wire [7:0]	o_ACS_CR_MAX_15;
wire [7:0]	o_ACS_CR_MAX_14;
wire [7:0]	o_ACS_CR_MAX_13;
wire [7:0]	o_ACS_CR_MAX_12;

// SPA_ACS_CRMIN1_REG
wire [7:0]	o_ACS_CR_MIN_03;
wire [7:0]	o_ACS_CR_MIN_02;
wire [7:0]	o_ACS_CR_MIN_01;
wire [7:0]	o_ACS_CR_MIN_00;

// SPA_ACS_CRMIN2_REG
wire [7:0]	o_ACS_CR_MIN_07;
wire [7:0]	o_ACS_CR_MIN_06;
wire [7:0]	o_ACS_CR_MIN_05;
wire [7:0]	o_ACS_CR_MIN_04;

// SPA_ACS_CRMIN3_REG
wire [7:0]	o_ACS_CR_MIN_11;
wire [7:0]	o_ACS_CR_MIN_10;
wire [7:0]	o_ACS_CR_MIN_09;
wire [7:0]	o_ACS_CR_MIN_08;

// SPA_ACS_CRMIN4_REG
wire [7:0]	o_ACS_CR_MIN_15;
wire [7:0]	o_ACS_CR_MIN_14;
wire [7:0]	o_ACS_CR_MIN_13;
wire [7:0]	o_ACS_CR_MIN_12;

// SPA_ACS_CBMAXH1_REG
wire [7:0]	o_ACS_CB_MAXH_03;
wire [7:0]	o_ACS_CB_MAXH_02;
wire [7:0]	o_ACS_CB_MAXH_01;
wire [7:0]	o_ACS_CB_MAXH_00;

// SPA_ACS_CBMAXH2_REG
wire [7:0]	o_ACS_CB_MAXH_07;
wire [7:0]	o_ACS_CB_MAXH_06;
wire [7:0]	o_ACS_CB_MAXH_05;
wire [7:0]	o_ACS_CB_MAXH_04;

// SPA_ACS_CBMAXH3_REG
wire [7:0]	o_ACS_CB_MAXH_11;
wire [7:0]	o_ACS_CB_MAXH_10;
wire [7:0]	o_ACS_CB_MAXH_09;
wire [7:0]	o_ACS_CB_MAXH_08;

// SPA_ACS_CBMAXH4_REG
wire [7:0]	o_ACS_CB_MAXH_15;
wire [7:0]	o_ACS_CB_MAXH_14;
wire [7:0]	o_ACS_CB_MAXH_13;
wire [7:0]	o_ACS_CB_MAXH_12;

// SPA_ACS_CBMINH1_REG
wire [7:0]	o_ACS_CB_MINH_03;
wire [7:0]	o_ACS_CB_MINH_02;
wire [7:0]	o_ACS_CB_MINH_01;
wire [7:0]	o_ACS_CB_MINH_00;

// SPA_ACS_CBMINH2_REG
wire [7:0]	o_ACS_CB_MINH_07;
wire [7:0]	o_ACS_CB_MINH_06;
wire [7:0]	o_ACS_CB_MINH_05;
wire [7:0]	o_ACS_CB_MINH_04;

// SPA_ACS_CBMINH3_REG
wire [7:0]	o_ACS_CB_MINH_11;
wire [7:0]	o_ACS_CB_MINH_10;
wire [7:0]	o_ACS_CB_MINH_09;
wire [7:0]	o_ACS_CB_MINH_08;

// SPA_ACS_CBMINH4_REG
wire [7:0]	o_ACS_CB_MINH_15;
wire [7:0]	o_ACS_CB_MINH_14;
wire [7:0]	o_ACS_CB_MINH_13;
wire [7:0]	o_ACS_CB_MINH_12;

// SPA_ACS_CRMAXH1_REG
wire [7:0]	o_ACS_CR_MAXH_03;
wire [7:0]	o_ACS_CR_MAXH_02;
wire [7:0]	o_ACS_CR_MAXH_01;
wire [7:0]	o_ACS_CR_MAXH_00;

// SPA_ACS_CRMAXH2_REG
wire [7:0]	o_ACS_CR_MAXH_07;
wire [7:0]	o_ACS_CR_MAXH_06;
wire [7:0]	o_ACS_CR_MAXH_05;
wire [7:0]	o_ACS_CR_MAXH_04;

// SPA_ACS_CRMAXH3_REG
wire [7:0]	o_ACS_CR_MAXH_11;
wire [7:0]	o_ACS_CR_MAXH_10;
wire [7:0]	o_ACS_CR_MAXH_09;
wire [7:0]	o_ACS_CR_MAXH_08;

// SPA_ACS_CRMAXH4_REG
wire [7:0]	o_ACS_CR_MAXH_15;
wire [7:0]	o_ACS_CR_MAXH_14;
wire [7:0]	o_ACS_CR_MAXH_13;
wire [7:0]	o_ACS_CR_MAXH_12;

// SPA_ACS_CRMINH1_REG
wire [7:0]	o_ACS_CR_MINH_03;
wire [7:0]	o_ACS_CR_MINH_02;
wire [7:0]	o_ACS_CR_MINH_01;
wire [7:0]	o_ACS_CR_MINH_00;

// SPA_ACS_CRMINH2_REG
wire [7:0]	o_ACS_CR_MINH_07;
wire [7:0]	o_ACS_CR_MINH_06;
wire [7:0]	o_ACS_CR_MINH_05;
wire [7:0]	o_ACS_CR_MINH_04;

// SPA_ACS_CRMINH3_REG
wire [7:0]	o_ACS_CR_MINH_11;
wire [7:0]	o_ACS_CR_MINH_10;
wire [7:0]	o_ACS_CR_MINH_09;
wire [7:0]	o_ACS_CR_MINH_08;

// SPA_ACS_CRMINH4_REG
wire [7:0]	o_ACS_CR_MINH_15;
wire [7:0]	o_ACS_CR_MINH_14;
wire [7:0]	o_ACS_CR_MINH_13;
wire [7:0]	o_ACS_CR_MINH_12;

// SPA_ACS_VALUE_TH_REG
wire [7:0]	o_ACS_VALUE_BLOCK_TH;
wire [7:0]	o_ACS_VALUE_PXL_TH;

// SPA_ACS_TBLK_PAGE_REG
wire [31:0]	o_ACS_TBLK_PAGE;

// SPA_ACS_TBLK_NPAGE_REG
wire [31:0]	o_ACS_TBLK_NPAGE;

// SPA_ACS_CBLK_REG
wire [31:0]	o_ACS_CBLK;

// SPA_ACS_SBLK_PAGE_REG
wire [31:0]	o_ACS_SBLK_PAGE;

// SPA_ACS_SPXL_BLK_PAGE_REG
wire [31:0]	o_ACS_SPXL_BLK_PAGE;

// SPA_ACS_SPXL_PAGE_REG
wire [31:0]	o_ACS_SPXL_PAGE;

// SPA_ACS_TEXT_PAGE_REG
wire [31:0]	o_ACS_TEXT_PAGE;

// SPA_ACS_HT_PAGE_REG
wire [31:0]	o_ACS_HT_PAGE;

// SPA_ACS_EDGE_PAGE_REG
wire [31:0]	o_ACS_EDGE_PAGE;

// SPA_AVG_HT_ACS00_REG
wire [31:0]	o_AVG_HT_ACS00;

// SPA_AVG_HT_ACS01_REG
wire [31:0]	o_AVG_HT_ACS01;

// SPA_AVG_HT_ACS02_REG
wire [31:0]	o_AVG_HT_ACS02;

// SPA_AVG_HT_ACS03_REG
wire [31:0]	o_AVG_HT_ACS03;

// SPA_AVG_HT_ACS04_REG
wire [31:0]	o_AVG_HT_ACS04;

// SPA_AVG_HT_ACS05_REG
wire [31:0]	o_AVG_HT_ACS05;

// SPA_AVG_HT_ACS06_REG
wire [31:0]	o_AVG_HT_ACS06;

// SPA_AVG_HT_ACS07_REG
wire [31:0]	o_AVG_HT_ACS07;

// SPA_AVG_HT_ACS08_REG
wire [31:0]	o_AVG_HT_ACS08;

// SPA_AVG_HT_ACS09_REG
wire [31:0]	o_AVG_HT_ACS09;

// SPA_AVG_HT_ACS10_REG
wire [31:0]	o_AVG_HT_ACS10;

// SPA_AVG_HT_ACS11_REG
wire [31:0]	o_AVG_HT_ACS11;

// SPA_AVG_HT_ACS12_REG
wire [31:0]	o_AVG_HT_ACS12;

// SPA_AVG_HT_ACS13_REG
wire [31:0]	o_AVG_HT_ACS13;

// SPA_AVG_HT_ACS14_REG
wire [31:0]	o_AVG_HT_ACS14;

// SPA_AVG_HT_ACS15_REG
wire [31:0]	o_AVG_HT_ACS15;

// SPA_AVG_NHT_ACS00_REG
wire [31:0]	o_AVG_NHT_ACS00;

// SPA_AVG_NHT_ACS01_REG
wire [31:0]	o_AVG_NHT_ACS01;

// SPA_AVG_NHT_ACS02_REG
wire [31:0]	o_AVG_NHT_ACS02;

// SPA_AVG_NHT_ACS03_REG
wire [31:0]	o_AVG_NHT_ACS03;

// SPA_AVG_NHT_ACS04_REG
wire [31:0]	o_AVG_NHT_ACS04;

// SPA_AVG_NHT_ACS05_REG
wire [31:0]	o_AVG_NHT_ACS05;

// SPA_AVG_NHT_ACS06_REG
wire [31:0]	o_AVG_NHT_ACS06;

// SPA_AVG_NHT_ACS07_REG
wire [31:0]	o_AVG_NHT_ACS07;

// SPA_AVG_NHT_ACS08_REG
wire [31:0]	o_AVG_NHT_ACS08;

// SPA_AVG_NHT_ACS09_REG
wire [31:0]	o_AVG_NHT_ACS09;

// SPA_AVG_NHT_ACS10_REG
wire [31:0]	o_AVG_NHT_ACS10;

// SPA_AVG_NHT_ACS11_REG
wire [31:0]	o_AVG_NHT_ACS11;

// SPA_AVG_NHT_ACS12_REG
wire [31:0]	o_AVG_NHT_ACS12;

// SPA_AVG_NHT_ACS13_REG
wire [31:0]	o_AVG_NHT_ACS13;

// SPA_AVG_NHT_ACS14_REG
wire [31:0]	o_AVG_NHT_ACS14;

// SPA_AVG_NHT_ACS15_REG
wire [31:0]	o_AVG_NHT_ACS15;

// SPA_ACS_SATURATION_TH2_REG
wire [14:0]	o_ACS_SATURATION_PXL_CNT_TH;

// SPA_ACS_VALID_RANGE_H_REG
wire [13:0]	o_VALID_BOTTOM;
wire [13:0]	o_VALID_TOP;

// SPA_ACS_VALID_RANGE_W_REG
wire [13:0]	o_VALID_RIGHT;
wire [13:0]	o_VALID_LEFT;

// SPA_ACS_V2_CON_REG
wire [7:0]	o_ACS_V2_BLOCK_SIZE_X;
wire [7:0]	o_ACS_V2_BLOCK_SIZE_Y;
wire [7:0]	o_ACS_V2_WHITE_TH;

// SPA_ACS_V2_SATURATION_TH_REG
wire [7:0]	o_ACS_V2_SATURATION_BLOCK_TH;
wire [7:0]	o_ACS_V2_SATURATION_PXL_TH;

// SPA_ACS_V2_SATURATION_TH2_REG
wire [14:0]	o_ACS_V2_SATURATION_TH2;

// SPA_ACS_V2_HT_TH_REG
wire [14:0]	o_ACS_V2_PUREHALFTONE_CNT;
wire [14:0]	o_ACS_V2_HALFTONE_CNT;

// SPA_ACS_V2_VALUE_TH_REG
wire [7:0]	o_ACS_V2_VALUE_BLOCK_TH;
wire [7:0]	o_ACS_V2_VALUE_PXL_TH;

// SPA_ACS_V2_TBLK_PAGE_REG
wire [31:0]	o_ACS_V2_TBLK_PAGE;

// SPA_ACS_V2_TBLK_NPAGE_REG
wire [31:0]	o_ACS_V2_TBLK_NPAGE;

// SPA_ACS_V2_CBLK_REG
wire [31:0]	o_ACS_V2_CBLK;

// SPA_ACS_V2_SBLK_PAGE_REG
wire [31:0]	o_ACS_V2_SBLK_PAGE;

// SPA_ACS_V2_SPXL_BLK_PAGE_REG
wire [31:0]	o_ACS_V2_SPXL_BLK_PAGE;

// SPA_ACS_V2_SPXL_PAGE_REG
wire [31:0]	o_ACS_V2_SPXL_PAGE;

// SPA_BLANK_CON0_REG
wire 			o_BLANK_AUTO_EN;
wire 			o_BLANK_MARK_EN;
wire 			o_BLANK_RANGE_REAL_IMAGE;
wire [7:0]	o_BLANK_BLOCK_SIZE_H;
wire [7:0]	o_BLANK_BLOCK_SIZE_V;

// SPA_BLANK_CON1_REG
wire [7:0]	o_BLANK_DARKBLK_TH;
wire [7:0]	o_BLANK_CONT_PCT;

// SPA_BLANK_MARK_POS_UPPER_REG
wire [16:0]	o_BLANK_MARK_UPPER;

// SPA_BLANK_MARK_POS_LOWER_REG
wire [16:0]	o_BLANK_MARK_LOWER;

// SPA_BLANK_MARK_POS_LEFT_REG
wire [16:0]	o_BLANK_MARK_LEFT;

// SPA_BLANK_MARK_POS_RIGHT_REG
wire [16:0]	o_BLANK_MARK_RIGHT;

// SPA_BLANK_COLOR_BLK_REG
wire [7:0]	o_BLANK_COLORBLOCK_CR_THU;
wire [7:0]	o_BLANK_COLORBLOCK_CR_THL;
wire [7:0]	o_BLANK_COLORBLOCK_CB_THU;
wire [7:0]	o_BLANK_COLORBLOCK_CB_THL;

// SPA_BLANK_TOTALBLK_REG
wire [31:0]	o_BLANK_TBLK_PAGE;

// SPA_BLANK_CONTBLK_REG
wire [31:0]	o_BLANK_CONTBLK_PAGE;

// SPA_BLANK_BLANKBLK_REG
wire [31:0]	o_BLANK_BLACKBLK_PAGE;

// SPA_BLANK_DARKBLK_REG
wire [31:0]	o_BLANK_DARKBLK;

// SPA_BLANK_COLORBLK_REG
wire [31:0]	o_BLANK_CBLK;

// SPA_BLANK_Y_MIN_MAX_REG
wire [7:0]	o_BLANK_U_MAX;
wire [7:0]	o_BLANK_Y_MIN;

// SPA_BLANK_CB_MIN_MAX_REG
wire [7:0]	o_BLANK_CB_MAX;
wire [7:0]	o_BLANK_CB_MIN;

// SPA_BLANK_CR_MIN_MAX_REG
wire [7:0]	o_BLANK_CR_MAX;
wire [7:0]	o_BLANK_CR_MIN;

// SPA_RC2_OUTIMG_WIDTH_HEIGHT_REG
wire [7:0]	o_RC2_OUTIMG_HEIGHT;
wire [8:0]	o_RC2_OUTIMG_WIDTH;

// SPA_RC2_OVERLAP_REG
wire [5:0]	o_RC2_OVERLAP;
wire 			o_RC2_MASK_IMG_BD;

// SPA_RC2_FRAC_REG
wire [11:0]	o_RC2_H_FRAC;
wire [11:0]	o_RC2_V_FRAC;

// SPA_BDS_CON_REG
wire 			o_MIRROR;
wire [7:0]	o_EDGE_TH;

// SPA_BDS_EDGE1_REG
wire [7:0]	o_EDGE_Y_LOW;
wire [7:0]	o_EDGE_Y_HIGH;
wire [7:0]	o_EDGE_CNT_TH;

// SPA_BDS_EDGE2_REG
wire [7:0]	o_EDGE_CR_LOW;
wire [7:0]	o_EDGE_CR_HIGH;
wire [7:0]	o_EDGE_CB_LOW;
wire [7:0]	o_EDGE_CB_HIGH;

// SPA_BDS_EURION1_REG
wire [7:0]	o_EURion_Y_LOW;
wire [7:0]	o_EURion_Y_HIGH;

// SPA_BDS_EURION2_REG
wire [7:0]	o_EURion_CR_LOW;
wire [7:0]	o_EURion_CR_HIGH;
wire [7:0]	o_EURion_CB_LOW;
wire [7:0]	o_EURion_CB_HIGH;

// SPA_BDS_OFFSET_REG
wire [7:0]	o_OFFSET_BOTTOM;
wire [7:0]	o_OFFSET_TOP;
wire [7:0]	o_OFFSET_RIGHT;
wire [7:0]	o_OFFSET_LEFT;

// SPA_BDS_CONTENTS_REG
wire [15:0]	o_CONTENS_END;
wire [15:0]	o_CONTENS_START;

// SPA_SMAP_PARAM_B_REG
wire [7:0]	o_SMAP_G_Range2;
wire [7:0]	o_SMAP_G_Range1;
wire [7:0]	o_SMAP_R_Range2;
wire [7:0]	o_SMAP_R_Range1;

// SPA_SMAP_PARAM_C_REG
wire 			o_SMAP_Refine_Enable;
wire [3:0]	o_SMAP_BinTH3;
wire [3:0]	o_SMAP_BinTH2;
wire [3:0]	o_SMAP_BinTH1;
wire [7:0]	o_SMAP_B_Range2;
wire [7:0]	o_SMAP_B_Range1;

// SPA_SMAP_ADAPT_CON_REG
wire 			o_SMAP_ADAPT_EN;
wire [5:0]	o_SMAP_ADAPT_AVGDIV;

// SPA_SMAP_ADAPT_R_MAX0_REG
wire [7:0]	o_SMAP_ADAPT_R_MAX00;
wire [7:0]	o_SMAP_ADAPT_R_MAX01;
wire [7:0]	o_SMAP_ADAPT_R_MAX02;
wire [7:0]	o_SMAP_ADAPT_R_MAX03;

// SPA_SMAP_ADAPT_R_MAX1_REG
wire [7:0]	o_SMAP_ADAPT_R_MAX10;
wire [7:0]	o_SMAP_ADAPT_R_MAX11;
wire [7:0]	o_SMAP_ADAPT_R_MAX12;
wire [7:0]	o_SMAP_ADAPT_R_MAX13;

// SPA_SMAP_ADAPT_R_MAX2_REG
wire [7:0]	o_SMAP_ADAPT_R_MAX20;
wire [7:0]	o_SMAP_ADAPT_R_MAX21;
wire [7:0]	o_SMAP_ADAPT_R_MAX22;
wire [7:0]	o_SMAP_ADAPT_R_MAX23;

// SPA_SMAP_ADAPT_R_MAX3_REG
wire [7:0]	o_SMAP_ADAPT_R_MAX30;
wire [7:0]	o_SMAP_ADAPT_R_MAX31;
wire [7:0]	o_SMAP_ADAPT_R_MAX32;
wire [7:0]	o_SMAP_ADAPT_R_MAX33;

// SPA_SMAP_ADAPT_R_MAX4_REG
wire [7:0]	o_SMAP_ADAPT_R_MAX40;
wire [7:0]	o_SMAP_ADAPT_R_MAX41;
wire [7:0]	o_SMAP_ADAPT_R_MAX42;
wire [7:0]	o_SMAP_ADAPT_R_MAX43;

// SPA_SMAP_ADAPT_R_MAX5_REG
wire [7:0]	o_SMAP_ADAPT_R_MAX50;
wire [7:0]	o_SMAP_ADAPT_R_MAX51;
wire [7:0]	o_SMAP_ADAPT_R_MAX52;
wire [7:0]	o_SMAP_ADAPT_R_MAX53;

// SPA_SMAP_ADAPT_R_MAX6_REG
wire [7:0]	o_SMAP_ADAPT_R_MAX60;
wire [7:0]	o_SMAP_ADAPT_R_MAX61;
wire [7:0]	o_SMAP_ADAPT_R_MAX62;
wire [7:0]	o_SMAP_ADAPT_R_MAX63;

// SPA_SMAP_ADAPT_R_MAX7_REG
wire [7:0]	o_SMAP_ADAPT_R_MAX70;
wire [7:0]	o_SMAP_ADAPT_R_MAX71;
wire [7:0]	o_SMAP_ADAPT_R_MAX72;
wire [7:0]	o_SMAP_ADAPT_R_MAX73;

// SPA_SMAP_ADAPT_R_MIN0_REG
wire [7:0]	o_SMAP_ADAPT_R_MIN00;
wire [7:0]	o_SMAP_ADAPT_R_MIN01;
wire [7:0]	o_SMAP_ADAPT_R_MIN02;
wire [7:0]	o_SMAP_ADAPT_R_MIN03;

// SPA_SMAP_ADAPT_R_MIN1_REG
wire [7:0]	o_SMAP_ADAPT_R_MIN10;
wire [7:0]	o_SMAP_ADAPT_R_MIN11;
wire [7:0]	o_SMAP_ADAPT_R_MIN12;
wire [7:0]	o_SMAP_ADAPT_R_MIN13;

// SPA_SMAP_ADAPT_R_MIN2_REG
wire [7:0]	o_SMAP_ADAPT_R_MIN20;
wire [7:0]	o_SMAP_ADAPT_R_MIN21;
wire [7:0]	o_SMAP_ADAPT_R_MIN22;
wire [7:0]	o_SMAP_ADAPT_R_MIN23;

// SPA_SMAP_ADAPT_R_MIN3_REG
wire [7:0]	o_SMAP_ADAPT_R_MIN30;
wire [7:0]	o_SMAP_ADAPT_R_MIN31;
wire [7:0]	o_SMAP_ADAPT_R_MIN32;
wire [7:0]	o_SMAP_ADAPT_R_MIN33;

// SPA_SMAP_ADAPT_R_MIN4_REG
wire [7:0]	o_SMAP_ADAPT_R_MIN40;
wire [7:0]	o_SMAP_ADAPT_R_MIN41;
wire [7:0]	o_SMAP_ADAPT_R_MIN42;
wire [7:0]	o_SMAP_ADAPT_R_MIN43;

// SPA_SMAP_ADAPT_R_MIN5_REG
wire [7:0]	o_SMAP_ADAPT_R_MIN50;
wire [7:0]	o_SMAP_ADAPT_R_MIN51;
wire [7:0]	o_SMAP_ADAPT_R_MIN52;
wire [7:0]	o_SMAP_ADAPT_R_MIN53;

// SPA_SMAP_ADAPT_R_MIN6_REG
wire [7:0]	o_SMAP_ADAPT_R_MIN60;
wire [7:0]	o_SMAP_ADAPT_R_MIN61;
wire [7:0]	o_SMAP_ADAPT_R_MIN62;
wire [7:0]	o_SMAP_ADAPT_R_MIN63;

// SPA_SMAP_ADAPT_R_MIN7_REG
wire [7:0]	o_SMAP_ADAPT_R_MIN70;
wire [7:0]	o_SMAP_ADAPT_R_MIN71;
wire [7:0]	o_SMAP_ADAPT_R_MIN72;
wire [7:0]	o_SMAP_ADAPT_R_MIN73;

// SPA_SMAP_ADAPT_G_MAX0_REG
wire [7:0]	o_SMAP_ADAPT_G_MAX00;
wire [7:0]	o_SMAP_ADAPT_G_MAX01;
wire [7:0]	o_SMAP_ADAPT_G_MAX02;
wire [7:0]	o_SMAP_ADAPT_G_MAX03;

// SPA_SMAP_ADAPT_G_MAX1_REG
wire [7:0]	o_SMAP_ADAPT_G_MAX10;
wire [7:0]	o_SMAP_ADAPT_G_MAX11;
wire [7:0]	o_SMAP_ADAPT_G_MAX12;
wire [7:0]	o_SMAP_ADAPT_G_MAX13;

// SPA_SMAP_ADAPT_G_MAX2_REG
wire [7:0]	o_SMAP_ADAPT_G_MAX20;
wire [7:0]	o_SMAP_ADAPT_G_MAX21;
wire [7:0]	o_SMAP_ADAPT_G_MAX22;
wire [7:0]	o_SMAP_ADAPT_G_MAX23;

// SPA_SMAP_ADAPT_G_MAX3_REG
wire [7:0]	o_SMAP_ADAPT_G_MAX30;
wire [7:0]	o_SMAP_ADAPT_G_MAX31;
wire [7:0]	o_SMAP_ADAPT_G_MAX32;
wire [7:0]	o_SMAP_ADAPT_G_MAX33;

// SPA_SMAP_ADAPT_G_MAX4_REG
wire [7:0]	o_SMAP_ADAPT_G_MAX40;
wire [7:0]	o_SMAP_ADAPT_G_MAX41;
wire [7:0]	o_SMAP_ADAPT_G_MAX42;
wire [7:0]	o_SMAP_ADAPT_G_MAX43;

// SPA_SMAP_ADAPT_G_MAX5_REG
wire [7:0]	o_SMAP_ADAPT_G_MAX50;
wire [7:0]	o_SMAP_ADAPT_G_MAX51;
wire [7:0]	o_SMAP_ADAPT_G_MAX52;
wire [7:0]	o_SMAP_ADAPT_G_MAX53;

// SPA_SMAP_ADAPT_G_MAX6_REG
wire [7:0]	o_SMAP_ADAPT_G_MAX60;
wire [7:0]	o_SMAP_ADAPT_G_MAX61;
wire [7:0]	o_SMAP_ADAPT_G_MAX62;
wire [7:0]	o_SMAP_ADAPT_G_MAX63;

// SPA_SMAP_ADAPT_G_MAX7_REG
wire [7:0]	o_SMAP_ADAPT_G_MAX70;
wire [7:0]	o_SMAP_ADAPT_G_MAX71;
wire [7:0]	o_SMAP_ADAPT_G_MAX72;
wire [7:0]	o_SMAP_ADAPT_G_MAX73;

// SPA_SMAP_ADAPT_G_MIN0_REG
wire [7:0]	o_SMAP_ADAPT_G_MIN00;
wire [7:0]	o_SMAP_ADAPT_G_MIN01;
wire [7:0]	o_SMAP_ADAPT_G_MIN02;
wire [7:0]	o_SMAP_ADAPT_G_MIN03;

// SPA_SMAP_ADAPT_G_MIN1_REG
wire [7:0]	o_SMAP_ADAPT_G_MIN10;
wire [7:0]	o_SMAP_ADAPT_G_MIN11;
wire [7:0]	o_SMAP_ADAPT_G_MIN12;
wire [7:0]	o_SMAP_ADAPT_G_MIN13;

// SPA_SMAP_ADAPT_G_MIN2_REG
wire [7:0]	o_SMAP_ADAPT_G_MIN20;
wire [7:0]	o_SMAP_ADAPT_G_MIN21;
wire [7:0]	o_SMAP_ADAPT_G_MIN22;
wire [7:0]	o_SMAP_ADAPT_G_MIN23;

// SPA_SMAP_ADAPT_G_MIN3_REG
wire [7:0]	o_SMAP_ADAPT_G_MIN30;
wire [7:0]	o_SMAP_ADAPT_G_MIN31;
wire [7:0]	o_SMAP_ADAPT_G_MIN32;
wire [7:0]	o_SMAP_ADAPT_G_MIN33;

// SPA_SMAP_ADAPT_G_MIN4_REG
wire [7:0]	o_SMAP_ADAPT_G_MIN40;
wire [7:0]	o_SMAP_ADAPT_G_MIN41;
wire [7:0]	o_SMAP_ADAPT_G_MIN42;
wire [7:0]	o_SMAP_ADAPT_G_MIN43;

// SPA_SMAP_ADAPT_G_MIN5_REG
wire [7:0]	o_SMAP_ADAPT_G_MIN50;
wire [7:0]	o_SMAP_ADAPT_G_MIN51;
wire [7:0]	o_SMAP_ADAPT_G_MIN52;
wire [7:0]	o_SMAP_ADAPT_G_MIN53;

// SPA_SMAP_ADAPT_G_MIN6_REG
wire [7:0]	o_SMAP_ADAPT_G_MIN60;
wire [7:0]	o_SMAP_ADAPT_G_MIN61;
wire [7:0]	o_SMAP_ADAPT_G_MIN62;
wire [7:0]	o_SMAP_ADAPT_G_MIN63;

// SPA_SMAP_ADAPT_G_MIN7_REG
wire [7:0]	o_SMAP_ADAPT_G_MIN70;
wire [7:0]	o_SMAP_ADAPT_G_MIN71;
wire [7:0]	o_SMAP_ADAPT_G_MIN72;
wire [7:0]	o_SMAP_ADAPT_G_MIN73;

// SPA_SMAP_ADAPT_B_MAX0_REG
wire [7:0]	o_SMAP_ADAPT_B_MAX00;
wire [7:0]	o_SMAP_ADAPT_B_MAX01;
wire [7:0]	o_SMAP_ADAPT_B_MAX02;
wire [7:0]	o_SMAP_ADAPT_B_MAX03;

// SPA_SMAP_ADAPT_B_MAX1_REG
wire [7:0]	o_SMAP_ADAPT_B_MAX10;
wire [7:0]	o_SMAP_ADAPT_B_MAX11;
wire [7:0]	o_SMAP_ADAPT_B_MAX12;
wire [7:0]	o_SMAP_ADAPT_B_MAX13;

// SPA_SMAP_ADAPT_B_MAX2_REG
wire [7:0]	o_SMAP_ADAPT_B_MAX20;
wire [7:0]	o_SMAP_ADAPT_B_MAX21;
wire [7:0]	o_SMAP_ADAPT_B_MAX22;
wire [7:0]	o_SMAP_ADAPT_B_MAX23;

// SPA_SMAP_ADAPT_B_MAX3_REG
wire [7:0]	o_SMAP_ADAPT_B_MAX30;
wire [7:0]	o_SMAP_ADAPT_B_MAX31;
wire [7:0]	o_SMAP_ADAPT_B_MAX32;
wire [7:0]	o_SMAP_ADAPT_B_MAX33;

// SPA_SMAP_ADAPT_B_MAX4_REG
wire [7:0]	o_SMAP_ADAPT_B_MAX40;
wire [7:0]	o_SMAP_ADAPT_B_MAX41;
wire [7:0]	o_SMAP_ADAPT_B_MAX42;
wire [7:0]	o_SMAP_ADAPT_B_MAX43;

// SPA_SMAP_ADAPT_B_MAX5_REG
wire [7:0]	o_SMAP_ADAPT_B_MAX50;
wire [7:0]	o_SMAP_ADAPT_B_MAX51;
wire [7:0]	o_SMAP_ADAPT_B_MAX52;
wire [7:0]	o_SMAP_ADAPT_B_MAX53;

// SPA_SMAP_ADAPT_B_MAX6_REG
wire [7:0]	o_SMAP_ADAPT_B_MAX60;
wire [7:0]	o_SMAP_ADAPT_B_MAX61;
wire [7:0]	o_SMAP_ADAPT_B_MAX62;
wire [7:0]	o_SMAP_ADAPT_B_MAX63;

// SPA_SMAP_ADAPT_B_MAX7_REG
wire [7:0]	o_SMAP_ADAPT_B_MAX70;
wire [7:0]	o_SMAP_ADAPT_B_MAX71;
wire [7:0]	o_SMAP_ADAPT_B_MAX72;
wire [7:0]	o_SMAP_ADAPT_B_MAX73;

// SPA_SMAP_ADAPT_B_MIN0_REG
wire [7:0]	o_SMAP_ADAPT_B_MIN00;
wire [7:0]	o_SMAP_ADAPT_B_MIN01;
wire [7:0]	o_SMAP_ADAPT_B_MIN02;
wire [7:0]	o_SMAP_ADAPT_B_MIN03;

// SPA_SMAP_ADAPT_B_MIN1_REG
wire [7:0]	o_SMAP_ADAPT_B_MIN10;
wire [7:0]	o_SMAP_ADAPT_B_MIN11;
wire [7:0]	o_SMAP_ADAPT_B_MIN12;
wire [7:0]	o_SMAP_ADAPT_B_MIN13;

// SPA_SMAP_ADAPT_B_MIN2_REG
wire [7:0]	o_SMAP_ADAPT_B_MIN20;
wire [7:0]	o_SMAP_ADAPT_B_MIN21;
wire [7:0]	o_SMAP_ADAPT_B_MIN22;
wire [7:0]	o_SMAP_ADAPT_B_MIN23;

// SPA_SMAP_ADAPT_B_MIN3_REG
wire [7:0]	o_SMAP_ADAPT_B_MIN30;
wire [7:0]	o_SMAP_ADAPT_B_MIN31;
wire [7:0]	o_SMAP_ADAPT_B_MIN32;
wire [7:0]	o_SMAP_ADAPT_B_MIN33;

// SPA_SMAP_ADAPT_B_MIN4_REG
wire [7:0]	o_SMAP_ADAPT_B_MIN40;
wire [7:0]	o_SMAP_ADAPT_B_MIN41;
wire [7:0]	o_SMAP_ADAPT_B_MIN42;
wire [7:0]	o_SMAP_ADAPT_B_MIN43;

// SPA_SMAP_ADAPT_B_MIN5_REG
wire [7:0]	o_SMAP_ADAPT_B_MIN50;
wire [7:0]	o_SMAP_ADAPT_B_MIN51;
wire [7:0]	o_SMAP_ADAPT_B_MIN52;
wire [7:0]	o_SMAP_ADAPT_B_MIN53;

// SPA_SMAP_ADAPT_B_MIN6_REG
wire [7:0]	o_SMAP_ADAPT_B_MIN60;
wire [7:0]	o_SMAP_ADAPT_B_MIN61;
wire [7:0]	o_SMAP_ADAPT_B_MIN62;
wire [7:0]	o_SMAP_ADAPT_B_MIN63;

// SPA_SMAP_ADAPT_B_MIN7_REG
wire [7:0]	o_SMAP_ADAPT_B_MIN70;
wire [7:0]	o_SMAP_ADAPT_B_MIN71;
wire [7:0]	o_SMAP_ADAPT_B_MIN72;
wire [7:0]	o_SMAP_ADAPT_B_MIN73;

// SPA_TBL_ADDR_00_UP_REG
wire [7:0]	o_TBL_ADDR_00_UP;

// SPA_TBL_ADDR_01_UP_REG
wire [7:0]	o_TBL_ADDR_01_UP;

// SPA_TBL_ADDR_02_UP_REG
wire [7:0]	o_TBL_ADDR_02_UP;

// SPA_TBL_ADDR_03_UP_REG
wire [7:0]	o_TBL_ADDR_03_UP;

// SPA_TBL_ADDR_04_UP_REG
wire [7:0]	o_TBL_ADDR_04_UP;

// SPA_TBL_ADDR_05_UP_REG
wire [7:0]	o_TBL_ADDR_05_UP;

// SPA_TBL_ADDR_06_UP_REG
wire [7:0]	o_TBL_ADDR_06_UP;

// SPA_TBL_ADDR_07_UP_REG
wire [7:0]	o_TBL_ADDR_07_UP;

// SPA_TBL_ADDR_08_UP_REG
wire [7:0]	o_TBL_ADDR_08_UP;

// SPA_TBL_ADDR_09_UP_REG
wire [7:0]	o_TBL_ADDR_09_UP;

// SPA_TBL_ADDR_10_UP_REG
wire [7:0]	o_TBL_ADDR_10_UP;

// SPA_TBL_ADDR_11_UP_REG
wire [7:0]	o_TBL_ADDR_11_UP;

// SPA_TBL_ADDR_12_UP_REG
wire [7:0]	o_TBL_ADDR_12_UP;

// SPA_TBL_ADDR_13_UP_REG
wire [7:0]	o_TBL_ADDR_13_UP;

// SPA_TBL_ADDR_14_UP_REG
wire [7:0]	o_TBL_ADDR_14_UP;

// SPA_TBL_ADDR_15_UP_REG
wire [7:0]	o_TBL_ADDR_15_UP;

// SPA_TBL_ADDR_16_UP_REG
wire [7:0]	o_TBL_ADDR_16_UP;

// SPA_TBL_ADDR_17_UP_REG
wire [7:0]	o_TBL_ADDR_17_UP;

// SPA_TBL_ADDR_18_UP_REG
wire [7:0]	o_TBL_ADDR_18_UP;

// SPA_TBL_ADDR_19_UP_REG
wire [7:0]	o_TBL_ADDR_19_UP;

// SPA_TBL_ADDR_20_UP_REG
wire [7:0]	o_TBL_ADDR_20_UP;

// SPA_TBL_ADDR_21_UP_REG
wire [7:0]	o_TBL_ADDR_21_UP;

// SPA_TBL_ADDR_22_UP_REG
wire [7:0]	o_TBL_ADDR_22_UP;

// SPA_TBL_ADDR_23_UP_REG
wire [7:0]	o_TBL_ADDR_23_UP;

// SPA_TBL_ADDR_24_UP_REG
wire [7:0]	o_TBL_ADDR_24_UP;

// SPA_RX_CH0_PREV_ADDR_UP_REG
wire [7:0]	o_RX_CH0_PREV_ADDR_UP;

// SPA_RX_CH1_PREV_ADDR_UP_REG
wire [7:0]	o_RX_CH1_PREV_ADDR_UP;

// SPA_RX_CH2_PREV_ADDR_UP_REG
wire [7:0]	o_RX_CH2_PREV_ADDR_UP;

// SPA_RX_CH0_CURR_ADDR_UP_REG
wire [7:0]	o_RX_CH0_CURR_ADDR_UP;

// SPA_RX_CH1_CURR_ADDR_UP_REG
wire [7:0]	o_RX_CH1_CURR_ADDR_UP;

// SPA_RX_CH2_CURR_ADDR_UP_REG
wire [7:0]	o_RX_CH2_CURR_ADDR_UP;

// SPA_RX_CH0_START_ADDR_UP_REG
wire [7:0]	o_RX_CH0_START_ADDR_UP;

// SPA_RX_CH1_START_ADDR_UP_REG
wire [7:0]	o_RX_CH1_START_ADDR_UP;

// SPA_RX_CH2_START_ADDR_UP_REG
wire [7:0]	o_RX_CH2_START_ADDR_UP;

// SPA_RX_CUR_ADDR_CH0_UP_REG
wire [7:0]	o_RX_CUR_ADDR_CH0_UP;

// SPA_RX_CUR_ADDR_CH1_UP_REG
wire [7:0]	o_RX_CUR_ADDR_CH1_UP;

// SPA_RX_CUR_ADDR_CH2_UP_REG
wire [7:0]	o_RX_CUR_ADDR_CH2_UP;

// SPA_TX_CH0_START_ADDR_UP_REG
wire [7:0]	o_TX_CH0_START_ADDR_UP;

// SPA_TX_CH1_START_ADDR_UP_REG
wire [7:0]	o_TX_CH1_START_ADDR_UP;

// SPA_TX_CH2_START_ADDR_UP_REG
wire [7:0]	o_TX_CH2_START_ADDR_UP;

// SPA_TX_ADDR_CH0_MAX_UP_REG
wire [7:0]	o_TX_ADDR_CH0_MAX_UP;

// SPA_TX_ADDR_CH0_MIN_UP_REG
wire [7:0]	o_TX_ADDR_CH0_MIN_UP;

// SPA_TX_ADDR_CH1_MAX_UP_REG
wire [7:0]	o_TX_ADDR_CH1_MAX_UP;

// SPA_TX_ADDR_CH1_MIN_UP_REG
wire [7:0]	o_TX_ADDR_CH1_MIN_UP;

// SPA_TX_ADDR_CH2_MAX_UP_REG
wire [7:0]	o_TX_ADDR_CH2_MAX_UP;

// SPA_TX_ADDR_CH2_MIN_UP_REG
wire [7:0]	o_TX_ADDR_CH2_MIN_UP;

// SPA_TX_CH0_CUR_ADDR_UP_REG
wire [7:0]	o_TX_CH0_CUR_ADDR_UP;

// SPA_TX_CH1_CUR_ADDR_UP_REG
wire [7:0]	o_TX_CH1_CUR_ADDR_UP;

// SPA_TX_CH2_CUR_ADDR_UP_REG
wire [7:0]	o_TX_CH2_CUR_ADDR_UP;

// SPA_ADAPT_DMA_ADDR_UP_REG
wire [7:0]	o_ADAPT_ADDR_UP;

// SPA_ADAPT_TX_ADDR_MAX_UP_REG
wire [7:0]	o_ADAPT_TX_ADDR_MAX_UP;

// SPA_ADAPT_TX_ADDR_MIN_UP_REG
wire [7:0]	o_ADAPT_TX_ADDR_MIN_UP;

// SPA_ADAPT_TX_CUR_ADDR_UP_REG
wire [7:0]	o_ADAPT_TX_CUR_ADDR_UP;

// SPA_SMAP_DMA_ADDR_UP_REG
wire [7:0]	o_SMAP_ADDR_UP;

// SPA_SMAP_TX_ADDR_MAX_UP_REG
wire [7:0]	o_SMAP_TX_ADDR_MAX_UP;

// SPA_SMAP_TX_ADDR_MIN_UP_REG
wire [7:0]	o_SMAP_TX_ADDR_MIN_UP;

// SPA_SMAP_TX_CUR_ADDR_UP_REG
wire [7:0]	o_SMAP_TX_CUR_ADDR_UP;

// SPA_BDS_DMA_ADDR_UP_REG
wire [7:0]	o_BDS_ADDR_UP;

// SPA_BDS_TX_ADDR_MAX_UP_REG
wire [7:0]	o_BDS_TX_ADDR_MAX_UP;

// SPA_BDS_TX_ADDR_MIN_UP_REG
wire [7:0]	o_BDS_TX_ADDR_MIN_UP;

// SPA_BDS_TX_CUR_ADDR_UP_REG
wire [7:0]	o_BDS_TX_CUR_ADDR_UP;

// SPA_ADAPT_DMA_BUF_WR_CNT_REG
wire [31:0]	o_ADAPT_DMA_BUF_WR_CNT;

// SPA_ADAPT_DMA_BUF_RD_CNT_REG
wire [31:0]	o_ADAPT_DMA_BUF_RD_CNT;

// SPA_ADAPT_DMA_OUT0_CNT_REG
wire [31:0]	o_ADAPT_DMA_OUT0_CNT;

// SPA_SMAP_DMA_BUF_WR_CNT_REG
wire [31:0]	o_SMAP_DMA_BUF_WR_CNT;

// SPA_SMAP_DMA_BUF_RD_CNT_REG
wire [31:0]	o_SMAP_DMA_BUF_RD_CNT;

// SPA_SMAP_DMA_OUT0_CNT_REG
wire [31:0]	o_SMAP_DMA_OUT0_CNT;

// SPA_BDS_DMA_BUF_WR_CNT_REG
wire [31:0]	o_BDS_DMA_BUF_WR_CNT;

// SPA_BDS_DMA_BUF_RD_CNT_REG
wire [31:0]	o_BDS_DMA_BUF_RD_CNT;

// SPA_BDS_DMA_OUT0_CNT_REG
wire [31:0]	o_BDS_DMA_OUT0_CNT;

// SPA_ADAPT_WDATA_CNT_REG
wire [31:0]	o_ADAPT_WDATA_CNT;

// SPA_SMAP_WDATA_CNT_REG
wire [31:0]	o_SMAP_WDATA_CNT;

// SPA_BDS_WDATA_CNT_REG
wire [31:0]	o_BDS_WDATA_CNT;



// SPA_SW_RESET_REG
reg 			r_DMA_RESET;
reg 			r_GLOBAL_RESET;

// SPA_CORE_START_REG
reg 			r_CORE_START;
reg 			r_CORE_BUSY;

// SPA_MODE_REG
reg [1:0]	r_RX_COLOR_MODE;
reg [1:0]	r_TX_COLOR_MODE;
reg [2:0]	r_RX_DPI_MODE;

// SPA_MODULE_EN_REG
reg 			r_VSD_EN;
reg 			r_CIS_EN;
reg 			r_RC1_EN;
reg 			r_S1D_EN;
reg 			r_SEG1_EN;
reg 			r_SCC_EN;
reg 			r_SEG2_EN;
reg 			r_ABSD_EN;
reg 			r_NEWABSD_EN;
reg 			r_MAGD_EN;
reg 			r_ACS_EN;
reg 			r_BLANK_EN;
reg 			r_ACBD_EN;
reg 			r_ORIENT_EN;
reg 			r_CLA_EN;
reg 			r_BDS_EN;
reg 			r_ADAPT_EN;
reg 			r_SMAP_EN;
reg 			r_TX_CH_EN;

// SPA_RX_XD_REG
reg [15:0]	r_RX_XD;

// SPA_RX_YD_REG
reg [15:0]	r_RX_YD;

// SPA_TX_IMG_SIZE_REG
reg [15:0]	r_TX_XD;
reg [15:0]	r_TX_YD;

// SPA_RX_PADDING_VAL_REG
reg [7:0]	r_CH0_PADDING_VAL;
reg [7:0]	r_CH1_PADDING_VAL;
reg [7:0]	r_CH2_PADDING_VAL;

// SPA_VERSION_REG
reg [31:0]	r_VERSION;

// SPA_IRQ_ENABLE_REG
reg 			r_RX_BAND_START_EN;
reg 			r_RX_BAND_END_EN;
reg 			r_TX_BAND_START_EN;
reg 			r_BAND_END_EN;
reg 			r_PAGE_END_EN;
reg 			r_ABS_DETECT_DONE_EN;
reg 			r_ADAPT_TX_END_EN;
reg 			r_SMAP_TX_END_EN;
reg 			r_SW_RESET_DONE;
reg 			r_TX_ERR;
reg 			r_DTX_ADAPT_START_EN;
reg 			r_DTX_SMAP_START_EN;
reg 			r_DMA_TX_ADDR_ERR_CH0;
reg 			r_DMA_TX_ADDR_ERR_CH1;
reg 			r_DMA_TX_ADDR_ERR_CH2;
reg 			r_MAGD_DONE;
reg 			r_CLA_DONE;
reg 			r_ADAPT_TX_ADDR_ERR_EN;
reg 			r_SMAP_TX_ADDR_ERR_EN;
reg 			r_TBL_DMA_END;
reg 			r_TX_YD_ERR;
reg 			r_RX_ERR;
reg 			r_BDS_TX_END_EN;
reg 			r_DTX_BDS_START_EN;
reg 			r_BDS_TX_ADDR_ERR_EN;
reg 			r_ORI_DONE;
reg 			r_nABSD_DETECT_DONE;
reg 			r_ACBD_DETECT_DONE;
reg 			r_ACS_DONE;
reg 			r_VSD_DONE;
reg 			r_TX_CH_START_ERR_EN;
reg 			r_TX_PAGE_END;

// SPA_IRQ_PEND_REG
reg 			r_RX_BAND_START;
reg 			r_RX_BAND_END;
reg 			r_TX_BAND_START;
reg 			r_BAND_END;
reg 			r_PAGE_END;
reg 			r_ABSD_DETECT_END;
reg 			r_ADAPT_TX_END;
reg 			r_SMAP_TX_END;
reg 			r_DMA_STOP_DONE;
reg 			r_TX_ERR;
reg 			r_DTX_ADAPT_START_ERR;
reg 			r_DTX_SMAP_START_ERR;
reg 			r_DMA_TX_ADDR_ERR_CH0;
reg 			r_DMA_TX_ADDR_ERR_CH1;
reg 			r_DMA_TX_ADDR_ERR_CH2;
reg 			r_MAGD_DONE;
reg 			r_CLA_DONE;
reg 			r_ADAPT_TX_ADDR_ERR;
reg 			r_SMAP_TX_ADDR_ERR;
reg 			r_TBL_DMA_END;
reg 			r_TX_YD_ERR;
reg 			r_RX_ERR;
reg 			r_BDS_TX_END;
reg 			r_DTX_BDS_START_ERR;
reg 			r_BDS_TX_ADDR_ERR;
reg 			r_ORI_DONE;
reg 			r_nABSD_DETECT_DONE;
reg 			r_ACBD_DETECT_DONE;
reg 			r_ACS_DONE;
reg 			r_VSD_DONE;
reg 			r_TX_CH_START_ERR;
reg 			r_TX_PAGE_END;

// SPA_IRQ_SVC_CNT_REG
reg [31:0]	r_IRQ_SVC_CNT;

// SPA_RAM_SW_MODE_REG
reg 			r_RAM_SW_MODE;

// SPA_RAM_CS_REG
reg 			r_RAM_CS_00;
reg 			r_RAM_CS_01;
reg 			r_RAM_CS_02;
reg 			r_RAM_CS_03;
reg 			r_RAM_CS_04;
reg 			r_RAM_CS_05;
reg 			r_RAM_CS_06;
reg 			r_RAM_CS_07;
reg 			r_RAM_CS_08;
reg 			r_RAM_CS_09;
reg 			r_RAM_CS_10;
reg 			r_RAM_CS_11;
reg 			r_RAM_CS_12;
reg 			r_RAM_CS_13;
reg 			r_RAM_CS_14;
reg 			r_RAM_CS_15;
reg 			r_RAM_CS_16;
reg 			r_RAM_CS_17;
reg 			r_RAM_CS_18;
reg 			r_RAM_CS_19;
reg 			r_RAM_CS_20;
reg 			r_RAM_CS_21;
reg 			r_RAM_CS_22;
reg 			r_RAM_CS_23;
reg 			r_RAM_CS_24;

// SPA_RAM_DATA_REG
reg [31:0]	r_RAM_DATA;

// SPA_RAM_ADDR_REG
reg [31:0]	r_RAM_ADDR;

// SPA_CORE_BAND_DONE_REG
reg 			r_ALL_BAND_DONE;
reg 			r_SEG2_BAND_DONE;
reg 			r_SCC_BAND_DONE;
reg 			r_SEG1_BAND_DONE;
reg 			r_BSSB_BAND_DONE;
reg 			r_S1D_BAND_DONE;
reg 			r_RC1_BAND_DONE;
reg 			r_CIS_BAND_DONE;
reg 			r_VSD_BAND_DONE;

// SPA_CORE_PAGE_DONE_REG
reg 			r_ALL_PAGE_DONE;
reg 			r_SEG2_PAGE_DONE;
reg 			r_SCC_PAGE_DONE;
reg 			r_SEG1_PAGE_DONE;
reg 			r_BSSB_PAGE_DONE;
reg 			r_S1D_PAGE_END;
reg 			r_RC1_PAGE_DONE;
reg 			r_CIS_PAGE_DONE;
reg 			r_VSD_PAGE_DONE;

// SPA_TBL_RX_CNT_REG
reg [15:0]	r_TBL_RX_END_CNT;
reg [15:0]	r_TBL_RX_START_CNT;

// SPA_TBL_TX_CNT_REG
reg [15:0]	r_TBL_TX_END_CNT;
reg [15:0]	r_TBL_TX_START_CNT;

// SPA_TBL_END_STATUS1_REG
reg [29:0]	r_TBL_END_STATUS1;

// SPA_TBL_START_REG
reg 			r_TBL_START;
reg 			r_TBL_RW;

// SPA_TBL_ENABLE_REG
reg 			r_TBL_ENABLE00;
reg 			r_TBL_ENABLE01;
reg 			r_TBL_ENABLE02;
reg 			r_TBL_ENABLE03;
reg 			r_TBL_ENABLE04;
reg 			r_TBL_ENABLE05;
reg 			r_TBL_ENABLE06;
reg 			r_TBL_ENABLE07;
reg 			r_TBL_ENABLE08;
reg 			r_TBL_ENABLE09;
reg 			r_TBL_ENABLE10;
reg 			r_TBL_ENABLE11;
reg 			r_TBL_ENABLE12;
reg 			r_TBL_ENABLE13;
reg 			r_TBL_ENABLE14;
reg 			r_TBL_ENABLE15;
reg 			r_TBL_ENABLE16;
reg 			r_TBL_ENABLE17;
reg 			r_TBL_ENABLE18;
reg 			r_TBL_ENABLE19;
reg 			r_TBL_ENABLE20;
reg 			r_TBL_ENABLE21;
reg 			r_TBL_ENABLE22;
reg 			r_TBL_ENABLE23;
reg 			r_TBL_ENABLE24;

// SPA_TBL_ADDR_00_REG
reg [31:0]	r_TBL_ADDR_00;

// SPA_TBL_ADDR_01_REG
reg [31:0]	r_TBL_ADDR_01;

// SPA_TBL_ADDR_02_REG
reg [31:0]	r_TBL_ADDR_02;

// SPA_TBL_ADDR_03_REG
reg [31:0]	r_TBL_ADDR_03;

// SPA_TBL_ADDR_04_REG
reg [31:0]	r_TBL_ADDR_04;

// SPA_TBL_ADDR_05_REG
reg [31:0]	r_TBL_ADDR_05;

// SPA_TBL_ADDR_06_REG
reg [31:0]	r_TBL_ADDR_06;

// SPA_TBL_ADDR_07_REG
reg [31:0]	r_TBL_ADDR_07;

// SPA_TBL_ADDR_08_REG
reg [31:0]	r_TBL_ADDR_08;

// SPA_TBL_ADDR_09_REG
reg [31:0]	r_TBL_ADDR_09;

// SPA_TBL_ADDR_10_REG
reg [31:0]	r_TBL_ADDR_10;

// SPA_TBL_ADDR_11_REG
reg [31:0]	r_TBL_ADDR_11;

// SPA_TBL_ADDR_12_REG
reg [31:0]	r_TBL_ADDR_12;

// SPA_TBL_ADDR_13_REG
reg [31:0]	r_TBL_ADDR_13;

// SPA_TBL_ADDR_14_REG
reg [31:0]	r_TBL_ADDR_14;

// SPA_TBL_ADDR_15_REG
reg [31:0]	r_TBL_ADDR_15;

// SPA_TBL_ADDR_16_REG
reg [31:0]	r_TBL_ADDR_16;

// SPA_TBL_ADDR_17_REG
reg [31:0]	r_TBL_ADDR_17;

// SPA_TBL_ADDR_18_REG
reg [31:0]	r_TBL_ADDR_18;

// SPA_TBL_ADDR_19_REG
reg [31:0]	r_TBL_ADDR_19;

// SPA_TBL_ADDR_20_REG
reg [31:0]	r_TBL_ADDR_20;

// SPA_TBL_ADDR_21_REG
reg [31:0]	r_TBL_ADDR_21;

// SPA_TBL_ADDR_22_REG
reg [31:0]	r_TBL_ADDR_22;

// SPA_TBL_ADDR_23_REG
reg [31:0]	r_TBL_ADDR_23;

// SPA_TBL_ADDR_24_REG
reg [31:0]	r_TBL_ADDR_24;

// SPA_RX_START_REG
reg 			r_RX_START;

// SPA_RX_INCR_REG
reg [31:0]	r_RX_INCR;

// SPA_RX_CH0_PREV_ADDR_REG
reg [31:0]	r_RX_CH0_PREV_ADDR;

// SPA_RX_CH1_PREV_ADDR_REG
reg [31:0]	r_RX_CH1_PREV_ADDR;

// SPA_RX_CH2_PREV_ADDR_REG
reg [31:0]	r_RX_CH2_PREV_ADDR;

// SPA_RX_CH0_CURR_ADDR_REG
reg [31:0]	r_RX_CH0_CURR_ADDR;

// SPA_RX_CH1_CURR_ADDR_REG
reg [31:0]	r_RX_CH1_CURR_ADDR;

// SPA_RX_CH2_CURR_ADDR_REG
reg [31:0]	r_RX_CH2_CURR_ADDR;

// SPA_RX_CH0_START_ADDR_REG
reg [31:0]	r_RX_CH0_START_ADDR;

// SPA_RX_CH1_START_ADDR_REG
reg [31:0]	r_RX_CH1_START_ADDR;

// SPA_RX_CH2_START_ADDR_REG
reg [31:0]	r_RX_CH2_START_ADDR;

// SPA_RX_BLK_CNT_REG
reg [7:0]	r_RX_BLK_CNT;
reg [7:0]	r_RX_BAND_CNT;

// SPA_RX_STATUS_REG
reg 			r_BUSY;

// SPA_RX_CH0_CUR_ADDR_REG
reg [31:0]	r_RX_CH0_CUR_ADDR;

// SPA_RX_CH1_CUR_ADDR_REG
reg [31:0]	r_RX_CH1_CUR_ADDR;

// SPA_RX_CH2_CUR_ADDR_REG
reg [31:0]	r_RX_CH2_CUR_ADDR;

// SPA_RX_CH0_SVC_CNT_REG
reg [31:0]	r_RX_CH0_SVC_CNT;

// SPA_RX_CH1_SVC_CNT_REG
reg [31:0]	r_RX_CH1_SVC_CNT;

// SPA_RX_CH2_SVC_CNT_REG
reg [31:0]	r_RX_CH2_SVC_CNT;

// SPA_RX_DMA_CON_REG
reg [2:0]	r_RX_ISSUE_CAP;
reg [3:0]	r_RX_ARCACHE;
reg 			r_RX_ARPROT0;
reg 			r_RX_ARPROT1;
reg 			r_RX_ARPROT2;
reg [1:0]	r_RX_SWAP_EN;

// SPA_RX_ERR_STATUS_REG
reg 			r_RX_RID_ERR_0;
reg 			r_RX_RID_ERR_1;
reg 			r_RX_RID_ERR_2;
reg 			r_RX_RID_ERR_3;
reg 			r_RX_RRESP_ERR_0;
reg 			r_RX_RRESP_ERR_1;

// SPA_TX_START_REG
reg 			r_TX_START;

// SPA_TX_DMA_CON_REG
reg [4:0]	r_MAX_WISSUE;
reg 			r_TX_INT_CHECK;
reg 			r_ALPHA_CH_ON;
reg 			r_ARB_MODE;
reg [3:0]	r_TX_AWCACHE;
reg 			r_TX_AWPROT0;
reg 			r_TX_AWPROT1;
reg 			r_TX_AWPROT2;
reg [1:0]	r_TX_SWAP_EN;

// SPA_TX_BAND_NUM_REG
reg [7:0]	r_TX_BAND_NUM;

// SPA_TX_DATA_INCR_REG
reg [15:0]	r_TX_DATA_INCR;

// SPA_TX_CH0_START_ADDR_REG
reg [31:0]	r_TX_CH0_START_ADDR;

// SPA_TX_CH1_START_ADDR_REG
reg [31:0]	r_TX_CH1_START_ADDR;

// SPA_TX_CH2_START_ADDR_REG
reg [31:0]	r_TX_CH2_START_ADDR;

// SPA_TX_BLK_CNT_REG
reg [7:0]	r_TX_BLK_CNT;
reg [7:0]	r_TX_BAND_CNT;

// SPA_TX_STATUS_REG
reg 			r_BUSY;

// SPA_TX_ADDR_CH0_MAX_REG
reg [31:0]	r_TX_ADDR_CH0_MAX;

// SPA_TX_ADDR_CH0_MIN_REG
reg [31:0]	r_TX_ADDR_CH0_MIN;

// SPA_TX_ADDR_CH1_MAX_REG
reg [31:0]	r_TX_ADDR_CH1_MAX;

// SPA_TX_ADDR_CH1_MIN_REG
reg [31:0]	r_TX_ADDR_CH1_MIN;

// SPA_TX_ADDR_CH2_MAX_REG
reg [31:0]	r_TX_ADDR_CH2_MAX;

// SPA_TX_ADDR_CH2_MIN_REG
reg [31:0]	r_TX_ADDR_CH2_MIN;

// SPA_TX_CH0_CUR_ADDR_REG
reg [31:0]	r_TX_CH0_CUR_ADDR;

// SPA_TX_CH1_CUR_ADDR_REG
reg [31:0]	r_TX_CH1_CUR_ADDR;

// SPA_TX_CH2_CUR_ADDR_REG
reg [31:0]	r_TX_CH2_CUR_ADDR;

// SPA_TX_CH0_SVC_CNT_REG
reg [31:0]	r_TX_CH0_SVC_CNT;

// SPA_TX_CH1_SVC_CNT_REG
reg [31:0]	r_TX_CH1_SVC_CNT;

// SPA_TX_CH2_SVC_CNT_REG
reg [31:0]	r_TX_CH2_SVC_CNT;

// SPA_TX_ERR_STATUS_REG
reg 			r_TX_ERR_ID_0;
reg 			r_TX_ERR_ID_1;
reg 			r_TX_ERR_ID_2;
reg 			r_TX_ERR_ID_3;
reg 			r_TX_ERR_RESP_0;
reg 			r_TX_ERR_RESP_1;

// SPA_ADAPT_DMA_CON_REG
reg [1:0]	r_ADAPT_SMAP_INT_CHECK;
reg [7:0]	r_ADAPT_OUT_BANDS;

// SPA_ADAPT_DMA_ADDR_REG
reg [31:0]	r_ADAPT_ADDR;

// SPA_ADAPT_DMA_ADDR_INCR_REG
reg [31:0]	r_ADAPT_ADDR_INCR;

// SPA_ADAPT_DMA_STATUS_REG
reg 			r_ADAPT_TX_BUSY;
reg [15:0]	r_ADAPT_OUT_LINES;

// SPA_ADAPT_TX_ADDR_MAX_REG
reg [31:0]	r_ADAPT_TX_ADDR_MAX;

// SPA_ADAPT_TX_ADDR_MIN_REG
reg [31:0]	r_ADAPT_TX_ADDR_MIN;

// SPA_ADAPT_TX_CUR_ADDR_REG
reg [31:0]	r_ADAPT_TX_CUR_ADDR;

// SPA_ADAPT_TX_SVC_CNT_REG
reg [31:0]	r_ADAPT_TX_SVC_CNT;

// SPA_ADAPT_START_REG
reg 			r_ADAPT_START;

// SPA_ADAPT_BAND_CNT_REG
reg [7:0]	r_ADAPT_BAND_CNT;

// SPA_SMAP_DMA_CON_REG
reg [7:0]	r_SMAP_OUT_BANDS;

// SPA_SMAP_DMA_ADDR_REG
reg [31:0]	r_SMAP_ADDR;

// SPA_SMAP_DMA_ADDR_INCR_REG
reg [31:0]	r_SMAP_ADDR_INCR;

// SPA_SMAP_DMA_STATUS_REG
reg 			r_SMAP_TX_BUSY;
reg [15:0]	r_SMAP_OUT_LINES;

// SPA_SMAP_TX_ADDR_MAX_REG
reg [31:0]	r_SMAP_TX_ADDR_MAX;

// SPA_SMAP_TX_ADDR_MIN_REG
reg [31:0]	r_SMAP_TX_ADDR_MIN;

// SPA_SMAP_TX_CUR_ADDR_REG
reg [31:0]	r_SMAP_TX_CUR_ADDR;

// SPA_SMAP_TX_SVC_CNT_REG
reg [31:0]	r_SMAP_TX_SVC_CNT;

// SPA_SMAP_START_REG
reg 			r_SMAP_START;

// SPA_SMAP_BAND_CNT_REG
reg [7:0]	r_SMAP_BAND_CNT;

// SPA_BDS_DMA_CON_REG
reg [7:0]	r_BDS_OUT_BANDS;

// SPA_BDS_DMA_ADDR_REG
reg [31:0]	r_BDS_ADDR;

// SPA_BDS_DMA_ADDR_INCR_REG
reg [31:0]	r_BDS_ADDR_INCR;

// SPA_BDS_DMA_STATUS_REG
reg 			r_BDS_TX_BUSY;
reg [15:0]	r_BDS_OUT_LINES;

// SPA_BDS_TX_ADDR_MAX_REG
reg [31:0]	r_BDS_TX_ADDR_MAX;

// SPA_BDS_TX_ADDR_MIN_REG
reg [31:0]	r_BDS_TX_ADDR_MIN;

// SPA_BDS_TX_CUR_ADDR_REG
reg [31:0]	r_BDS_TX_CUR_ADDR;

// SPA_BDS_TX_SVC_CNT_REG
reg [31:0]	r_BDS_TX_SVC_CNT;

// SPA_BDS_START_REG
reg 			r_BDS_START;

// SPA_BDS_BAND_CNT_REG
reg [7:0]	r_BDS_BAND_CNT;

// SPA_RX_CH0_CRC_REG
reg [31:0]	r_RX_CH0_CRC;

// SPA_RX_CH1_CRC_REG
reg [31:0]	r_RX_CH1_CRC;

// SPA_RX_CH2_CRC_REG
reg [31:0]	r_RX_CH2_CRC;

// SPA_RC1_CH0_CRC_REG
reg [31:0]	r_RC1_CH0_CRC;

// SPA_RC1_CH1_CRC_REG
reg [31:0]	r_RC1_CH1_CRC;

// SPA_RC1_CH2_CRC_REG
reg [31:0]	r_RC1_CH2_CRC;

// SPA_RC1_CH0_CRC_DEBUG_REG
reg [31:0]	r_RC1_CH0_CRC_DEBUG;

// SPA_RC1_CH1_CRC_DEBUG_REG
reg [31:0]	r_RC1_CH1_CRC_DEBUG;

// SPA_RC1_CH2_CRC_DEBUG_REG
reg [31:0]	r_RC1_CH2_CRC_DEBUG;

// SPA_S1D_CH0_CRC_REG
reg [31:0]	r_S1D_CH0_CRC;

// SPA_S1D_CH1_CRC_REG
reg [31:0]	r_S1D_CH1_CRC;

// SPA_S1D_CH2_CRC_REG
reg [31:0]	r_S1D_CH2_CRC;

// SPA_SEG1_CH0_CRC_REG
reg [31:0]	r_SEG1_CH0_CRC;

// SPA_SEG1_CH1_CRC_REG
reg [31:0]	r_SEG1_CH1_CRC;

// SPA_SEG1_CH2_CRC_REG
reg [31:0]	r_SEG1_CH2_CRC;

// SPA_SEG1_ATT_CRC_REG
reg [31:0]	r_SEG1_ATT_CRC;

// SPA_SCC_CH0_CRC_REG
reg [31:0]	r_SCC_CH0_CRC;

// SPA_SCC_CH1_CRC_REG
reg [31:0]	r_SCC_CH1_CRC;

// SPA_SCC_CH2_CRC_REG
reg [31:0]	r_SCC_CH2_CRC;

// SPA_SCC_ATT_CRC_REG
reg [31:0]	r_SCC_ATT_CRC;

// SPA_SEG2_CH0_CRC_REG
reg [31:0]	r_SEG2_CH0_CRC;

// SPA_SEG2_CH1_CRC_REG
reg [31:0]	r_SEG2_CH1_CRC;

// SPA_SEG2_CH2_CRC_REG
reg [31:0]	r_SEG2_CH2_CRC;

// SPA_SEG2_ATT_CRC_REG
reg [31:0]	r_SEG2_ATT_CRC;

// SPA_BSSA_CH0_CRC_REG
reg [31:0]	r_BSSA_CH0_CRC;

// SPA_BSSA_CH1_CRC_REG
reg [31:0]	r_BSSA_CH1_CRC;

// SPA_BSSA_CH2_CRC_REG
reg [31:0]	r_BSSA_CH2_CRC;

// SPA_DMATX_CH0_CRC_REG
reg [31:0]	r_DMATX_CH0_CRC;

// SPA_DMATX_CH1_CRC_REG
reg [31:0]	r_DMATX_CH1_CRC;

// SPA_DMATX_CH2_CRC_REG
reg [31:0]	r_DMATX_CH2_CRC;

// SPA_RC2_CH0_CRC_REG
reg [31:0]	r_RC2_CH0_CRC;

// SPA_RC2_CH1_CRC_REG
reg [31:0]	r_RC2_CH1_CRC;

// SPA_RC2_CH2_CRC_REG
reg [31:0]	r_RC2_CH2_CRC;

// SPA_ADAPT_CRC_REG
reg [31:0]	r_ADAPT_CRC;

// SPA_SMAP_CRC_REG
reg [31:0]	r_SMAP_CRC;

// SPA_BDS_CRC_REG
reg [31:0]	r_BDS_CRC;

// SPA_VSD_CH0_CRC_REG
reg [31:0]	r_VSD_CH0_CRC;

// SPA_VSD_CH1_CRC_REG
reg [31:0]	r_VSD_CH1_CRC;

// SPA_VSD_CH2_CRC_REG
reg [31:0]	r_VSD_CH2_CRC;

// SPA_CIS_CH0_CRC_REG
reg [31:0]	r_CIS_CH0_CRC;

// SPA_CIS_CH1_CRC_REG
reg [31:0]	r_CIS_CH1_CRC;

// SPA_CIS_CH2_CRC_REG
reg [31:0]	r_CIS_CH2_CRC;

// SPA_BSSB_CH0_CRC_REG
reg [31:0]	r_BSSB_CH0_CRC;

// SPA_BSSB_CH1_CRC_REG
reg [31:0]	r_BSSB_CH1_CRC;

// SPA_BSSB_CH2_CRC_REG
reg [31:0]	r_BSSB_CH2_CRC;

// SPA_S1D_DEBUG_FLAG_REG
reg [7:0]	r_DEBUG_FLAG;

// SPA_SCC_DEBUG_FLAG_REG
reg [7:0]	r_DEBUG_FLAG;

// SPA_BDS_DEBUG_FLAG_REG
reg [7:0]	r_DEBUG_FLAG;

// SPA_BSSA_DEBUG_FLAG_REG
reg [7:0]	r_BSSA_DEBUG_FLAG;

// SPA_BSSB_DEBUG_FLAG_REG
reg [7:0]	r_BSSB_DEBUG_FLAG;

// SPA_VSD_A_REG
reg [1:0]	r_VSC_DEBUG;
reg 			r_VSC_CUR_MEM_INIT;

// SPA_VSD_B_REG
reg [7:0]	r_VSD_K_DEPTH_MIN;
reg [3:0]	r_VSD_TOP_BAND;

// SPA_VSD_C_REG
reg [7:0]	r_VSD_K_DEPTH_MAX_TOP;
reg [7:0]	r_VSD_K_DEPTH_MIN_TOP;
reg [7:0]	r_VSD_K_DEPTH_MAX;
reg [7:0]	r_VSD_K_DEPTH_MID;

// SPA_VSC_D_REG
reg [7:0]	r_VSD_W_DEPTH_MAX;
reg [7:0]	r_VSD_W_DEPTH_MID;
reg [7:0]	r_VSD_W_DEPTH_MIN;
reg [6:0]	r_VSD_K_DEPTH_COND;

// SPA_VSD_E_REG
reg [7:0]	r_VSD_THICKNESS_TH;
reg [7:0]	r_VSD_W_DEPTH_COND;
reg [7:0]	r_VSD_W_DEPTH_MAX_TOP;
reg [7:0]	r_VSD_W_DEPTH_MIN_TOP;

// SPA_VSD_F_REG
reg [6:0]	r_VSD_CHROMA_TH2_TOP;
reg [6:0]	r_VSD_CHROMA_TH1_TOP;
reg [6:0]	r_VSD_CHROMA_TH2;
reg [6:0]	r_VSD_CHROMA_TH1;

// SPA_VSD_G_REG
reg [7:0]	r_VSD_FREQUENCY_TH;
reg [7:0]	r_VSD_CONTINUITY_TH;

// SPA_VSD_H_REG
reg [12:0]	r_VSD_REFINE_TH;
reg 			r_VSD_REFINE_EN;

// SPA_CIS_SUB_COEF_R_REG
reg [8:0]	r_CIS_SUB_COEF_R1;
reg [8:0]	r_CIS_SUB_COEF_R2;

// SPA_CIS_SUB_COEF_G_REG
reg [8:0]	r_CIS_SUB_COEF_G0;
reg [8:0]	r_CIS_SUB_COEF_G1;
reg [8:0]	r_CIS_SUB_COEF_G2;

// SPA_CIS_SUB_COEF_B_REG
reg [8:0]	r_CIS_SUB_COEF_B0;
reg [8:0]	r_CIS_SUB_COEF_B1;

// SPA_RC1_SHIFT_VAL_REG
reg [31:0]	r_RC1_SHIFT_VAL;

// SPA_RC1_SHIFT_OFST_REG
reg [31:0]	r_RC1_SHIFT_OFST;

// SPA_RC1_LOOP_REG
reg [2:0]	r_RC1_LOOP_Y;
reg [2:0]	r_RC1_LOOP_X;

// SPA_RC1_X_COF_00_01_REG
reg [11:0]	r_RC1_X_COF_01;
reg [11:0]	r_RC1_X_COF_00;

// SPA_RC1_X_COF_02_03_REG
reg [11:0]	r_RC1_X_COF_03;
reg [11:0]	r_RC1_X_COF_02;

// SPA_RC1_X_COF_10_11_REG
reg [11:0]	r_RC1_X_COF_11;
reg [11:0]	r_RC1_X_COF_10;

// SPA_RC1_X_COF_12_13_REG
reg [11:0]	r_RC1_X_COF_13;
reg [11:0]	r_RC1_X_COF_12;

// SPA_RC1_X_COF_20_21_REG
reg [11:0]	r_RC1_X_COF_21;
reg [11:0]	r_RC1_X_COF_20;

// SPA_RC1_X_COF_22_23_REG
reg [11:0]	r_RC1_X_COF_23;
reg [11:0]	r_RC1_X_COF_22;

// SPA_RC1_X_COF_30_31_REG
reg [11:0]	r_RC1_X_COF_31;
reg [11:0]	r_RC1_X_COF_30;

// SPA_RC1_X_COF_32_33_REG
reg [11:0]	r_RC1_X_COF_33;
reg [11:0]	r_RC1_X_COF_32;

// SPA_RC1_Y_COF_00_01_REG
reg [11:0]	r_RC1_Y_COF_01;
reg [11:0]	r_RC1_Y_COF_00;

// SPA_RC1_Y_COF_02_03_REG
reg [11:0]	r_RC1_Y_COF_03;
reg [11:0]	r_RC1_Y_COF_02;

// SPA_RC1_Y_COF_10_11_REG
reg [11:0]	r_RC1_Y_COF_11;
reg [11:0]	r_RC1_Y_COF_10;

// SPA_RC1_Y_COF_12_13_REG
reg [11:0]	r_RC1_Y_COF_13;
reg [11:0]	r_RC1_Y_COF_12;

// SPA_RC1_Y_COF_20_21_REG
reg [11:0]	r_RC1_Y_COF_21;
reg [11:0]	r_RC1_Y_COF_20;

// SPA_RC1_Y_COF_22_23_REG
reg [11:0]	r_RC1_Y_COF_23;
reg [11:0]	r_RC1_Y_COF_22;

// SPA_RC1_Y_COF_30_31_REG
reg [11:0]	r_RC1_Y_COF_31;
reg [11:0]	r_RC1_Y_COF_30;

// SPA_RC1_Y_COF_32_33_REG
reg [11:0]	r_RC1_Y_COF_33;
reg [11:0]	r_RC1_Y_COF_32;

// SPA_SEG1_CON_REG
reg 			r_Enable_Y_text;

// SPA_SEG1_HVLINE_TH_REG
reg [7:0]	r_HVline_level_th;
reg [7:0]	r_HVline_minmaxdiff_th2;
reg [7:0]	r_HVline_minmaxdiff_th1;
reg [7:0]	r_HVline_diff_th;

// SPA_SEG1_EDGE_TH_REG
reg [7:0]	r_Highfreq_th;
reg [7:0]	r_Lowfreq_th2;
reg [7:0]	r_Lowfreq_th;

// SPA_SEG1_LINE_TH_REG
reg [7:0]	r_Uni_edge_th;
reg [7:0]	r_Uni_edge_th2;
reg [7:0]	r_Uni_lowfreq_th;
reg [7:0]	r_Uni_highfreq_th;

// SPA_SEG1_ZC_TH_REG
reg [2:0]	r_ZC_scaling_shift;
reg [7:0]	r_ZC_edge_th;
reg [7:0]	r_White_th;

// SPA_SCC_CON_REG
reg 			r_SCC_LATTICE_STEP;
reg [1:0]	r_SCC_FLOATING_MODE;

// SPA_SEG2_CON_REG
reg 			r_Enable_FAR_9x9;
reg 			r_Enable_uniformtext;
reg 			r_Enable_contoneImage;

// SPA_SEG2_PARAM1_REG
reg [6:0]	r_edgecount_th;
reg [1:0]	r_text_index;
reg [7:0]	r_FG_level_th;

// SPA_SEG2_PARAM2_REG
reg [6:0]	r_zccount_th;
reg [6:0]	r_uniformlinecount_th;
reg [6:0]	r_halftonecount_th;
reg [6:0]	r_bgcnt_th;

// SPA_SEG2_FAR_CHROMA_PARAM_REG
reg [3:0]	r_FAR_chroma_th2_shiftcoef;
reg [7:0]	r_FAR_chroma_th;

// SPA_SEG2_FAR_Y_PARAM_REG
reg [3:0]	r_FAR_Y_th3_shiftcoef2;
reg [3:0]	r_FAR_Y_th2_shiftcoef1;
reg [7:0]	r_FAR_Y_th;

// SPA_SEG2_NEUT_CHROMA_PARAM_REG
reg [3:0]	r_Neut_chroma_th2_shiftcoef;
reg [7:0]	r_Neut_chroma_th;

// SPA_PAGE_EN_REG
reg 			r_PAGE_EN;

// SPA_BLOCK_SIZE_REG
reg [6:0]	r_BLOCK_SIZE_H;
reg [5:0]	r_BLOCK_SIZE_W;

// SPA_AREA_SIZE_REG
reg [13:0]	r_AREA_SIZE_H;
reg [13:0]	r_AREA_SIZE_W;

// SPA_CHAR_LENGTH_THICK_V_REG
reg [7:0]	r_CHAR_THICK_MAX_V;
reg [7:0]	r_CHAR_THICK_MIN_V;
reg [7:0]	r_CHAR_LENGTH_MIN_V;

// SPA_CHAR_LENGTH_THICK_H_REG
reg [7:0]	r_CHAR_THICK_MAX_H;
reg [7:0]	r_CHAR_THICK_MIN_H;
reg [7:0]	r_CHAR_LENGTH_MIN_H;

// SPA_DIFF_CHANGE_V_REG
reg [6:0]	r_CHANGE_CNT_TH_V;
reg [6:0]	r_CHANGE_RATIO_TH_V;
reg [3:0]	r_DIFF_SHIFT2_V;
reg [3:0]	r_DIFF_SHIFT1_V;

// SPA_DIFF_CHANGE_H_REG
reg [6:0]	r_CHANGE_CNT_TH_H;
reg [6:0]	r_CHANGE_RATIO_TH_H;
reg [3:0]	r_DIFF_SHIFT2_H;
reg [3:0]	r_DIFF_SHIFT1_H;

// SPA_DIR_TH1_REG
reg [7:0]	r_DIR_MAX_LOW_TH;
reg [7:0]	r_DIR_TH;
reg [7:0]	r_DIR_MAX_TH;
reg [7:0]	r_DIR_MIN_TH;

// SPA_DIR_TH2_REG
reg [7:0]	r_DIR_DIFF_TH3;
reg [7:0]	r_DIR_DIFF_TH2;
reg [7:0]	r_DIR_DIFF_TH1;
reg [7:0]	r_DIR_MAX_HIGH_TH;

// SPA_OUT_AREA_OFFSET1_REG
reg [10:0]	r_OUT_AREA_OFFSET_W;
reg [10:0]	r_OUT_AREA_OFFSET_H;

// SPA_OUT_AREA_OFFSET2_REG
reg [10:0]	r_OUT_AREA_OFFSET;

// SPA_LINE_SPACE_REG
reg [7:0]	r_LINE_SPACE_V;
reg [7:0]	r_LINE_SPACE_H;

// SPA_TEXT_FLAG_REG
reg 			r_TEXT_FLAG1;
reg 			r_TEXT_FLAG2;
reg 			r_TEXT_FLAG3;

// SPA_TEXT_AREA1_W_REG
reg [13:0]	r_TEXT_AREA1_EN_W;
reg [13:0]	r_TEXT_AREA1_ST_W;

// SPA_TEXT_AREA1_H_REG
reg [13:0]	r_TEXT_AREA1_EN_H;
reg [13:0]	r_TEXT_AREA1_ST_H;

// SPA_TEXT_AREA2_W_REG
reg [13:0]	r_TEXT_AREA2_EN_W;
reg [13:0]	r_TEXT_AREA2_ST_W;

// SPA_TEXT_AREA2_H_REG
reg [13:0]	r_TEXT_AREA2_EN_H;
reg [13:0]	r_TEXT_AREA2_ST_H;

// SPA_TEXT_AREA3_W_REG
reg [13:0]	r_TEXT_AREA3_EN_W;
reg [13:0]	r_TEXT_AREA3_ST_W;

// SPA_TEXT_AREA3_H_REG
reg [13:0]	r_TEXT_AREA3_EN_H;
reg [13:0]	r_TEXT_AREA3_ST_H;

// SPA_ABS_PRE_SCAN_LINE_REG
reg [13:0]	r_ABS_PRE_SCAN_LINE;

// SPA_ABS_PRE_SCAN_IWIN_REG
reg [13:0]	r_ABS_IWIN_END;
reg [13:0]	r_ABS_IWIN_START;

// SPA_ABS_TH_REG
reg [7:0]	r_ABS_WHITE_TH;
reg [7:0]	r_ABS_BLACK_TH;
reg 			r_ABS_NOISE_REM;

// SPA_ABS_VALID_PERCENTAGE_REG
reg [6:0]	r_ABS_VALID_PERCENTAGE;

// SPA_ABS_BK_STD_TH_REG
reg [7:0]	r_ABS_BK_STD_TH;

// SPA_ABS_SIGMA_REG
reg [6:0]	r_ABS_PERCENTAGE;
reg [5:0]	r_ABS_DETECT_SIGMA;
reg [5:0]	r_ABS_CONFID_SIGMA;

// SPA_ABS_BG_BACKUP_REG
reg 			r_ABS_BG_BACKUP_EN;
reg [7:0]	r_ABS_BG_BACKUP_TH;

// SPA_ABS_COLOR_EXCEPTION_REG
reg 			r_ABS_COLOR_EXCEPTION;
reg [7:0]	r_ABS_COLOR_TH2;
reg [7:0]	r_ABS_COLOR_TH1;

// SPA_ABS_TOP_BG_LEVEL_REG
reg [7:0]	r_ABS_TOP_BG_LEVEL;
reg [7:0]	r_ABS_MAX_CB;
reg [7:0]	r_ABS_MAX_CR;

// SPA_ABS_TOP_PEAK_CONFIDENCE_REG
reg [6:0]	r_ABS_TOP_PEAK_CONFIDENCE;
reg 			r_ABS_SUCCESS;

// SPA_ABS_PRE_SCAN_START_REG
reg [13:0]	r_ABS_PRE_SCAN_START;

// SPA_MAD_PRE_SCAN_LINE_REG
reg [13:0]	r_MAD_PRE_SCAN_LINE;

// SPA_MAD_PRE_SCAN_IWIN_REG
reg [13:0]	r_MAD_IWIN_END;
reg [13:0]	r_MAD_IWIN_START;

// SPA_MAD_TH_REG
reg [7:0]	r_MAD_WHITE_TH;
reg [7:0]	r_MAD_BLACK_TH;
reg 			r_MAD_NOISE_REM;

// SPA_MAD_VALID_PERCENTAGE_REG
reg [6:0]	r_MAD_VALID_PERCENTAGE;

// SPA_MAD_BK_STD_TH_REG
reg [7:0]	r_MAD_BK_STD_TH;

// SPA_MAD_SIGMA_REG
reg [6:0]	r_MAD_PERCENTAGE;
reg [5:0]	r_MAD_DETECT_SIGMA;
reg [5:0]	r_MAD_CONFID_SIGMA;

// SPA_MAD_BG_BACKUP_REG
reg 			r_MAD_BG_BACKUP_EN;
reg [7:0]	r_MAD_BG_BACKUP_TH;

// SPA_MAD_COLOR_EXCEPTION_REG
reg 			r_MAD_COLOR_EXCEPTION;
reg [7:0]	r_MAD_COLOR_TH2;
reg [7:0]	r_MAD_COLOR_TH1;

// SPA_MAD_TOP_BG_LEVEL_REG
reg [7:0]	r_MAD_TOP_BG_LEVEL;
reg [7:0]	r_MAD_MAX_CB;
reg [7:0]	r_MAD_MAX_CR;

// SPA_MAD_TOP_PEAK_CONFIDENCE_REG
reg [6:0]	r_MAD_TOP_PEAK_CONFIDENCE;
reg 			r_MAD_SUCCESS;

// SPA_MAD_PRE_SCAN_START_REG
reg [13:0]	r_MAD_PRE_SCAN_START;

// SPA_NEWABSD_SCAN_RANGE_REG
reg [13:0]	r_ABS_PRE_SCAN_LINE;
reg [13:0]	r_ABS_PRE_SCAN_START;

// SPA_NEWABSD_PRE_SCAN_IWIN_REG
reg [13:0]	r_ABS_IWIN_END;
reg [13:0]	r_ABS_IWIN_START;

// SPA_NEWABSD_CHOMA_TH_REG
reg [7:0]	r_COLOR_RIDGE_TH;
reg [7:0]	r_GRAY_RIDGE_TH;
reg [7:0]	r_CHROMA_TH;

// SPA_NEWABSD_LIMIT_REG
reg [7:0]	r_RIGHT_LIMIT;
reg [7:0]	r_LEFT_LIMIT;

// SPA_NEWABSD_HISTO_PEAK_REG
reg [7:0]	r_HISTO_COLOR_PEAK;
reg [7:0]	r_HISTO_GRAY_PEAK;

// SPA_NEWABSD_HISTO_LEFT_REG
reg [7:0]	r_HISTO_COLOR_LEFT;
reg [7:0]	r_HISTO_GRAY_LEFT;

// SPA_NEWABSD_HISTO_RIGHT_REG
reg [7:0]	r_HISTO_COLOR_RIGHT;
reg [7:0]	r_HISTO_GRAY_RIGHT;

// SPA_NEWABSD_RESULT_REG
reg 			r_PAPER_COLOR_FLAG;
reg [3:0]	r_MEM_READ_STAT;

// SPA_CLA_CON1_REG
reg [7:0]	r_HLCOUNT_MAXTH1;
reg [7:0]	r_HLCOUNT_MAXTH2;
reg [7:0]	r_HLCOUNT_DIFFTH1;
reg [7:0]	r_HLCOUNT_DIFFTH2;

// SPA_CLA_CON2_REG
reg [7:0]	r_HLGRAY_DIFFTH;
reg [10:0]	r_ContentsSizeTh;

// SPA_TOTAL_BIN_CNT_REG
reg [31:0]	r_TOTAL_BIN_CNT;

// SPA_HL_RANGE2_REG
reg [31:0]	r_HL_RANGE2;

// SPA_HL_COLOR2_REG
reg [31:0]	r_HL_COLOR2;

// SPA_BTEXT_CNT_REG
reg [31:0]	r_BTEXT_CNT;

// SPA_TEXT_CNT_REG
reg [31:0]	r_TEXT_CNT;

// SPA_HT_CNT_REG
reg [31:0]	r_HT_CNT;

// SPA_EDGE_CNT_REG
reg [31:0]	r_EDGE_CNT;

// SPA_WHITE_CNT_REG
reg [31:0]	r_WHITE_CNT;

// SPA_CONTONE_CNT_REG
reg [31:0]	r_CONTONE_CNT;

// SPA_WHITE_WO_TEXT_CNT_REG
reg [31:0]	r_WHITE_WO_TEXT_CNT;

// SPA_WHITE_WO_HT_TEXT_CNT_REG
reg [31:0]	r_WHITE_WO_HT_TEXT_CNT;

// SPA_CONTENT_SIZE_REG
reg [13:0]	r_ContentSizeW;
reg [13:0]	r_ContentSizeH;

// SPA_MARGIN1_REG
reg [15:0]	r_BOTTOM_MARGIN;
reg [15:0]	r_TOP_MARGIN;

// SPA_MARGIN2_REG
reg [15:0]	r_RIGHT_MARGIN;
reg [15:0]	r_LEFT_MARGIN;

// SPA_TH1_REG
reg [9:0]	r_HIGH_TH_MAX1;
reg [9:0]	r_LOW_TH_MIN1;

// SPA_TH2_REG
reg [9:0]	r_HIGH_TH_MAX2;
reg [9:0]	r_LOW_TH_MIN2;

// SPA_HLIGHT_SEL_EN_REG
reg 			r_HLIGHT_SEL_EN;

// SPA_AVG_TH_REG
reg [7:0]	r_AVG_TH;

// SPA_HISTO_WIN_VAL_REG
reg [7:0]	r_HISTCR_WIN_VAL_HIGH;
reg [7:0]	r_HISTCR_WIN_VAL_LOW;
reg [7:0]	r_HISTCB_WIN_VAL_HIGH;
reg [7:0]	r_HISTCB_WIN_VAL_LOW;

// SPA_RATIO_TH_REG
reg [9:0]	r_RATIO_TH_CR;
reg [9:0]	r_RATIO_TH_CB;

// SPA_LIMIT_TH_REG
reg [7:0]	r_LIMIT_TH_MAX;
reg [7:0]	r_LIMIT_TH_MIN;

// SPA_BRIGHT_STRETCH_OFFSET_REG
reg [7:0]	r_STRETCH_OFFSET;
reg [7:0]	r_BRIGHT_TH;
reg 			r_BRIGHT_EN;

// SPA_ACB_TH1_REG
reg [5:0]	r_ACB_GRAY_RIDGE;
reg [9:0]	r_ACB_PEAK_RATIO_TH;

// SPA_ACB_TH2_REG
reg [7:0]	r_ACB_RIGHT_LIMIT;
reg [7:0]	r_ACB_LEFT_LIMIT;

// SPA_OBJECT_TH_REG
reg [3:0]	r_OBJ_AREA_TH;
reg [7:0]	r_OBJ_INDEX_TH;

// SPA_ACBD_RESULT1_REG
reg [7:0]	r_BRIGHT_OFFSET;
reg [7:0]	r_FINAL_MAX;
reg [7:0]	r_FINAL_MIN;

// SPA_ACBD_RESULT2_REG
reg [7:0]	r_PEAK_ID;
reg [7:0]	r_ANKER_POINT;
reg [3:0]	r_MEM_READ_STAT;

// SPA_ACBD_ACSREFON_REG
reg 			r_ACS_REF_ON;

// SPA_ACS_CON_REG
reg 			r_ACS_SATAUTO_EN;
reg 			r_ACS_HALFAUTO_EN;
reg 			r_ACS_AUTO_EN;
reg 			r_ACS_MARK_EN;
reg 			r_ACS_HISTO_EN;
reg 			r_ACS_RANGE_REAL_IMAGE;
reg [7:0]	r_ACS_BLOCK_SIZE_X;
reg [7:0]	r_ACS_BLOCK_SIZE_Y;
reg [7:0]	r_ACS_WHITE_TH;

// SPA_ACS_MARK_POS_UPPER_REG
reg [16:0]	r_ACS_MARK_UPPER;

// SPA_ACS_MARK_POS_LOWER_REG
reg [16:0]	r_ACS_MARK_LOWER;

// SPA_ACS_MARK_POS_LEFT_REG
reg [16:0]	r_ACS_MARK_LEFT;

// SPA_ACS_MARK_POS_RIGHT_REG
reg [16:0]	r_ACS_MARK_RIGHT;

// SPA_ACS_SATURATION_TH_REG
reg [7:0]	r_ACS_SATURATION_BLOCK_TH;
reg [7:0]	r_ACS_SATURATION_PXL_TH;

// SPA_ACS_HT_TH_REG
reg [14:0]	r_ACS_PUREHALFTONE_CNT;
reg [14:0]	r_ACS_HALFTONE_CNT;

// SPA_ACS_CBMAX1_REG
reg [7:0]	r_ACS_CB_MAX_03;
reg [7:0]	r_ACS_CB_MAX_02;
reg [7:0]	r_ACS_CB_MAX_01;
reg [7:0]	r_ACS_CB_MAX_00;

// SPA_ACS_CBMAX2_REG
reg [7:0]	r_ACS_CB_MAX_07;
reg [7:0]	r_ACS_CB_MAX_06;
reg [7:0]	r_ACS_CB_MAX_05;
reg [7:0]	r_ACS_CB_MAX_04;

// SPA_ACS_CBMAX3_REG
reg [7:0]	r_ACS_CB_MAX_11;
reg [7:0]	r_ACS_CB_MAX_10;
reg [7:0]	r_ACS_CB_MAX_09;
reg [7:0]	r_ACS_CB_MAX_08;

// SPA_ACS_CBMAX4_REG
reg [7:0]	r_ACS_CB_MAX_15;
reg [7:0]	r_ACS_CB_MAX_14;
reg [7:0]	r_ACS_CB_MAX_13;
reg [7:0]	r_ACS_CB_MAX_12;

// SPA_ACS_CBMIN1_REG
reg [7:0]	r_ACS_CB_MIN_03;
reg [7:0]	r_ACS_CB_MIN_02;
reg [7:0]	r_ACS_CB_MIN_01;
reg [7:0]	r_ACS_CB_MIN_00;

// SPA_ACS_CBMIN2_REG
reg [7:0]	r_ACS_CB_MIN_07;
reg [7:0]	r_ACS_CB_MIN_06;
reg [7:0]	r_ACS_CB_MIN_05;
reg [7:0]	r_ACS_CB_MIN_04;

// SPA_ACS_CBMIN3_REG
reg [7:0]	r_ACS_CB_MIN_11;
reg [7:0]	r_ACS_CB_MIN_10;
reg [7:0]	r_ACS_CB_MIN_09;
reg [7:0]	r_ACS_CB_MIN_08;

// SPA_ACS_CBMIN4_REG
reg [7:0]	r_ACS_CB_MIN_15;
reg [7:0]	r_ACS_CB_MIN_14;
reg [7:0]	r_ACS_CB_MIN_13;
reg [7:0]	r_ACS_CB_MIN_12;

// SPA_ACS_CRMAX1_REG
reg [7:0]	r_ACS_CR_MAX_03;
reg [7:0]	r_ACS_CR_MAX_02;
reg [7:0]	r_ACS_CR_MAX_01;
reg [7:0]	r_ACS_CR_MAX_00;

// SPA_ACS_CRMAX2_REG
reg [7:0]	r_ACS_CR_MAX_07;
reg [7:0]	r_ACS_CR_MAX_06;
reg [7:0]	r_ACS_CR_MAX_05;
reg [7:0]	r_ACS_CR_MAX_04;

// SPA_ACS_CRMAX3_REG
reg [7:0]	r_ACS_CR_MAX_11;
reg [7:0]	r_ACS_CR_MAX_10;
reg [7:0]	r_ACS_CR_MAX_09;
reg [7:0]	r_ACS_CR_MAX_08;

// SPA_ACS_CRMAX4_REG
reg [7:0]	r_ACS_CR_MAX_15;
reg [7:0]	r_ACS_CR_MAX_14;
reg [7:0]	r_ACS_CR_MAX_13;
reg [7:0]	r_ACS_CR_MAX_12;

// SPA_ACS_CRMIN1_REG
reg [7:0]	r_ACS_CR_MIN_03;
reg [7:0]	r_ACS_CR_MIN_02;
reg [7:0]	r_ACS_CR_MIN_01;
reg [7:0]	r_ACS_CR_MIN_00;

// SPA_ACS_CRMIN2_REG
reg [7:0]	r_ACS_CR_MIN_07;
reg [7:0]	r_ACS_CR_MIN_06;
reg [7:0]	r_ACS_CR_MIN_05;
reg [7:0]	r_ACS_CR_MIN_04;

// SPA_ACS_CRMIN3_REG
reg [7:0]	r_ACS_CR_MIN_11;
reg [7:0]	r_ACS_CR_MIN_10;
reg [7:0]	r_ACS_CR_MIN_09;
reg [7:0]	r_ACS_CR_MIN_08;

// SPA_ACS_CRMIN4_REG
reg [7:0]	r_ACS_CR_MIN_15;
reg [7:0]	r_ACS_CR_MIN_14;
reg [7:0]	r_ACS_CR_MIN_13;
reg [7:0]	r_ACS_CR_MIN_12;

// SPA_ACS_CBMAXH1_REG
reg [7:0]	r_ACS_CB_MAXH_03;
reg [7:0]	r_ACS_CB_MAXH_02;
reg [7:0]	r_ACS_CB_MAXH_01;
reg [7:0]	r_ACS_CB_MAXH_00;

// SPA_ACS_CBMAXH2_REG
reg [7:0]	r_ACS_CB_MAXH_07;
reg [7:0]	r_ACS_CB_MAXH_06;
reg [7:0]	r_ACS_CB_MAXH_05;
reg [7:0]	r_ACS_CB_MAXH_04;

// SPA_ACS_CBMAXH3_REG
reg [7:0]	r_ACS_CB_MAXH_11;
reg [7:0]	r_ACS_CB_MAXH_10;
reg [7:0]	r_ACS_CB_MAXH_09;
reg [7:0]	r_ACS_CB_MAXH_08;

// SPA_ACS_CBMAXH4_REG
reg [7:0]	r_ACS_CB_MAXH_15;
reg [7:0]	r_ACS_CB_MAXH_14;
reg [7:0]	r_ACS_CB_MAXH_13;
reg [7:0]	r_ACS_CB_MAXH_12;

// SPA_ACS_CBMINH1_REG
reg [7:0]	r_ACS_CB_MINH_03;
reg [7:0]	r_ACS_CB_MINH_02;
reg [7:0]	r_ACS_CB_MINH_01;
reg [7:0]	r_ACS_CB_MINH_00;

// SPA_ACS_CBMINH2_REG
reg [7:0]	r_ACS_CB_MINH_07;
reg [7:0]	r_ACS_CB_MINH_06;
reg [7:0]	r_ACS_CB_MINH_05;
reg [7:0]	r_ACS_CB_MINH_04;

// SPA_ACS_CBMINH3_REG
reg [7:0]	r_ACS_CB_MINH_11;
reg [7:0]	r_ACS_CB_MINH_10;
reg [7:0]	r_ACS_CB_MINH_09;
reg [7:0]	r_ACS_CB_MINH_08;

// SPA_ACS_CBMINH4_REG
reg [7:0]	r_ACS_CB_MINH_15;
reg [7:0]	r_ACS_CB_MINH_14;
reg [7:0]	r_ACS_CB_MINH_13;
reg [7:0]	r_ACS_CB_MINH_12;

// SPA_ACS_CRMAXH1_REG
reg [7:0]	r_ACS_CR_MAXH_03;
reg [7:0]	r_ACS_CR_MAXH_02;
reg [7:0]	r_ACS_CR_MAXH_01;
reg [7:0]	r_ACS_CR_MAXH_00;

// SPA_ACS_CRMAXH2_REG
reg [7:0]	r_ACS_CR_MAXH_07;
reg [7:0]	r_ACS_CR_MAXH_06;
reg [7:0]	r_ACS_CR_MAXH_05;
reg [7:0]	r_ACS_CR_MAXH_04;

// SPA_ACS_CRMAXH3_REG
reg [7:0]	r_ACS_CR_MAXH_11;
reg [7:0]	r_ACS_CR_MAXH_10;
reg [7:0]	r_ACS_CR_MAXH_09;
reg [7:0]	r_ACS_CR_MAXH_08;

// SPA_ACS_CRMAXH4_REG
reg [7:0]	r_ACS_CR_MAXH_15;
reg [7:0]	r_ACS_CR_MAXH_14;
reg [7:0]	r_ACS_CR_MAXH_13;
reg [7:0]	r_ACS_CR_MAXH_12;

// SPA_ACS_CRMINH1_REG
reg [7:0]	r_ACS_CR_MINH_03;
reg [7:0]	r_ACS_CR_MINH_02;
reg [7:0]	r_ACS_CR_MINH_01;
reg [7:0]	r_ACS_CR_MINH_00;

// SPA_ACS_CRMINH2_REG
reg [7:0]	r_ACS_CR_MINH_07;
reg [7:0]	r_ACS_CR_MINH_06;
reg [7:0]	r_ACS_CR_MINH_05;
reg [7:0]	r_ACS_CR_MINH_04;

// SPA_ACS_CRMINH3_REG
reg [7:0]	r_ACS_CR_MINH_11;
reg [7:0]	r_ACS_CR_MINH_10;
reg [7:0]	r_ACS_CR_MINH_09;
reg [7:0]	r_ACS_CR_MINH_08;

// SPA_ACS_CRMINH4_REG
reg [7:0]	r_ACS_CR_MINH_15;
reg [7:0]	r_ACS_CR_MINH_14;
reg [7:0]	r_ACS_CR_MINH_13;
reg [7:0]	r_ACS_CR_MINH_12;

// SPA_ACS_VALUE_TH_REG
reg [7:0]	r_ACS_VALUE_BLOCK_TH;
reg [7:0]	r_ACS_VALUE_PXL_TH;

// SPA_ACS_TBLK_PAGE_REG
reg [31:0]	r_ACS_TBLK_PAGE;

// SPA_ACS_TBLK_NPAGE_REG
reg [31:0]	r_ACS_TBLK_NPAGE;

// SPA_ACS_CBLK_REG
reg [31:0]	r_ACS_CBLK;

// SPA_ACS_SBLK_PAGE_REG
reg [31:0]	r_ACS_SBLK_PAGE;

// SPA_ACS_SPXL_BLK_PAGE_REG
reg [31:0]	r_ACS_SPXL_BLK_PAGE;

// SPA_ACS_SPXL_PAGE_REG
reg [31:0]	r_ACS_SPXL_PAGE;

// SPA_ACS_TEXT_PAGE_REG
reg [31:0]	r_ACS_TEXT_PAGE;

// SPA_ACS_HT_PAGE_REG
reg [31:0]	r_ACS_HT_PAGE;

// SPA_ACS_EDGE_PAGE_REG
reg [31:0]	r_ACS_EDGE_PAGE;

// SPA_AVG_HT_ACS00_REG
reg [31:0]	r_AVG_HT_ACS00;

// SPA_AVG_HT_ACS01_REG
reg [31:0]	r_AVG_HT_ACS01;

// SPA_AVG_HT_ACS02_REG
reg [31:0]	r_AVG_HT_ACS02;

// SPA_AVG_HT_ACS03_REG
reg [31:0]	r_AVG_HT_ACS03;

// SPA_AVG_HT_ACS04_REG
reg [31:0]	r_AVG_HT_ACS04;

// SPA_AVG_HT_ACS05_REG
reg [31:0]	r_AVG_HT_ACS05;

// SPA_AVG_HT_ACS06_REG
reg [31:0]	r_AVG_HT_ACS06;

// SPA_AVG_HT_ACS07_REG
reg [31:0]	r_AVG_HT_ACS07;

// SPA_AVG_HT_ACS08_REG
reg [31:0]	r_AVG_HT_ACS08;

// SPA_AVG_HT_ACS09_REG
reg [31:0]	r_AVG_HT_ACS09;

// SPA_AVG_HT_ACS10_REG
reg [31:0]	r_AVG_HT_ACS10;

// SPA_AVG_HT_ACS11_REG
reg [31:0]	r_AVG_HT_ACS11;

// SPA_AVG_HT_ACS12_REG
reg [31:0]	r_AVG_HT_ACS12;

// SPA_AVG_HT_ACS13_REG
reg [31:0]	r_AVG_HT_ACS13;

// SPA_AVG_HT_ACS14_REG
reg [31:0]	r_AVG_HT_ACS14;

// SPA_AVG_HT_ACS15_REG
reg [31:0]	r_AVG_HT_ACS15;

// SPA_AVG_NHT_ACS00_REG
reg [31:0]	r_AVG_NHT_ACS00;

// SPA_AVG_NHT_ACS01_REG
reg [31:0]	r_AVG_NHT_ACS01;

// SPA_AVG_NHT_ACS02_REG
reg [31:0]	r_AVG_NHT_ACS02;

// SPA_AVG_NHT_ACS03_REG
reg [31:0]	r_AVG_NHT_ACS03;

// SPA_AVG_NHT_ACS04_REG
reg [31:0]	r_AVG_NHT_ACS04;

// SPA_AVG_NHT_ACS05_REG
reg [31:0]	r_AVG_NHT_ACS05;

// SPA_AVG_NHT_ACS06_REG
reg [31:0]	r_AVG_NHT_ACS06;

// SPA_AVG_NHT_ACS07_REG
reg [31:0]	r_AVG_NHT_ACS07;

// SPA_AVG_NHT_ACS08_REG
reg [31:0]	r_AVG_NHT_ACS08;

// SPA_AVG_NHT_ACS09_REG
reg [31:0]	r_AVG_NHT_ACS09;

// SPA_AVG_NHT_ACS10_REG
reg [31:0]	r_AVG_NHT_ACS10;

// SPA_AVG_NHT_ACS11_REG
reg [31:0]	r_AVG_NHT_ACS11;

// SPA_AVG_NHT_ACS12_REG
reg [31:0]	r_AVG_NHT_ACS12;

// SPA_AVG_NHT_ACS13_REG
reg [31:0]	r_AVG_NHT_ACS13;

// SPA_AVG_NHT_ACS14_REG
reg [31:0]	r_AVG_NHT_ACS14;

// SPA_AVG_NHT_ACS15_REG
reg [31:0]	r_AVG_NHT_ACS15;

// SPA_ACS_SATURATION_TH2_REG
reg [14:0]	r_ACS_SATURATION_PXL_CNT_TH;

// SPA_ACS_VALID_RANGE_H_REG
reg [13:0]	r_VALID_BOTTOM;
reg [13:0]	r_VALID_TOP;

// SPA_ACS_VALID_RANGE_W_REG
reg [13:0]	r_VALID_RIGHT;
reg [13:0]	r_VALID_LEFT;

// SPA_ACS_V2_CON_REG
reg [7:0]	r_ACS_V2_BLOCK_SIZE_X;
reg [7:0]	r_ACS_V2_BLOCK_SIZE_Y;
reg [7:0]	r_ACS_V2_WHITE_TH;

// SPA_ACS_V2_SATURATION_TH_REG
reg [7:0]	r_ACS_V2_SATURATION_BLOCK_TH;
reg [7:0]	r_ACS_V2_SATURATION_PXL_TH;

// SPA_ACS_V2_SATURATION_TH2_REG
reg [14:0]	r_ACS_V2_SATURATION_TH2;

// SPA_ACS_V2_HT_TH_REG
reg [14:0]	r_ACS_V2_PUREHALFTONE_CNT;
reg [14:0]	r_ACS_V2_HALFTONE_CNT;

// SPA_ACS_V2_VALUE_TH_REG
reg [7:0]	r_ACS_V2_VALUE_BLOCK_TH;
reg [7:0]	r_ACS_V2_VALUE_PXL_TH;

// SPA_ACS_V2_TBLK_PAGE_REG
reg [31:0]	r_ACS_V2_TBLK_PAGE;

// SPA_ACS_V2_TBLK_NPAGE_REG
reg [31:0]	r_ACS_V2_TBLK_NPAGE;

// SPA_ACS_V2_CBLK_REG
reg [31:0]	r_ACS_V2_CBLK;

// SPA_ACS_V2_SBLK_PAGE_REG
reg [31:0]	r_ACS_V2_SBLK_PAGE;

// SPA_ACS_V2_SPXL_BLK_PAGE_REG
reg [31:0]	r_ACS_V2_SPXL_BLK_PAGE;

// SPA_ACS_V2_SPXL_PAGE_REG
reg [31:0]	r_ACS_V2_SPXL_PAGE;

// SPA_BLANK_CON0_REG
reg 			r_BLANK_AUTO_EN;
reg 			r_BLANK_MARK_EN;
reg 			r_BLANK_RANGE_REAL_IMAGE;
reg [7:0]	r_BLANK_BLOCK_SIZE_H;
reg [7:0]	r_BLANK_BLOCK_SIZE_V;

// SPA_BLANK_CON1_REG
reg [7:0]	r_BLANK_DARKBLK_TH;
reg [7:0]	r_BLANK_CONT_PCT;

// SPA_BLANK_MARK_POS_UPPER_REG
reg [16:0]	r_BLANK_MARK_UPPER;

// SPA_BLANK_MARK_POS_LOWER_REG
reg [16:0]	r_BLANK_MARK_LOWER;

// SPA_BLANK_MARK_POS_LEFT_REG
reg [16:0]	r_BLANK_MARK_LEFT;

// SPA_BLANK_MARK_POS_RIGHT_REG
reg [16:0]	r_BLANK_MARK_RIGHT;

// SPA_BLANK_COLOR_BLK_REG
reg [7:0]	r_BLANK_COLORBLOCK_CR_THU;
reg [7:0]	r_BLANK_COLORBLOCK_CR_THL;
reg [7:0]	r_BLANK_COLORBLOCK_CB_THU;
reg [7:0]	r_BLANK_COLORBLOCK_CB_THL;

// SPA_BLANK_TOTALBLK_REG
reg [31:0]	r_BLANK_TBLK_PAGE;

// SPA_BLANK_CONTBLK_REG
reg [31:0]	r_BLANK_CONTBLK_PAGE;

// SPA_BLANK_BLANKBLK_REG
reg [31:0]	r_BLANK_BLACKBLK_PAGE;

// SPA_BLANK_DARKBLK_REG
reg [31:0]	r_BLANK_DARKBLK;

// SPA_BLANK_COLORBLK_REG
reg [31:0]	r_BLANK_CBLK;

// SPA_BLANK_Y_MIN_MAX_REG
reg [7:0]	r_BLANK_U_MAX;
reg [7:0]	r_BLANK_Y_MIN;

// SPA_BLANK_CB_MIN_MAX_REG
reg [7:0]	r_BLANK_CB_MAX;
reg [7:0]	r_BLANK_CB_MIN;

// SPA_BLANK_CR_MIN_MAX_REG
reg [7:0]	r_BLANK_CR_MAX;
reg [7:0]	r_BLANK_CR_MIN;

// SPA_RC2_OUTIMG_WIDTH_HEIGHT_REG
reg [7:0]	r_RC2_OUTIMG_HEIGHT;
reg [8:0]	r_RC2_OUTIMG_WIDTH;

// SPA_RC2_OVERLAP_REG
reg [5:0]	r_RC2_OVERLAP;
reg 			r_RC2_MASK_IMG_BD;

// SPA_RC2_FRAC_REG
reg [11:0]	r_RC2_H_FRAC;
reg [11:0]	r_RC2_V_FRAC;

// SPA_BDS_CON_REG
reg 			r_MIRROR;
reg [7:0]	r_EDGE_TH;

// SPA_BDS_EDGE1_REG
reg [7:0]	r_EDGE_Y_LOW;
reg [7:0]	r_EDGE_Y_HIGH;
reg [7:0]	r_EDGE_CNT_TH;

// SPA_BDS_EDGE2_REG
reg [7:0]	r_EDGE_CR_LOW;
reg [7:0]	r_EDGE_CR_HIGH;
reg [7:0]	r_EDGE_CB_LOW;
reg [7:0]	r_EDGE_CB_HIGH;

// SPA_BDS_EURION1_REG
reg [7:0]	r_EURion_Y_LOW;
reg [7:0]	r_EURion_Y_HIGH;

// SPA_BDS_EURION2_REG
reg [7:0]	r_EURion_CR_LOW;
reg [7:0]	r_EURion_CR_HIGH;
reg [7:0]	r_EURion_CB_LOW;
reg [7:0]	r_EURion_CB_HIGH;

// SPA_BDS_OFFSET_REG
reg [7:0]	r_OFFSET_BOTTOM;
reg [7:0]	r_OFFSET_TOP;
reg [7:0]	r_OFFSET_RIGHT;
reg [7:0]	r_OFFSET_LEFT;

// SPA_BDS_CONTENTS_REG
reg [15:0]	r_CONTENS_END;
reg [15:0]	r_CONTENS_START;

// SPA_SMAP_PARAM_B_REG
reg [7:0]	r_SMAP_G_Range2;
reg [7:0]	r_SMAP_G_Range1;
reg [7:0]	r_SMAP_R_Range2;
reg [7:0]	r_SMAP_R_Range1;

// SPA_SMAP_PARAM_C_REG
reg 			r_SMAP_Refine_Enable;
reg [3:0]	r_SMAP_BinTH3;
reg [3:0]	r_SMAP_BinTH2;
reg [3:0]	r_SMAP_BinTH1;
reg [7:0]	r_SMAP_B_Range2;
reg [7:0]	r_SMAP_B_Range1;

// SPA_SMAP_ADAPT_CON_REG
reg 			r_SMAP_ADAPT_EN;
reg [5:0]	r_SMAP_ADAPT_AVGDIV;

// SPA_SMAP_ADAPT_R_MAX0_REG
reg [7:0]	r_SMAP_ADAPT_R_MAX00;
reg [7:0]	r_SMAP_ADAPT_R_MAX01;
reg [7:0]	r_SMAP_ADAPT_R_MAX02;
reg [7:0]	r_SMAP_ADAPT_R_MAX03;

// SPA_SMAP_ADAPT_R_MAX1_REG
reg [7:0]	r_SMAP_ADAPT_R_MAX10;
reg [7:0]	r_SMAP_ADAPT_R_MAX11;
reg [7:0]	r_SMAP_ADAPT_R_MAX12;
reg [7:0]	r_SMAP_ADAPT_R_MAX13;

// SPA_SMAP_ADAPT_R_MAX2_REG
reg [7:0]	r_SMAP_ADAPT_R_MAX20;
reg [7:0]	r_SMAP_ADAPT_R_MAX21;
reg [7:0]	r_SMAP_ADAPT_R_MAX22;
reg [7:0]	r_SMAP_ADAPT_R_MAX23;

// SPA_SMAP_ADAPT_R_MAX3_REG
reg [7:0]	r_SMAP_ADAPT_R_MAX30;
reg [7:0]	r_SMAP_ADAPT_R_MAX31;
reg [7:0]	r_SMAP_ADAPT_R_MAX32;
reg [7:0]	r_SMAP_ADAPT_R_MAX33;

// SPA_SMAP_ADAPT_R_MAX4_REG
reg [7:0]	r_SMAP_ADAPT_R_MAX40;
reg [7:0]	r_SMAP_ADAPT_R_MAX41;
reg [7:0]	r_SMAP_ADAPT_R_MAX42;
reg [7:0]	r_SMAP_ADAPT_R_MAX43;

// SPA_SMAP_ADAPT_R_MAX5_REG
reg [7:0]	r_SMAP_ADAPT_R_MAX50;
reg [7:0]	r_SMAP_ADAPT_R_MAX51;
reg [7:0]	r_SMAP_ADAPT_R_MAX52;
reg [7:0]	r_SMAP_ADAPT_R_MAX53;

// SPA_SMAP_ADAPT_R_MAX6_REG
reg [7:0]	r_SMAP_ADAPT_R_MAX60;
reg [7:0]	r_SMAP_ADAPT_R_MAX61;
reg [7:0]	r_SMAP_ADAPT_R_MAX62;
reg [7:0]	r_SMAP_ADAPT_R_MAX63;

// SPA_SMAP_ADAPT_R_MAX7_REG
reg [7:0]	r_SMAP_ADAPT_R_MAX70;
reg [7:0]	r_SMAP_ADAPT_R_MAX71;
reg [7:0]	r_SMAP_ADAPT_R_MAX72;
reg [7:0]	r_SMAP_ADAPT_R_MAX73;

// SPA_SMAP_ADAPT_R_MIN0_REG
reg [7:0]	r_SMAP_ADAPT_R_MIN00;
reg [7:0]	r_SMAP_ADAPT_R_MIN01;
reg [7:0]	r_SMAP_ADAPT_R_MIN02;
reg [7:0]	r_SMAP_ADAPT_R_MIN03;

// SPA_SMAP_ADAPT_R_MIN1_REG
reg [7:0]	r_SMAP_ADAPT_R_MIN10;
reg [7:0]	r_SMAP_ADAPT_R_MIN11;
reg [7:0]	r_SMAP_ADAPT_R_MIN12;
reg [7:0]	r_SMAP_ADAPT_R_MIN13;

// SPA_SMAP_ADAPT_R_MIN2_REG
reg [7:0]	r_SMAP_ADAPT_R_MIN20;
reg [7:0]	r_SMAP_ADAPT_R_MIN21;
reg [7:0]	r_SMAP_ADAPT_R_MIN22;
reg [7:0]	r_SMAP_ADAPT_R_MIN23;

// SPA_SMAP_ADAPT_R_MIN3_REG
reg [7:0]	r_SMAP_ADAPT_R_MIN30;
reg [7:0]	r_SMAP_ADAPT_R_MIN31;
reg [7:0]	r_SMAP_ADAPT_R_MIN32;
reg [7:0]	r_SMAP_ADAPT_R_MIN33;

// SPA_SMAP_ADAPT_R_MIN4_REG
reg [7:0]	r_SMAP_ADAPT_R_MIN40;
reg [7:0]	r_SMAP_ADAPT_R_MIN41;
reg [7:0]	r_SMAP_ADAPT_R_MIN42;
reg [7:0]	r_SMAP_ADAPT_R_MIN43;

// SPA_SMAP_ADAPT_R_MIN5_REG
reg [7:0]	r_SMAP_ADAPT_R_MIN50;
reg [7:0]	r_SMAP_ADAPT_R_MIN51;
reg [7:0]	r_SMAP_ADAPT_R_MIN52;
reg [7:0]	r_SMAP_ADAPT_R_MIN53;

// SPA_SMAP_ADAPT_R_MIN6_REG
reg [7:0]	r_SMAP_ADAPT_R_MIN60;
reg [7:0]	r_SMAP_ADAPT_R_MIN61;
reg [7:0]	r_SMAP_ADAPT_R_MIN62;
reg [7:0]	r_SMAP_ADAPT_R_MIN63;

// SPA_SMAP_ADAPT_R_MIN7_REG
reg [7:0]	r_SMAP_ADAPT_R_MIN70;
reg [7:0]	r_SMAP_ADAPT_R_MIN71;
reg [7:0]	r_SMAP_ADAPT_R_MIN72;
reg [7:0]	r_SMAP_ADAPT_R_MIN73;

// SPA_SMAP_ADAPT_G_MAX0_REG
reg [7:0]	r_SMAP_ADAPT_G_MAX00;
reg [7:0]	r_SMAP_ADAPT_G_MAX01;
reg [7:0]	r_SMAP_ADAPT_G_MAX02;
reg [7:0]	r_SMAP_ADAPT_G_MAX03;

// SPA_SMAP_ADAPT_G_MAX1_REG
reg [7:0]	r_SMAP_ADAPT_G_MAX10;
reg [7:0]	r_SMAP_ADAPT_G_MAX11;
reg [7:0]	r_SMAP_ADAPT_G_MAX12;
reg [7:0]	r_SMAP_ADAPT_G_MAX13;

// SPA_SMAP_ADAPT_G_MAX2_REG
reg [7:0]	r_SMAP_ADAPT_G_MAX20;
reg [7:0]	r_SMAP_ADAPT_G_MAX21;
reg [7:0]	r_SMAP_ADAPT_G_MAX22;
reg [7:0]	r_SMAP_ADAPT_G_MAX23;

// SPA_SMAP_ADAPT_G_MAX3_REG
reg [7:0]	r_SMAP_ADAPT_G_MAX30;
reg [7:0]	r_SMAP_ADAPT_G_MAX31;
reg [7:0]	r_SMAP_ADAPT_G_MAX32;
reg [7:0]	r_SMAP_ADAPT_G_MAX33;

// SPA_SMAP_ADAPT_G_MAX4_REG
reg [7:0]	r_SMAP_ADAPT_G_MAX40;
reg [7:0]	r_SMAP_ADAPT_G_MAX41;
reg [7:0]	r_SMAP_ADAPT_G_MAX42;
reg [7:0]	r_SMAP_ADAPT_G_MAX43;

// SPA_SMAP_ADAPT_G_MAX5_REG
reg [7:0]	r_SMAP_ADAPT_G_MAX50;
reg [7:0]	r_SMAP_ADAPT_G_MAX51;
reg [7:0]	r_SMAP_ADAPT_G_MAX52;
reg [7:0]	r_SMAP_ADAPT_G_MAX53;

// SPA_SMAP_ADAPT_G_MAX6_REG
reg [7:0]	r_SMAP_ADAPT_G_MAX60;
reg [7:0]	r_SMAP_ADAPT_G_MAX61;
reg [7:0]	r_SMAP_ADAPT_G_MAX62;
reg [7:0]	r_SMAP_ADAPT_G_MAX63;

// SPA_SMAP_ADAPT_G_MAX7_REG
reg [7:0]	r_SMAP_ADAPT_G_MAX70;
reg [7:0]	r_SMAP_ADAPT_G_MAX71;
reg [7:0]	r_SMAP_ADAPT_G_MAX72;
reg [7:0]	r_SMAP_ADAPT_G_MAX73;

// SPA_SMAP_ADAPT_G_MIN0_REG
reg [7:0]	r_SMAP_ADAPT_G_MIN00;
reg [7:0]	r_SMAP_ADAPT_G_MIN01;
reg [7:0]	r_SMAP_ADAPT_G_MIN02;
reg [7:0]	r_SMAP_ADAPT_G_MIN03;

// SPA_SMAP_ADAPT_G_MIN1_REG
reg [7:0]	r_SMAP_ADAPT_G_MIN10;
reg [7:0]	r_SMAP_ADAPT_G_MIN11;
reg [7:0]	r_SMAP_ADAPT_G_MIN12;
reg [7:0]	r_SMAP_ADAPT_G_MIN13;

// SPA_SMAP_ADAPT_G_MIN2_REG
reg [7:0]	r_SMAP_ADAPT_G_MIN20;
reg [7:0]	r_SMAP_ADAPT_G_MIN21;
reg [7:0]	r_SMAP_ADAPT_G_MIN22;
reg [7:0]	r_SMAP_ADAPT_G_MIN23;

// SPA_SMAP_ADAPT_G_MIN3_REG
reg [7:0]	r_SMAP_ADAPT_G_MIN30;
reg [7:0]	r_SMAP_ADAPT_G_MIN31;
reg [7:0]	r_SMAP_ADAPT_G_MIN32;
reg [7:0]	r_SMAP_ADAPT_G_MIN33;

// SPA_SMAP_ADAPT_G_MIN4_REG
reg [7:0]	r_SMAP_ADAPT_G_MIN40;
reg [7:0]	r_SMAP_ADAPT_G_MIN41;
reg [7:0]	r_SMAP_ADAPT_G_MIN42;
reg [7:0]	r_SMAP_ADAPT_G_MIN43;

// SPA_SMAP_ADAPT_G_MIN5_REG
reg [7:0]	r_SMAP_ADAPT_G_MIN50;
reg [7:0]	r_SMAP_ADAPT_G_MIN51;
reg [7:0]	r_SMAP_ADAPT_G_MIN52;
reg [7:0]	r_SMAP_ADAPT_G_MIN53;

// SPA_SMAP_ADAPT_G_MIN6_REG
reg [7:0]	r_SMAP_ADAPT_G_MIN60;
reg [7:0]	r_SMAP_ADAPT_G_MIN61;
reg [7:0]	r_SMAP_ADAPT_G_MIN62;
reg [7:0]	r_SMAP_ADAPT_G_MIN63;

// SPA_SMAP_ADAPT_G_MIN7_REG
reg [7:0]	r_SMAP_ADAPT_G_MIN70;
reg [7:0]	r_SMAP_ADAPT_G_MIN71;
reg [7:0]	r_SMAP_ADAPT_G_MIN72;
reg [7:0]	r_SMAP_ADAPT_G_MIN73;

// SPA_SMAP_ADAPT_B_MAX0_REG
reg [7:0]	r_SMAP_ADAPT_B_MAX00;
reg [7:0]	r_SMAP_ADAPT_B_MAX01;
reg [7:0]	r_SMAP_ADAPT_B_MAX02;
reg [7:0]	r_SMAP_ADAPT_B_MAX03;

// SPA_SMAP_ADAPT_B_MAX1_REG
reg [7:0]	r_SMAP_ADAPT_B_MAX10;
reg [7:0]	r_SMAP_ADAPT_B_MAX11;
reg [7:0]	r_SMAP_ADAPT_B_MAX12;
reg [7:0]	r_SMAP_ADAPT_B_MAX13;

// SPA_SMAP_ADAPT_B_MAX2_REG
reg [7:0]	r_SMAP_ADAPT_B_MAX20;
reg [7:0]	r_SMAP_ADAPT_B_MAX21;
reg [7:0]	r_SMAP_ADAPT_B_MAX22;
reg [7:0]	r_SMAP_ADAPT_B_MAX23;

// SPA_SMAP_ADAPT_B_MAX3_REG
reg [7:0]	r_SMAP_ADAPT_B_MAX30;
reg [7:0]	r_SMAP_ADAPT_B_MAX31;
reg [7:0]	r_SMAP_ADAPT_B_MAX32;
reg [7:0]	r_SMAP_ADAPT_B_MAX33;

// SPA_SMAP_ADAPT_B_MAX4_REG
reg [7:0]	r_SMAP_ADAPT_B_MAX40;
reg [7:0]	r_SMAP_ADAPT_B_MAX41;
reg [7:0]	r_SMAP_ADAPT_B_MAX42;
reg [7:0]	r_SMAP_ADAPT_B_MAX43;

// SPA_SMAP_ADAPT_B_MAX5_REG
reg [7:0]	r_SMAP_ADAPT_B_MAX50;
reg [7:0]	r_SMAP_ADAPT_B_MAX51;
reg [7:0]	r_SMAP_ADAPT_B_MAX52;
reg [7:0]	r_SMAP_ADAPT_B_MAX53;

// SPA_SMAP_ADAPT_B_MAX6_REG
reg [7:0]	r_SMAP_ADAPT_B_MAX60;
reg [7:0]	r_SMAP_ADAPT_B_MAX61;
reg [7:0]	r_SMAP_ADAPT_B_MAX62;
reg [7:0]	r_SMAP_ADAPT_B_MAX63;

// SPA_SMAP_ADAPT_B_MAX7_REG
reg [7:0]	r_SMAP_ADAPT_B_MAX70;
reg [7:0]	r_SMAP_ADAPT_B_MAX71;
reg [7:0]	r_SMAP_ADAPT_B_MAX72;
reg [7:0]	r_SMAP_ADAPT_B_MAX73;

// SPA_SMAP_ADAPT_B_MIN0_REG
reg [7:0]	r_SMAP_ADAPT_B_MIN00;
reg [7:0]	r_SMAP_ADAPT_B_MIN01;
reg [7:0]	r_SMAP_ADAPT_B_MIN02;
reg [7:0]	r_SMAP_ADAPT_B_MIN03;

// SPA_SMAP_ADAPT_B_MIN1_REG
reg [7:0]	r_SMAP_ADAPT_B_MIN10;
reg [7:0]	r_SMAP_ADAPT_B_MIN11;
reg [7:0]	r_SMAP_ADAPT_B_MIN12;
reg [7:0]	r_SMAP_ADAPT_B_MIN13;

// SPA_SMAP_ADAPT_B_MIN2_REG
reg [7:0]	r_SMAP_ADAPT_B_MIN20;
reg [7:0]	r_SMAP_ADAPT_B_MIN21;
reg [7:0]	r_SMAP_ADAPT_B_MIN22;
reg [7:0]	r_SMAP_ADAPT_B_MIN23;

// SPA_SMAP_ADAPT_B_MIN3_REG
reg [7:0]	r_SMAP_ADAPT_B_MIN30;
reg [7:0]	r_SMAP_ADAPT_B_MIN31;
reg [7:0]	r_SMAP_ADAPT_B_MIN32;
reg [7:0]	r_SMAP_ADAPT_B_MIN33;

// SPA_SMAP_ADAPT_B_MIN4_REG
reg [7:0]	r_SMAP_ADAPT_B_MIN40;
reg [7:0]	r_SMAP_ADAPT_B_MIN41;
reg [7:0]	r_SMAP_ADAPT_B_MIN42;
reg [7:0]	r_SMAP_ADAPT_B_MIN43;

// SPA_SMAP_ADAPT_B_MIN5_REG
reg [7:0]	r_SMAP_ADAPT_B_MIN50;
reg [7:0]	r_SMAP_ADAPT_B_MIN51;
reg [7:0]	r_SMAP_ADAPT_B_MIN52;
reg [7:0]	r_SMAP_ADAPT_B_MIN53;

// SPA_SMAP_ADAPT_B_MIN6_REG
reg [7:0]	r_SMAP_ADAPT_B_MIN60;
reg [7:0]	r_SMAP_ADAPT_B_MIN61;
reg [7:0]	r_SMAP_ADAPT_B_MIN62;
reg [7:0]	r_SMAP_ADAPT_B_MIN63;

// SPA_SMAP_ADAPT_B_MIN7_REG
reg [7:0]	r_SMAP_ADAPT_B_MIN70;
reg [7:0]	r_SMAP_ADAPT_B_MIN71;
reg [7:0]	r_SMAP_ADAPT_B_MIN72;
reg [7:0]	r_SMAP_ADAPT_B_MIN73;

// SPA_TBL_ADDR_00_UP_REG
reg [7:0]	r_TBL_ADDR_00_UP;

// SPA_TBL_ADDR_01_UP_REG
reg [7:0]	r_TBL_ADDR_01_UP;

// SPA_TBL_ADDR_02_UP_REG
reg [7:0]	r_TBL_ADDR_02_UP;

// SPA_TBL_ADDR_03_UP_REG
reg [7:0]	r_TBL_ADDR_03_UP;

// SPA_TBL_ADDR_04_UP_REG
reg [7:0]	r_TBL_ADDR_04_UP;

// SPA_TBL_ADDR_05_UP_REG
reg [7:0]	r_TBL_ADDR_05_UP;

// SPA_TBL_ADDR_06_UP_REG
reg [7:0]	r_TBL_ADDR_06_UP;

// SPA_TBL_ADDR_07_UP_REG
reg [7:0]	r_TBL_ADDR_07_UP;

// SPA_TBL_ADDR_08_UP_REG
reg [7:0]	r_TBL_ADDR_08_UP;

// SPA_TBL_ADDR_09_UP_REG
reg [7:0]	r_TBL_ADDR_09_UP;

// SPA_TBL_ADDR_10_UP_REG
reg [7:0]	r_TBL_ADDR_10_UP;

// SPA_TBL_ADDR_11_UP_REG
reg [7:0]	r_TBL_ADDR_11_UP;

// SPA_TBL_ADDR_12_UP_REG
reg [7:0]	r_TBL_ADDR_12_UP;

// SPA_TBL_ADDR_13_UP_REG
reg [7:0]	r_TBL_ADDR_13_UP;

// SPA_TBL_ADDR_14_UP_REG
reg [7:0]	r_TBL_ADDR_14_UP;

// SPA_TBL_ADDR_15_UP_REG
reg [7:0]	r_TBL_ADDR_15_UP;

// SPA_TBL_ADDR_16_UP_REG
reg [7:0]	r_TBL_ADDR_16_UP;

// SPA_TBL_ADDR_17_UP_REG
reg [7:0]	r_TBL_ADDR_17_UP;

// SPA_TBL_ADDR_18_UP_REG
reg [7:0]	r_TBL_ADDR_18_UP;

// SPA_TBL_ADDR_19_UP_REG
reg [7:0]	r_TBL_ADDR_19_UP;

// SPA_TBL_ADDR_20_UP_REG
reg [7:0]	r_TBL_ADDR_20_UP;

// SPA_TBL_ADDR_21_UP_REG
reg [7:0]	r_TBL_ADDR_21_UP;

// SPA_TBL_ADDR_22_UP_REG
reg [7:0]	r_TBL_ADDR_22_UP;

// SPA_TBL_ADDR_23_UP_REG
reg [7:0]	r_TBL_ADDR_23_UP;

// SPA_TBL_ADDR_24_UP_REG
reg [7:0]	r_TBL_ADDR_24_UP;

// SPA_RX_CH0_PREV_ADDR_UP_REG
reg [7:0]	r_RX_CH0_PREV_ADDR_UP;

// SPA_RX_CH1_PREV_ADDR_UP_REG
reg [7:0]	r_RX_CH1_PREV_ADDR_UP;

// SPA_RX_CH2_PREV_ADDR_UP_REG
reg [7:0]	r_RX_CH2_PREV_ADDR_UP;

// SPA_RX_CH0_CURR_ADDR_UP_REG
reg [7:0]	r_RX_CH0_CURR_ADDR_UP;

// SPA_RX_CH1_CURR_ADDR_UP_REG
reg [7:0]	r_RX_CH1_CURR_ADDR_UP;

// SPA_RX_CH2_CURR_ADDR_UP_REG
reg [7:0]	r_RX_CH2_CURR_ADDR_UP;

// SPA_RX_CH0_START_ADDR_UP_REG
reg [7:0]	r_RX_CH0_START_ADDR_UP;

// SPA_RX_CH1_START_ADDR_UP_REG
reg [7:0]	r_RX_CH1_START_ADDR_UP;

// SPA_RX_CH2_START_ADDR_UP_REG
reg [7:0]	r_RX_CH2_START_ADDR_UP;

// SPA_RX_CUR_ADDR_CH0_UP_REG
reg [7:0]	r_RX_CUR_ADDR_CH0_UP;

// SPA_RX_CUR_ADDR_CH1_UP_REG
reg [7:0]	r_RX_CUR_ADDR_CH1_UP;

// SPA_RX_CUR_ADDR_CH2_UP_REG
reg [7:0]	r_RX_CUR_ADDR_CH2_UP;

// SPA_TX_CH0_START_ADDR_UP_REG
reg [7:0]	r_TX_CH0_START_ADDR_UP;

// SPA_TX_CH1_START_ADDR_UP_REG
reg [7:0]	r_TX_CH1_START_ADDR_UP;

// SPA_TX_CH2_START_ADDR_UP_REG
reg [7:0]	r_TX_CH2_START_ADDR_UP;

// SPA_TX_ADDR_CH0_MAX_UP_REG
reg [7:0]	r_TX_ADDR_CH0_MAX_UP;

// SPA_TX_ADDR_CH0_MIN_UP_REG
reg [7:0]	r_TX_ADDR_CH0_MIN_UP;

// SPA_TX_ADDR_CH1_MAX_UP_REG
reg [7:0]	r_TX_ADDR_CH1_MAX_UP;

// SPA_TX_ADDR_CH1_MIN_UP_REG
reg [7:0]	r_TX_ADDR_CH1_MIN_UP;

// SPA_TX_ADDR_CH2_MAX_UP_REG
reg [7:0]	r_TX_ADDR_CH2_MAX_UP;

// SPA_TX_ADDR_CH2_MIN_UP_REG
reg [7:0]	r_TX_ADDR_CH2_MIN_UP;

// SPA_TX_CH0_CUR_ADDR_UP_REG
reg [7:0]	r_TX_CH0_CUR_ADDR_UP;

// SPA_TX_CH1_CUR_ADDR_UP_REG
reg [7:0]	r_TX_CH1_CUR_ADDR_UP;

// SPA_TX_CH2_CUR_ADDR_UP_REG
reg [7:0]	r_TX_CH2_CUR_ADDR_UP;

// SPA_ADAPT_DMA_ADDR_UP_REG
reg [7:0]	r_ADAPT_ADDR_UP;

// SPA_ADAPT_TX_ADDR_MAX_UP_REG
reg [7:0]	r_ADAPT_TX_ADDR_MAX_UP;

// SPA_ADAPT_TX_ADDR_MIN_UP_REG
reg [7:0]	r_ADAPT_TX_ADDR_MIN_UP;

// SPA_ADAPT_TX_CUR_ADDR_UP_REG
reg [7:0]	r_ADAPT_TX_CUR_ADDR_UP;

// SPA_SMAP_DMA_ADDR_UP_REG
reg [7:0]	r_SMAP_ADDR_UP;

// SPA_SMAP_TX_ADDR_MAX_UP_REG
reg [7:0]	r_SMAP_TX_ADDR_MAX_UP;

// SPA_SMAP_TX_ADDR_MIN_UP_REG
reg [7:0]	r_SMAP_TX_ADDR_MIN_UP;

// SPA_SMAP_TX_CUR_ADDR_UP_REG
reg [7:0]	r_SMAP_TX_CUR_ADDR_UP;

// SPA_BDS_DMA_ADDR_UP_REG
reg [7:0]	r_BDS_ADDR_UP;

// SPA_BDS_TX_ADDR_MAX_UP_REG
reg [7:0]	r_BDS_TX_ADDR_MAX_UP;

// SPA_BDS_TX_ADDR_MIN_UP_REG
reg [7:0]	r_BDS_TX_ADDR_MIN_UP;

// SPA_BDS_TX_CUR_ADDR_UP_REG
reg [7:0]	r_BDS_TX_CUR_ADDR_UP;

// SPA_ADAPT_DMA_BUF_WR_CNT_REG
reg [31:0]	r_ADAPT_DMA_BUF_WR_CNT;

// SPA_ADAPT_DMA_BUF_RD_CNT_REG
reg [31:0]	r_ADAPT_DMA_BUF_RD_CNT;

// SPA_ADAPT_DMA_OUT0_CNT_REG
reg [31:0]	r_ADAPT_DMA_OUT0_CNT;

// SPA_SMAP_DMA_BUF_WR_CNT_REG
reg [31:0]	r_SMAP_DMA_BUF_WR_CNT;

// SPA_SMAP_DMA_BUF_RD_CNT_REG
reg [31:0]	r_SMAP_DMA_BUF_RD_CNT;

// SPA_SMAP_DMA_OUT0_CNT_REG
reg [31:0]	r_SMAP_DMA_OUT0_CNT;

// SPA_BDS_DMA_BUF_WR_CNT_REG
reg [31:0]	r_BDS_DMA_BUF_WR_CNT;

// SPA_BDS_DMA_BUF_RD_CNT_REG
reg [31:0]	r_BDS_DMA_BUF_RD_CNT;

// SPA_BDS_DMA_OUT0_CNT_REG
reg [31:0]	r_BDS_DMA_OUT0_CNT;

// SPA_ADAPT_WDATA_CNT_REG
reg [31:0]	r_ADAPT_WDATA_CNT;

// SPA_SMAP_WDATA_CNT_REG
reg [31:0]	r_SMAP_WDATA_CNT;

// SPA_BDS_WDATA_CNT_REG
reg [31:0]	r_BDS_WDATA_CNT;




wire	w_wr_en;
wire	w_rd_en;

assign	w_wr_en = i_PSEL & ( i_PENABLE) & i_PWRITE;
assign	w_rd_en = i_PSEL & (~i_PENABLE);

wire	w_addr0000_wr = w_wr_en & (i_PADDR == SPA_SW_RESET_REG		);
wire	w_addr0000_rd = w_rd_en & (i_PADDR == SPA_SW_RESET_REG		);
wire	w_addr0004_wr = w_wr_en & (i_PADDR == SPA_CORE_START_REG		);
wire	w_addr0004_rd = w_rd_en & (i_PADDR == SPA_CORE_START_REG		);
wire	w_addr0008_wr = w_wr_en & (i_PADDR == SPA_MODE_REG		);
wire	w_addr0008_rd = w_rd_en & (i_PADDR == SPA_MODE_REG		);
wire	w_addr000c_wr = w_wr_en & (i_PADDR == SPA_MODULE_EN_REG		);
wire	w_addr000c_rd = w_rd_en & (i_PADDR == SPA_MODULE_EN_REG		);
wire	w_addr0010_wr = w_wr_en & (i_PADDR == SPA_RX_XD_REG		);
wire	w_addr0010_rd = w_rd_en & (i_PADDR == SPA_RX_XD_REG		);
wire	w_addr0014_wr = w_wr_en & (i_PADDR == SPA_RX_YD_REG		);
wire	w_addr0014_rd = w_rd_en & (i_PADDR == SPA_RX_YD_REG		);
wire	w_addr0018_wr = w_wr_en & (i_PADDR == SPA_TX_IMG_SIZE_REG		);
wire	w_addr0018_rd = w_rd_en & (i_PADDR == SPA_TX_IMG_SIZE_REG		);
wire	w_addr001c_wr = w_wr_en & (i_PADDR == SPA_RX_PADDING_VAL_REG		);
wire	w_addr001c_rd = w_rd_en & (i_PADDR == SPA_RX_PADDING_VAL_REG		);
wire	w_addr0024_wr = w_wr_en & (i_PADDR == SPA_VERSION_REG		);
wire	w_addr0024_rd = w_rd_en & (i_PADDR == SPA_VERSION_REG		);
wire	w_addr0030_wr = w_wr_en & (i_PADDR == SPA_IRQ_ENABLE_REG		);
wire	w_addr0030_rd = w_rd_en & (i_PADDR == SPA_IRQ_ENABLE_REG		);
wire	w_addr0034_wr = w_wr_en & (i_PADDR == SPA_IRQ_PEND_REG		);
wire	w_addr0034_rd = w_rd_en & (i_PADDR == SPA_IRQ_PEND_REG		);
wire	w_addr0038_wr = w_wr_en & (i_PADDR == SPA_IRQ_SVC_CNT_REG		);
wire	w_addr0038_rd = w_rd_en & (i_PADDR == SPA_IRQ_SVC_CNT_REG		);
wire	w_addr003c_wr = w_wr_en & (i_PADDR == SPA_RAM_SW_MODE_REG		);
wire	w_addr003c_rd = w_rd_en & (i_PADDR == SPA_RAM_SW_MODE_REG		);
wire	w_addr0040_wr = w_wr_en & (i_PADDR == SPA_RAM_CS_REG		);
wire	w_addr0040_rd = w_rd_en & (i_PADDR == SPA_RAM_CS_REG		);
wire	w_addr0048_wr = w_wr_en & (i_PADDR == SPA_RAM_DATA_REG		);
wire	w_addr0048_rd = w_rd_en & (i_PADDR == SPA_RAM_DATA_REG		);
wire	w_addr004c_wr = w_wr_en & (i_PADDR == SPA_RAM_ADDR_REG		);
wire	w_addr004c_rd = w_rd_en & (i_PADDR == SPA_RAM_ADDR_REG		);
wire	w_addr0054_wr = w_wr_en & (i_PADDR == SPA_CORE_BAND_DONE_REG		);
wire	w_addr0054_rd = w_rd_en & (i_PADDR == SPA_CORE_BAND_DONE_REG		);
wire	w_addr0058_wr = w_wr_en & (i_PADDR == SPA_CORE_PAGE_DONE_REG		);
wire	w_addr0058_rd = w_rd_en & (i_PADDR == SPA_CORE_PAGE_DONE_REG		);
wire	w_addr006c_wr = w_wr_en & (i_PADDR == SPA_TBL_RX_CNT_REG		);
wire	w_addr006c_rd = w_rd_en & (i_PADDR == SPA_TBL_RX_CNT_REG		);
wire	w_addr0070_wr = w_wr_en & (i_PADDR == SPA_TBL_TX_CNT_REG		);
wire	w_addr0070_rd = w_rd_en & (i_PADDR == SPA_TBL_TX_CNT_REG		);
wire	w_addr0074_wr = w_wr_en & (i_PADDR == SPA_TBL_END_STATUS1_REG		);
wire	w_addr0074_rd = w_rd_en & (i_PADDR == SPA_TBL_END_STATUS1_REG		);
wire	w_addr0080_wr = w_wr_en & (i_PADDR == SPA_TBL_START_REG		);
wire	w_addr0080_rd = w_rd_en & (i_PADDR == SPA_TBL_START_REG		);
wire	w_addr0084_wr = w_wr_en & (i_PADDR == SPA_TBL_ENABLE_REG		);
wire	w_addr0084_rd = w_rd_en & (i_PADDR == SPA_TBL_ENABLE_REG		);
wire	w_addr008c_wr = w_wr_en & (i_PADDR == SPA_TBL_ADDR_00_REG		);
wire	w_addr008c_rd = w_rd_en & (i_PADDR == SPA_TBL_ADDR_00_REG		);
wire	w_addr0090_wr = w_wr_en & (i_PADDR == SPA_TBL_ADDR_01_REG		);
wire	w_addr0090_rd = w_rd_en & (i_PADDR == SPA_TBL_ADDR_01_REG		);
wire	w_addr0094_wr = w_wr_en & (i_PADDR == SPA_TBL_ADDR_02_REG		);
wire	w_addr0094_rd = w_rd_en & (i_PADDR == SPA_TBL_ADDR_02_REG		);
wire	w_addr0098_wr = w_wr_en & (i_PADDR == SPA_TBL_ADDR_03_REG		);
wire	w_addr0098_rd = w_rd_en & (i_PADDR == SPA_TBL_ADDR_03_REG		);
wire	w_addr009c_wr = w_wr_en & (i_PADDR == SPA_TBL_ADDR_04_REG		);
wire	w_addr009c_rd = w_rd_en & (i_PADDR == SPA_TBL_ADDR_04_REG		);
wire	w_addr00a0_wr = w_wr_en & (i_PADDR == SPA_TBL_ADDR_05_REG		);
wire	w_addr00a0_rd = w_rd_en & (i_PADDR == SPA_TBL_ADDR_05_REG		);
wire	w_addr00a4_wr = w_wr_en & (i_PADDR == SPA_TBL_ADDR_06_REG		);
wire	w_addr00a4_rd = w_rd_en & (i_PADDR == SPA_TBL_ADDR_06_REG		);
wire	w_addr00a8_wr = w_wr_en & (i_PADDR == SPA_TBL_ADDR_07_REG		);
wire	w_addr00a8_rd = w_rd_en & (i_PADDR == SPA_TBL_ADDR_07_REG		);
wire	w_addr00ac_wr = w_wr_en & (i_PADDR == SPA_TBL_ADDR_08_REG		);
wire	w_addr00ac_rd = w_rd_en & (i_PADDR == SPA_TBL_ADDR_08_REG		);
wire	w_addr00b0_wr = w_wr_en & (i_PADDR == SPA_TBL_ADDR_09_REG		);
wire	w_addr00b0_rd = w_rd_en & (i_PADDR == SPA_TBL_ADDR_09_REG		);
wire	w_addr00b4_wr = w_wr_en & (i_PADDR == SPA_TBL_ADDR_10_REG		);
wire	w_addr00b4_rd = w_rd_en & (i_PADDR == SPA_TBL_ADDR_10_REG		);
wire	w_addr00b8_wr = w_wr_en & (i_PADDR == SPA_TBL_ADDR_11_REG		);
wire	w_addr00b8_rd = w_rd_en & (i_PADDR == SPA_TBL_ADDR_11_REG		);
wire	w_addr00bc_wr = w_wr_en & (i_PADDR == SPA_TBL_ADDR_12_REG		);
wire	w_addr00bc_rd = w_rd_en & (i_PADDR == SPA_TBL_ADDR_12_REG		);
wire	w_addr00c0_wr = w_wr_en & (i_PADDR == SPA_TBL_ADDR_13_REG		);
wire	w_addr00c0_rd = w_rd_en & (i_PADDR == SPA_TBL_ADDR_13_REG		);
wire	w_addr00c4_wr = w_wr_en & (i_PADDR == SPA_TBL_ADDR_14_REG		);
wire	w_addr00c4_rd = w_rd_en & (i_PADDR == SPA_TBL_ADDR_14_REG		);
wire	w_addr00c8_wr = w_wr_en & (i_PADDR == SPA_TBL_ADDR_15_REG		);
wire	w_addr00c8_rd = w_rd_en & (i_PADDR == SPA_TBL_ADDR_15_REG		);
wire	w_addr00cc_wr = w_wr_en & (i_PADDR == SPA_TBL_ADDR_16_REG		);
wire	w_addr00cc_rd = w_rd_en & (i_PADDR == SPA_TBL_ADDR_16_REG		);
wire	w_addr00d0_wr = w_wr_en & (i_PADDR == SPA_TBL_ADDR_17_REG		);
wire	w_addr00d0_rd = w_rd_en & (i_PADDR == SPA_TBL_ADDR_17_REG		);
wire	w_addr00d4_wr = w_wr_en & (i_PADDR == SPA_TBL_ADDR_18_REG		);
wire	w_addr00d4_rd = w_rd_en & (i_PADDR == SPA_TBL_ADDR_18_REG		);
wire	w_addr00d8_wr = w_wr_en & (i_PADDR == SPA_TBL_ADDR_19_REG		);
wire	w_addr00d8_rd = w_rd_en & (i_PADDR == SPA_TBL_ADDR_19_REG		);
wire	w_addr00dc_wr = w_wr_en & (i_PADDR == SPA_TBL_ADDR_20_REG		);
wire	w_addr00dc_rd = w_rd_en & (i_PADDR == SPA_TBL_ADDR_20_REG		);
wire	w_addr00e0_wr = w_wr_en & (i_PADDR == SPA_TBL_ADDR_21_REG		);
wire	w_addr00e0_rd = w_rd_en & (i_PADDR == SPA_TBL_ADDR_21_REG		);
wire	w_addr00e4_wr = w_wr_en & (i_PADDR == SPA_TBL_ADDR_22_REG		);
wire	w_addr00e4_rd = w_rd_en & (i_PADDR == SPA_TBL_ADDR_22_REG		);
wire	w_addr00e8_wr = w_wr_en & (i_PADDR == SPA_TBL_ADDR_23_REG		);
wire	w_addr00e8_rd = w_rd_en & (i_PADDR == SPA_TBL_ADDR_23_REG		);
wire	w_addr00ec_wr = w_wr_en & (i_PADDR == SPA_TBL_ADDR_24_REG		);
wire	w_addr00ec_rd = w_rd_en & (i_PADDR == SPA_TBL_ADDR_24_REG		);
wire	w_addr0140_wr = w_wr_en & (i_PADDR == SPA_RX_START_REG		);
wire	w_addr0140_rd = w_rd_en & (i_PADDR == SPA_RX_START_REG		);
wire	w_addr0148_wr = w_wr_en & (i_PADDR == SPA_RX_INCR_REG		);
wire	w_addr0148_rd = w_rd_en & (i_PADDR == SPA_RX_INCR_REG		);
wire	w_addr014c_wr = w_wr_en & (i_PADDR == SPA_RX_CH0_PREV_ADDR_REG		);
wire	w_addr014c_rd = w_rd_en & (i_PADDR == SPA_RX_CH0_PREV_ADDR_REG		);
wire	w_addr0150_wr = w_wr_en & (i_PADDR == SPA_RX_CH1_PREV_ADDR_REG		);
wire	w_addr0150_rd = w_rd_en & (i_PADDR == SPA_RX_CH1_PREV_ADDR_REG		);
wire	w_addr0154_wr = w_wr_en & (i_PADDR == SPA_RX_CH2_PREV_ADDR_REG		);
wire	w_addr0154_rd = w_rd_en & (i_PADDR == SPA_RX_CH2_PREV_ADDR_REG		);
wire	w_addr0158_wr = w_wr_en & (i_PADDR == SPA_RX_CH0_CURR_ADDR_REG		);
wire	w_addr0158_rd = w_rd_en & (i_PADDR == SPA_RX_CH0_CURR_ADDR_REG		);
wire	w_addr015c_wr = w_wr_en & (i_PADDR == SPA_RX_CH1_CURR_ADDR_REG		);
wire	w_addr015c_rd = w_rd_en & (i_PADDR == SPA_RX_CH1_CURR_ADDR_REG		);
wire	w_addr0160_wr = w_wr_en & (i_PADDR == SPA_RX_CH2_CURR_ADDR_REG		);
wire	w_addr0160_rd = w_rd_en & (i_PADDR == SPA_RX_CH2_CURR_ADDR_REG		);
wire	w_addr0164_wr = w_wr_en & (i_PADDR == SPA_RX_CH0_START_ADDR_REG		);
wire	w_addr0164_rd = w_rd_en & (i_PADDR == SPA_RX_CH0_START_ADDR_REG		);
wire	w_addr0168_wr = w_wr_en & (i_PADDR == SPA_RX_CH1_START_ADDR_REG		);
wire	w_addr0168_rd = w_rd_en & (i_PADDR == SPA_RX_CH1_START_ADDR_REG		);
wire	w_addr016c_wr = w_wr_en & (i_PADDR == SPA_RX_CH2_START_ADDR_REG		);
wire	w_addr016c_rd = w_rd_en & (i_PADDR == SPA_RX_CH2_START_ADDR_REG		);
wire	w_addr0170_wr = w_wr_en & (i_PADDR == SPA_RX_BLK_CNT_REG		);
wire	w_addr0170_rd = w_rd_en & (i_PADDR == SPA_RX_BLK_CNT_REG		);
wire	w_addr0174_wr = w_wr_en & (i_PADDR == SPA_RX_STATUS_REG		);
wire	w_addr0174_rd = w_rd_en & (i_PADDR == SPA_RX_STATUS_REG		);
wire	w_addr0178_wr = w_wr_en & (i_PADDR == SPA_RX_CH0_CUR_ADDR_REG		);
wire	w_addr0178_rd = w_rd_en & (i_PADDR == SPA_RX_CH0_CUR_ADDR_REG		);
wire	w_addr017c_wr = w_wr_en & (i_PADDR == SPA_RX_CH1_CUR_ADDR_REG		);
wire	w_addr017c_rd = w_rd_en & (i_PADDR == SPA_RX_CH1_CUR_ADDR_REG		);
wire	w_addr0180_wr = w_wr_en & (i_PADDR == SPA_RX_CH2_CUR_ADDR_REG		);
wire	w_addr0180_rd = w_rd_en & (i_PADDR == SPA_RX_CH2_CUR_ADDR_REG		);
wire	w_addr0184_wr = w_wr_en & (i_PADDR == SPA_RX_CH0_SVC_CNT_REG		);
wire	w_addr0184_rd = w_rd_en & (i_PADDR == SPA_RX_CH0_SVC_CNT_REG		);
wire	w_addr0188_wr = w_wr_en & (i_PADDR == SPA_RX_CH1_SVC_CNT_REG		);
wire	w_addr0188_rd = w_rd_en & (i_PADDR == SPA_RX_CH1_SVC_CNT_REG		);
wire	w_addr018c_wr = w_wr_en & (i_PADDR == SPA_RX_CH2_SVC_CNT_REG		);
wire	w_addr018c_rd = w_rd_en & (i_PADDR == SPA_RX_CH2_SVC_CNT_REG		);
wire	w_addr0190_wr = w_wr_en & (i_PADDR == SPA_RX_DMA_CON_REG		);
wire	w_addr0190_rd = w_rd_en & (i_PADDR == SPA_RX_DMA_CON_REG		);
wire	w_addr0194_wr = w_wr_en & (i_PADDR == SPA_RX_ERR_STATUS_REG		);
wire	w_addr0194_rd = w_rd_en & (i_PADDR == SPA_RX_ERR_STATUS_REG		);
wire	w_addr01c0_wr = w_wr_en & (i_PADDR == SPA_TX_START_REG		);
wire	w_addr01c0_rd = w_rd_en & (i_PADDR == SPA_TX_START_REG		);
wire	w_addr01c4_wr = w_wr_en & (i_PADDR == SPA_TX_DMA_CON_REG		);
wire	w_addr01c4_rd = w_rd_en & (i_PADDR == SPA_TX_DMA_CON_REG		);
wire	w_addr01c8_wr = w_wr_en & (i_PADDR == SPA_TX_BAND_NUM_REG		);
wire	w_addr01c8_rd = w_rd_en & (i_PADDR == SPA_TX_BAND_NUM_REG		);
wire	w_addr01cc_wr = w_wr_en & (i_PADDR == SPA_TX_DATA_INCR_REG		);
wire	w_addr01cc_rd = w_rd_en & (i_PADDR == SPA_TX_DATA_INCR_REG		);
wire	w_addr01d4_wr = w_wr_en & (i_PADDR == SPA_TX_CH0_START_ADDR_REG		);
wire	w_addr01d4_rd = w_rd_en & (i_PADDR == SPA_TX_CH0_START_ADDR_REG		);
wire	w_addr01d8_wr = w_wr_en & (i_PADDR == SPA_TX_CH1_START_ADDR_REG		);
wire	w_addr01d8_rd = w_rd_en & (i_PADDR == SPA_TX_CH1_START_ADDR_REG		);
wire	w_addr01dc_wr = w_wr_en & (i_PADDR == SPA_TX_CH2_START_ADDR_REG		);
wire	w_addr01dc_rd = w_rd_en & (i_PADDR == SPA_TX_CH2_START_ADDR_REG		);
wire	w_addr01e8_wr = w_wr_en & (i_PADDR == SPA_TX_BLK_CNT_REG		);
wire	w_addr01e8_rd = w_rd_en & (i_PADDR == SPA_TX_BLK_CNT_REG		);
wire	w_addr01ec_wr = w_wr_en & (i_PADDR == SPA_TX_STATUS_REG		);
wire	w_addr01ec_rd = w_rd_en & (i_PADDR == SPA_TX_STATUS_REG		);
wire	w_addr01f0_wr = w_wr_en & (i_PADDR == SPA_TX_ADDR_CH0_MAX_REG		);
wire	w_addr01f0_rd = w_rd_en & (i_PADDR == SPA_TX_ADDR_CH0_MAX_REG		);
wire	w_addr01f4_wr = w_wr_en & (i_PADDR == SPA_TX_ADDR_CH0_MIN_REG		);
wire	w_addr01f4_rd = w_rd_en & (i_PADDR == SPA_TX_ADDR_CH0_MIN_REG		);
wire	w_addr01f8_wr = w_wr_en & (i_PADDR == SPA_TX_ADDR_CH1_MAX_REG		);
wire	w_addr01f8_rd = w_rd_en & (i_PADDR == SPA_TX_ADDR_CH1_MAX_REG		);
wire	w_addr01fc_wr = w_wr_en & (i_PADDR == SPA_TX_ADDR_CH1_MIN_REG		);
wire	w_addr01fc_rd = w_rd_en & (i_PADDR == SPA_TX_ADDR_CH1_MIN_REG		);
wire	w_addr0200_wr = w_wr_en & (i_PADDR == SPA_TX_ADDR_CH2_MAX_REG		);
wire	w_addr0200_rd = w_rd_en & (i_PADDR == SPA_TX_ADDR_CH2_MAX_REG		);
wire	w_addr0204_wr = w_wr_en & (i_PADDR == SPA_TX_ADDR_CH2_MIN_REG		);
wire	w_addr0204_rd = w_rd_en & (i_PADDR == SPA_TX_ADDR_CH2_MIN_REG		);
wire	w_addr0218_wr = w_wr_en & (i_PADDR == SPA_TX_CH0_CUR_ADDR_REG		);
wire	w_addr0218_rd = w_rd_en & (i_PADDR == SPA_TX_CH0_CUR_ADDR_REG		);
wire	w_addr021c_wr = w_wr_en & (i_PADDR == SPA_TX_CH1_CUR_ADDR_REG		);
wire	w_addr021c_rd = w_rd_en & (i_PADDR == SPA_TX_CH1_CUR_ADDR_REG		);
wire	w_addr0220_wr = w_wr_en & (i_PADDR == SPA_TX_CH2_CUR_ADDR_REG		);
wire	w_addr0220_rd = w_rd_en & (i_PADDR == SPA_TX_CH2_CUR_ADDR_REG		);
wire	w_addr022c_wr = w_wr_en & (i_PADDR == SPA_TX_CH0_SVC_CNT_REG		);
wire	w_addr022c_rd = w_rd_en & (i_PADDR == SPA_TX_CH0_SVC_CNT_REG		);
wire	w_addr0230_wr = w_wr_en & (i_PADDR == SPA_TX_CH1_SVC_CNT_REG		);
wire	w_addr0230_rd = w_rd_en & (i_PADDR == SPA_TX_CH1_SVC_CNT_REG		);
wire	w_addr0234_wr = w_wr_en & (i_PADDR == SPA_TX_CH2_SVC_CNT_REG		);
wire	w_addr0234_rd = w_rd_en & (i_PADDR == SPA_TX_CH2_SVC_CNT_REG		);
wire	w_addr0240_wr = w_wr_en & (i_PADDR == SPA_TX_ERR_STATUS_REG		);
wire	w_addr0240_rd = w_rd_en & (i_PADDR == SPA_TX_ERR_STATUS_REG		);
wire	w_addr0280_wr = w_wr_en & (i_PADDR == SPA_ADAPT_DMA_CON_REG		);
wire	w_addr0280_rd = w_rd_en & (i_PADDR == SPA_ADAPT_DMA_CON_REG		);
wire	w_addr0284_wr = w_wr_en & (i_PADDR == SPA_ADAPT_DMA_ADDR_REG		);
wire	w_addr0284_rd = w_rd_en & (i_PADDR == SPA_ADAPT_DMA_ADDR_REG		);
wire	w_addr0288_wr = w_wr_en & (i_PADDR == SPA_ADAPT_DMA_ADDR_INCR_REG		);
wire	w_addr0288_rd = w_rd_en & (i_PADDR == SPA_ADAPT_DMA_ADDR_INCR_REG		);
wire	w_addr028c_wr = w_wr_en & (i_PADDR == SPA_ADAPT_DMA_STATUS_REG		);
wire	w_addr028c_rd = w_rd_en & (i_PADDR == SPA_ADAPT_DMA_STATUS_REG		);
wire	w_addr0290_wr = w_wr_en & (i_PADDR == SPA_ADAPT_TX_ADDR_MAX_REG		);
wire	w_addr0290_rd = w_rd_en & (i_PADDR == SPA_ADAPT_TX_ADDR_MAX_REG		);
wire	w_addr0294_wr = w_wr_en & (i_PADDR == SPA_ADAPT_TX_ADDR_MIN_REG		);
wire	w_addr0294_rd = w_rd_en & (i_PADDR == SPA_ADAPT_TX_ADDR_MIN_REG		);
wire	w_addr0298_wr = w_wr_en & (i_PADDR == SPA_ADAPT_TX_CUR_ADDR_REG		);
wire	w_addr0298_rd = w_rd_en & (i_PADDR == SPA_ADAPT_TX_CUR_ADDR_REG		);
wire	w_addr029c_wr = w_wr_en & (i_PADDR == SPA_ADAPT_TX_SVC_CNT_REG		);
wire	w_addr029c_rd = w_rd_en & (i_PADDR == SPA_ADAPT_TX_SVC_CNT_REG		);
wire	w_addr02a0_wr = w_wr_en & (i_PADDR == SPA_ADAPT_START_REG		);
wire	w_addr02a0_rd = w_rd_en & (i_PADDR == SPA_ADAPT_START_REG		);
wire	w_addr02a4_wr = w_wr_en & (i_PADDR == SPA_ADAPT_BAND_CNT_REG		);
wire	w_addr02a4_rd = w_rd_en & (i_PADDR == SPA_ADAPT_BAND_CNT_REG		);
wire	w_addr02c0_wr = w_wr_en & (i_PADDR == SPA_SMAP_DMA_CON_REG		);
wire	w_addr02c0_rd = w_rd_en & (i_PADDR == SPA_SMAP_DMA_CON_REG		);
wire	w_addr02c4_wr = w_wr_en & (i_PADDR == SPA_SMAP_DMA_ADDR_REG		);
wire	w_addr02c4_rd = w_rd_en & (i_PADDR == SPA_SMAP_DMA_ADDR_REG		);
wire	w_addr02c8_wr = w_wr_en & (i_PADDR == SPA_SMAP_DMA_ADDR_INCR_REG		);
wire	w_addr02c8_rd = w_rd_en & (i_PADDR == SPA_SMAP_DMA_ADDR_INCR_REG		);
wire	w_addr02cc_wr = w_wr_en & (i_PADDR == SPA_SMAP_DMA_STATUS_REG		);
wire	w_addr02cc_rd = w_rd_en & (i_PADDR == SPA_SMAP_DMA_STATUS_REG		);
wire	w_addr02d0_wr = w_wr_en & (i_PADDR == SPA_SMAP_TX_ADDR_MAX_REG		);
wire	w_addr02d0_rd = w_rd_en & (i_PADDR == SPA_SMAP_TX_ADDR_MAX_REG		);
wire	w_addr02d4_wr = w_wr_en & (i_PADDR == SPA_SMAP_TX_ADDR_MIN_REG		);
wire	w_addr02d4_rd = w_rd_en & (i_PADDR == SPA_SMAP_TX_ADDR_MIN_REG		);
wire	w_addr02d8_wr = w_wr_en & (i_PADDR == SPA_SMAP_TX_CUR_ADDR_REG		);
wire	w_addr02d8_rd = w_rd_en & (i_PADDR == SPA_SMAP_TX_CUR_ADDR_REG		);
wire	w_addr02dc_wr = w_wr_en & (i_PADDR == SPA_SMAP_TX_SVC_CNT_REG		);
wire	w_addr02dc_rd = w_rd_en & (i_PADDR == SPA_SMAP_TX_SVC_CNT_REG		);
wire	w_addr02e0_wr = w_wr_en & (i_PADDR == SPA_SMAP_START_REG		);
wire	w_addr02e0_rd = w_rd_en & (i_PADDR == SPA_SMAP_START_REG		);
wire	w_addr02e4_wr = w_wr_en & (i_PADDR == SPA_SMAP_BAND_CNT_REG		);
wire	w_addr02e4_rd = w_rd_en & (i_PADDR == SPA_SMAP_BAND_CNT_REG		);
wire	w_addr0300_wr = w_wr_en & (i_PADDR == SPA_BDS_DMA_CON_REG		);
wire	w_addr0300_rd = w_rd_en & (i_PADDR == SPA_BDS_DMA_CON_REG		);
wire	w_addr0304_wr = w_wr_en & (i_PADDR == SPA_BDS_DMA_ADDR_REG		);
wire	w_addr0304_rd = w_rd_en & (i_PADDR == SPA_BDS_DMA_ADDR_REG		);
wire	w_addr0308_wr = w_wr_en & (i_PADDR == SPA_BDS_DMA_ADDR_INCR_REG		);
wire	w_addr0308_rd = w_rd_en & (i_PADDR == SPA_BDS_DMA_ADDR_INCR_REG		);
wire	w_addr030c_wr = w_wr_en & (i_PADDR == SPA_BDS_DMA_STATUS_REG		);
wire	w_addr030c_rd = w_rd_en & (i_PADDR == SPA_BDS_DMA_STATUS_REG		);
wire	w_addr0310_wr = w_wr_en & (i_PADDR == SPA_BDS_TX_ADDR_MAX_REG		);
wire	w_addr0310_rd = w_rd_en & (i_PADDR == SPA_BDS_TX_ADDR_MAX_REG		);
wire	w_addr0314_wr = w_wr_en & (i_PADDR == SPA_BDS_TX_ADDR_MIN_REG		);
wire	w_addr0314_rd = w_rd_en & (i_PADDR == SPA_BDS_TX_ADDR_MIN_REG		);
wire	w_addr0318_wr = w_wr_en & (i_PADDR == SPA_BDS_TX_CUR_ADDR_REG		);
wire	w_addr0318_rd = w_rd_en & (i_PADDR == SPA_BDS_TX_CUR_ADDR_REG		);
wire	w_addr031c_wr = w_wr_en & (i_PADDR == SPA_BDS_TX_SVC_CNT_REG		);
wire	w_addr031c_rd = w_rd_en & (i_PADDR == SPA_BDS_TX_SVC_CNT_REG		);
wire	w_addr0320_wr = w_wr_en & (i_PADDR == SPA_BDS_START_REG		);
wire	w_addr0320_rd = w_rd_en & (i_PADDR == SPA_BDS_START_REG		);
wire	w_addr0324_wr = w_wr_en & (i_PADDR == SPA_BDS_BAND_CNT_REG		);
wire	w_addr0324_rd = w_rd_en & (i_PADDR == SPA_BDS_BAND_CNT_REG		);
wire	w_addr0340_wr = w_wr_en & (i_PADDR == SPA_RX_CH0_CRC_REG		);
wire	w_addr0340_rd = w_rd_en & (i_PADDR == SPA_RX_CH0_CRC_REG		);
wire	w_addr0344_wr = w_wr_en & (i_PADDR == SPA_RX_CH1_CRC_REG		);
wire	w_addr0344_rd = w_rd_en & (i_PADDR == SPA_RX_CH1_CRC_REG		);
wire	w_addr0348_wr = w_wr_en & (i_PADDR == SPA_RX_CH2_CRC_REG		);
wire	w_addr0348_rd = w_rd_en & (i_PADDR == SPA_RX_CH2_CRC_REG		);
wire	w_addr0350_wr = w_wr_en & (i_PADDR == SPA_RC1_CH0_CRC_REG		);
wire	w_addr0350_rd = w_rd_en & (i_PADDR == SPA_RC1_CH0_CRC_REG		);
wire	w_addr0354_wr = w_wr_en & (i_PADDR == SPA_RC1_CH1_CRC_REG		);
wire	w_addr0354_rd = w_rd_en & (i_PADDR == SPA_RC1_CH1_CRC_REG		);
wire	w_addr0358_wr = w_wr_en & (i_PADDR == SPA_RC1_CH2_CRC_REG		);
wire	w_addr0358_rd = w_rd_en & (i_PADDR == SPA_RC1_CH2_CRC_REG		);
wire	w_addr0360_wr = w_wr_en & (i_PADDR == SPA_RC1_CH0_CRC_DEBUG_REG		);
wire	w_addr0360_rd = w_rd_en & (i_PADDR == SPA_RC1_CH0_CRC_DEBUG_REG		);
wire	w_addr0364_wr = w_wr_en & (i_PADDR == SPA_RC1_CH1_CRC_DEBUG_REG		);
wire	w_addr0364_rd = w_rd_en & (i_PADDR == SPA_RC1_CH1_CRC_DEBUG_REG		);
wire	w_addr0368_wr = w_wr_en & (i_PADDR == SPA_RC1_CH2_CRC_DEBUG_REG		);
wire	w_addr0368_rd = w_rd_en & (i_PADDR == SPA_RC1_CH2_CRC_DEBUG_REG		);
wire	w_addr0370_wr = w_wr_en & (i_PADDR == SPA_S1D_CH0_CRC_REG		);
wire	w_addr0370_rd = w_rd_en & (i_PADDR == SPA_S1D_CH0_CRC_REG		);
wire	w_addr0374_wr = w_wr_en & (i_PADDR == SPA_S1D_CH1_CRC_REG		);
wire	w_addr0374_rd = w_rd_en & (i_PADDR == SPA_S1D_CH1_CRC_REG		);
wire	w_addr0378_wr = w_wr_en & (i_PADDR == SPA_S1D_CH2_CRC_REG		);
wire	w_addr0378_rd = w_rd_en & (i_PADDR == SPA_S1D_CH2_CRC_REG		);
wire	w_addr0380_wr = w_wr_en & (i_PADDR == SPA_SEG1_CH0_CRC_REG		);
wire	w_addr0380_rd = w_rd_en & (i_PADDR == SPA_SEG1_CH0_CRC_REG		);
wire	w_addr0384_wr = w_wr_en & (i_PADDR == SPA_SEG1_CH1_CRC_REG		);
wire	w_addr0384_rd = w_rd_en & (i_PADDR == SPA_SEG1_CH1_CRC_REG		);
wire	w_addr0388_wr = w_wr_en & (i_PADDR == SPA_SEG1_CH2_CRC_REG		);
wire	w_addr0388_rd = w_rd_en & (i_PADDR == SPA_SEG1_CH2_CRC_REG		);
wire	w_addr038c_wr = w_wr_en & (i_PADDR == SPA_SEG1_ATT_CRC_REG		);
wire	w_addr038c_rd = w_rd_en & (i_PADDR == SPA_SEG1_ATT_CRC_REG		);
wire	w_addr0390_wr = w_wr_en & (i_PADDR == SPA_SCC_CH0_CRC_REG		);
wire	w_addr0390_rd = w_rd_en & (i_PADDR == SPA_SCC_CH0_CRC_REG		);
wire	w_addr0394_wr = w_wr_en & (i_PADDR == SPA_SCC_CH1_CRC_REG		);
wire	w_addr0394_rd = w_rd_en & (i_PADDR == SPA_SCC_CH1_CRC_REG		);
wire	w_addr0398_wr = w_wr_en & (i_PADDR == SPA_SCC_CH2_CRC_REG		);
wire	w_addr0398_rd = w_rd_en & (i_PADDR == SPA_SCC_CH2_CRC_REG		);
wire	w_addr039c_wr = w_wr_en & (i_PADDR == SPA_SCC_ATT_CRC_REG		);
wire	w_addr039c_rd = w_rd_en & (i_PADDR == SPA_SCC_ATT_CRC_REG		);
wire	w_addr03a0_wr = w_wr_en & (i_PADDR == SPA_SEG2_CH0_CRC_REG		);
wire	w_addr03a0_rd = w_rd_en & (i_PADDR == SPA_SEG2_CH0_CRC_REG		);
wire	w_addr03a4_wr = w_wr_en & (i_PADDR == SPA_SEG2_CH1_CRC_REG		);
wire	w_addr03a4_rd = w_rd_en & (i_PADDR == SPA_SEG2_CH1_CRC_REG		);
wire	w_addr03a8_wr = w_wr_en & (i_PADDR == SPA_SEG2_CH2_CRC_REG		);
wire	w_addr03a8_rd = w_rd_en & (i_PADDR == SPA_SEG2_CH2_CRC_REG		);
wire	w_addr03ac_wr = w_wr_en & (i_PADDR == SPA_SEG2_ATT_CRC_REG		);
wire	w_addr03ac_rd = w_rd_en & (i_PADDR == SPA_SEG2_ATT_CRC_REG		);
wire	w_addr03b0_wr = w_wr_en & (i_PADDR == SPA_BSSA_CH0_CRC_REG		);
wire	w_addr03b0_rd = w_rd_en & (i_PADDR == SPA_BSSA_CH0_CRC_REG		);
wire	w_addr03b4_wr = w_wr_en & (i_PADDR == SPA_BSSA_CH1_CRC_REG		);
wire	w_addr03b4_rd = w_rd_en & (i_PADDR == SPA_BSSA_CH1_CRC_REG		);
wire	w_addr03b8_wr = w_wr_en & (i_PADDR == SPA_BSSA_CH2_CRC_REG		);
wire	w_addr03b8_rd = w_rd_en & (i_PADDR == SPA_BSSA_CH2_CRC_REG		);
wire	w_addr03c0_wr = w_wr_en & (i_PADDR == SPA_DMATX_CH0_CRC_REG		);
wire	w_addr03c0_rd = w_rd_en & (i_PADDR == SPA_DMATX_CH0_CRC_REG		);
wire	w_addr03c4_wr = w_wr_en & (i_PADDR == SPA_DMATX_CH1_CRC_REG		);
wire	w_addr03c4_rd = w_rd_en & (i_PADDR == SPA_DMATX_CH1_CRC_REG		);
wire	w_addr03c8_wr = w_wr_en & (i_PADDR == SPA_DMATX_CH2_CRC_REG		);
wire	w_addr03c8_rd = w_rd_en & (i_PADDR == SPA_DMATX_CH2_CRC_REG		);
wire	w_addr03d0_wr = w_wr_en & (i_PADDR == SPA_RC2_CH0_CRC_REG		);
wire	w_addr03d0_rd = w_rd_en & (i_PADDR == SPA_RC2_CH0_CRC_REG		);
wire	w_addr03d4_wr = w_wr_en & (i_PADDR == SPA_RC2_CH1_CRC_REG		);
wire	w_addr03d4_rd = w_rd_en & (i_PADDR == SPA_RC2_CH1_CRC_REG		);
wire	w_addr03d8_wr = w_wr_en & (i_PADDR == SPA_RC2_CH2_CRC_REG		);
wire	w_addr03d8_rd = w_rd_en & (i_PADDR == SPA_RC2_CH2_CRC_REG		);
wire	w_addr03e0_wr = w_wr_en & (i_PADDR == SPA_ADAPT_CRC_REG		);
wire	w_addr03e0_rd = w_rd_en & (i_PADDR == SPA_ADAPT_CRC_REG		);
wire	w_addr03e4_wr = w_wr_en & (i_PADDR == SPA_SMAP_CRC_REG		);
wire	w_addr03e4_rd = w_rd_en & (i_PADDR == SPA_SMAP_CRC_REG		);
wire	w_addr03e8_wr = w_wr_en & (i_PADDR == SPA_BDS_CRC_REG		);
wire	w_addr03e8_rd = w_rd_en & (i_PADDR == SPA_BDS_CRC_REG		);
wire	w_addr03f0_wr = w_wr_en & (i_PADDR == SPA_VSD_CH0_CRC_REG		);
wire	w_addr03f0_rd = w_rd_en & (i_PADDR == SPA_VSD_CH0_CRC_REG		);
wire	w_addr03f4_wr = w_wr_en & (i_PADDR == SPA_VSD_CH1_CRC_REG		);
wire	w_addr03f4_rd = w_rd_en & (i_PADDR == SPA_VSD_CH1_CRC_REG		);
wire	w_addr03f8_wr = w_wr_en & (i_PADDR == SPA_VSD_CH2_CRC_REG		);
wire	w_addr03f8_rd = w_rd_en & (i_PADDR == SPA_VSD_CH2_CRC_REG		);
wire	w_addr0400_wr = w_wr_en & (i_PADDR == SPA_CIS_CH0_CRC_REG		);
wire	w_addr0400_rd = w_rd_en & (i_PADDR == SPA_CIS_CH0_CRC_REG		);
wire	w_addr0404_wr = w_wr_en & (i_PADDR == SPA_CIS_CH1_CRC_REG		);
wire	w_addr0404_rd = w_rd_en & (i_PADDR == SPA_CIS_CH1_CRC_REG		);
wire	w_addr0408_wr = w_wr_en & (i_PADDR == SPA_CIS_CH2_CRC_REG		);
wire	w_addr0408_rd = w_rd_en & (i_PADDR == SPA_CIS_CH2_CRC_REG		);
wire	w_addr0410_wr = w_wr_en & (i_PADDR == SPA_BSSB_CH0_CRC_REG		);
wire	w_addr0410_rd = w_rd_en & (i_PADDR == SPA_BSSB_CH0_CRC_REG		);
wire	w_addr0414_wr = w_wr_en & (i_PADDR == SPA_BSSB_CH1_CRC_REG		);
wire	w_addr0414_rd = w_rd_en & (i_PADDR == SPA_BSSB_CH1_CRC_REG		);
wire	w_addr0418_wr = w_wr_en & (i_PADDR == SPA_BSSB_CH2_CRC_REG		);
wire	w_addr0418_rd = w_rd_en & (i_PADDR == SPA_BSSB_CH2_CRC_REG		);
wire	w_addr0440_wr = w_wr_en & (i_PADDR == SPA_S1D_DEBUG_FLAG_REG		);
wire	w_addr0440_rd = w_rd_en & (i_PADDR == SPA_S1D_DEBUG_FLAG_REG		);
wire	w_addr0444_wr = w_wr_en & (i_PADDR == SPA_SCC_DEBUG_FLAG_REG		);
wire	w_addr0444_rd = w_rd_en & (i_PADDR == SPA_SCC_DEBUG_FLAG_REG		);
wire	w_addr0448_wr = w_wr_en & (i_PADDR == SPA_BDS_DEBUG_FLAG_REG		);
wire	w_addr0448_rd = w_rd_en & (i_PADDR == SPA_BDS_DEBUG_FLAG_REG		);
wire	w_addr044c_wr = w_wr_en & (i_PADDR == SPA_BSSA_DEBUG_FLAG_REG		);
wire	w_addr044c_rd = w_rd_en & (i_PADDR == SPA_BSSA_DEBUG_FLAG_REG		);
wire	w_addr0450_wr = w_wr_en & (i_PADDR == SPA_BSSB_DEBUG_FLAG_REG		);
wire	w_addr0450_rd = w_rd_en & (i_PADDR == SPA_BSSB_DEBUG_FLAG_REG		);
wire	w_addr0480_wr = w_wr_en & (i_PADDR == SPA_VSD_A_REG		);
wire	w_addr0480_rd = w_rd_en & (i_PADDR == SPA_VSD_A_REG		);
wire	w_addr0484_wr = w_wr_en & (i_PADDR == SPA_VSD_B_REG		);
wire	w_addr0484_rd = w_rd_en & (i_PADDR == SPA_VSD_B_REG		);
wire	w_addr0488_wr = w_wr_en & (i_PADDR == SPA_VSD_C_REG		);
wire	w_addr0488_rd = w_rd_en & (i_PADDR == SPA_VSD_C_REG		);
wire	w_addr048c_wr = w_wr_en & (i_PADDR == SPA_VSC_D_REG		);
wire	w_addr048c_rd = w_rd_en & (i_PADDR == SPA_VSC_D_REG		);
wire	w_addr0490_wr = w_wr_en & (i_PADDR == SPA_VSD_E_REG		);
wire	w_addr0490_rd = w_rd_en & (i_PADDR == SPA_VSD_E_REG		);
wire	w_addr0494_wr = w_wr_en & (i_PADDR == SPA_VSD_F_REG		);
wire	w_addr0494_rd = w_rd_en & (i_PADDR == SPA_VSD_F_REG		);
wire	w_addr0498_wr = w_wr_en & (i_PADDR == SPA_VSD_G_REG		);
wire	w_addr0498_rd = w_rd_en & (i_PADDR == SPA_VSD_G_REG		);
wire	w_addr049c_wr = w_wr_en & (i_PADDR == SPA_VSD_H_REG		);
wire	w_addr049c_rd = w_rd_en & (i_PADDR == SPA_VSD_H_REG		);
wire	w_addr04c0_wr = w_wr_en & (i_PADDR == SPA_CIS_SUB_COEF_R_REG		);
wire	w_addr04c0_rd = w_rd_en & (i_PADDR == SPA_CIS_SUB_COEF_R_REG		);
wire	w_addr04c4_wr = w_wr_en & (i_PADDR == SPA_CIS_SUB_COEF_G_REG		);
wire	w_addr04c4_rd = w_rd_en & (i_PADDR == SPA_CIS_SUB_COEF_G_REG		);
wire	w_addr04c8_wr = w_wr_en & (i_PADDR == SPA_CIS_SUB_COEF_B_REG		);
wire	w_addr04c8_rd = w_rd_en & (i_PADDR == SPA_CIS_SUB_COEF_B_REG		);
wire	w_addr0500_wr = w_wr_en & (i_PADDR == SPA_RC1_SHIFT_VAL_REG		);
wire	w_addr0500_rd = w_rd_en & (i_PADDR == SPA_RC1_SHIFT_VAL_REG		);
wire	w_addr0504_wr = w_wr_en & (i_PADDR == SPA_RC1_SHIFT_OFST_REG		);
wire	w_addr0504_rd = w_rd_en & (i_PADDR == SPA_RC1_SHIFT_OFST_REG		);
wire	w_addr0508_wr = w_wr_en & (i_PADDR == SPA_RC1_LOOP_REG		);
wire	w_addr0508_rd = w_rd_en & (i_PADDR == SPA_RC1_LOOP_REG		);
wire	w_addr0510_wr = w_wr_en & (i_PADDR == SPA_RC1_X_COF_00_01_REG		);
wire	w_addr0510_rd = w_rd_en & (i_PADDR == SPA_RC1_X_COF_00_01_REG		);
wire	w_addr0514_wr = w_wr_en & (i_PADDR == SPA_RC1_X_COF_02_03_REG		);
wire	w_addr0514_rd = w_rd_en & (i_PADDR == SPA_RC1_X_COF_02_03_REG		);
wire	w_addr0518_wr = w_wr_en & (i_PADDR == SPA_RC1_X_COF_10_11_REG		);
wire	w_addr0518_rd = w_rd_en & (i_PADDR == SPA_RC1_X_COF_10_11_REG		);
wire	w_addr051c_wr = w_wr_en & (i_PADDR == SPA_RC1_X_COF_12_13_REG		);
wire	w_addr051c_rd = w_rd_en & (i_PADDR == SPA_RC1_X_COF_12_13_REG		);
wire	w_addr0520_wr = w_wr_en & (i_PADDR == SPA_RC1_X_COF_20_21_REG		);
wire	w_addr0520_rd = w_rd_en & (i_PADDR == SPA_RC1_X_COF_20_21_REG		);
wire	w_addr0524_wr = w_wr_en & (i_PADDR == SPA_RC1_X_COF_22_23_REG		);
wire	w_addr0524_rd = w_rd_en & (i_PADDR == SPA_RC1_X_COF_22_23_REG		);
wire	w_addr0528_wr = w_wr_en & (i_PADDR == SPA_RC1_X_COF_30_31_REG		);
wire	w_addr0528_rd = w_rd_en & (i_PADDR == SPA_RC1_X_COF_30_31_REG		);
wire	w_addr052c_wr = w_wr_en & (i_PADDR == SPA_RC1_X_COF_32_33_REG		);
wire	w_addr052c_rd = w_rd_en & (i_PADDR == SPA_RC1_X_COF_32_33_REG		);
wire	w_addr0530_wr = w_wr_en & (i_PADDR == SPA_RC1_Y_COF_00_01_REG		);
wire	w_addr0530_rd = w_rd_en & (i_PADDR == SPA_RC1_Y_COF_00_01_REG		);
wire	w_addr0534_wr = w_wr_en & (i_PADDR == SPA_RC1_Y_COF_02_03_REG		);
wire	w_addr0534_rd = w_rd_en & (i_PADDR == SPA_RC1_Y_COF_02_03_REG		);
wire	w_addr0538_wr = w_wr_en & (i_PADDR == SPA_RC1_Y_COF_10_11_REG		);
wire	w_addr0538_rd = w_rd_en & (i_PADDR == SPA_RC1_Y_COF_10_11_REG		);
wire	w_addr053c_wr = w_wr_en & (i_PADDR == SPA_RC1_Y_COF_12_13_REG		);
wire	w_addr053c_rd = w_rd_en & (i_PADDR == SPA_RC1_Y_COF_12_13_REG		);
wire	w_addr0540_wr = w_wr_en & (i_PADDR == SPA_RC1_Y_COF_20_21_REG		);
wire	w_addr0540_rd = w_rd_en & (i_PADDR == SPA_RC1_Y_COF_20_21_REG		);
wire	w_addr0544_wr = w_wr_en & (i_PADDR == SPA_RC1_Y_COF_22_23_REG		);
wire	w_addr0544_rd = w_rd_en & (i_PADDR == SPA_RC1_Y_COF_22_23_REG		);
wire	w_addr0548_wr = w_wr_en & (i_PADDR == SPA_RC1_Y_COF_30_31_REG		);
wire	w_addr0548_rd = w_rd_en & (i_PADDR == SPA_RC1_Y_COF_30_31_REG		);
wire	w_addr054c_wr = w_wr_en & (i_PADDR == SPA_RC1_Y_COF_32_33_REG		);
wire	w_addr054c_rd = w_rd_en & (i_PADDR == SPA_RC1_Y_COF_32_33_REG		);
wire	w_addr0580_wr = w_wr_en & (i_PADDR == SPA_SEG1_CON_REG		);
wire	w_addr0580_rd = w_rd_en & (i_PADDR == SPA_SEG1_CON_REG		);
wire	w_addr0584_wr = w_wr_en & (i_PADDR == SPA_SEG1_HVLINE_TH_REG		);
wire	w_addr0584_rd = w_rd_en & (i_PADDR == SPA_SEG1_HVLINE_TH_REG		);
wire	w_addr0588_wr = w_wr_en & (i_PADDR == SPA_SEG1_EDGE_TH_REG		);
wire	w_addr0588_rd = w_rd_en & (i_PADDR == SPA_SEG1_EDGE_TH_REG		);
wire	w_addr058c_wr = w_wr_en & (i_PADDR == SPA_SEG1_LINE_TH_REG		);
wire	w_addr058c_rd = w_rd_en & (i_PADDR == SPA_SEG1_LINE_TH_REG		);
wire	w_addr0590_wr = w_wr_en & (i_PADDR == SPA_SEG1_ZC_TH_REG		);
wire	w_addr0590_rd = w_rd_en & (i_PADDR == SPA_SEG1_ZC_TH_REG		);
wire	w_addr05c0_wr = w_wr_en & (i_PADDR == SPA_SCC_CON_REG		);
wire	w_addr05c0_rd = w_rd_en & (i_PADDR == SPA_SCC_CON_REG		);
wire	w_addr0600_wr = w_wr_en & (i_PADDR == SPA_SEG2_CON_REG		);
wire	w_addr0600_rd = w_rd_en & (i_PADDR == SPA_SEG2_CON_REG		);
wire	w_addr0604_wr = w_wr_en & (i_PADDR == SPA_SEG2_PARAM1_REG		);
wire	w_addr0604_rd = w_rd_en & (i_PADDR == SPA_SEG2_PARAM1_REG		);
wire	w_addr0608_wr = w_wr_en & (i_PADDR == SPA_SEG2_PARAM2_REG		);
wire	w_addr0608_rd = w_rd_en & (i_PADDR == SPA_SEG2_PARAM2_REG		);
wire	w_addr060c_wr = w_wr_en & (i_PADDR == SPA_SEG2_FAR_CHROMA_PARAM_REG		);
wire	w_addr060c_rd = w_rd_en & (i_PADDR == SPA_SEG2_FAR_CHROMA_PARAM_REG		);
wire	w_addr0610_wr = w_wr_en & (i_PADDR == SPA_SEG2_FAR_Y_PARAM_REG		);
wire	w_addr0610_rd = w_rd_en & (i_PADDR == SPA_SEG2_FAR_Y_PARAM_REG		);
wire	w_addr0614_wr = w_wr_en & (i_PADDR == SPA_SEG2_NEUT_CHROMA_PARAM_REG		);
wire	w_addr0614_rd = w_rd_en & (i_PADDR == SPA_SEG2_NEUT_CHROMA_PARAM_REG		);
wire	w_addr07c0_wr = w_wr_en & (i_PADDR == SPA_PAGE_EN_REG		);
wire	w_addr07c0_rd = w_rd_en & (i_PADDR == SPA_PAGE_EN_REG		);
wire	w_addr07c4_wr = w_wr_en & (i_PADDR == SPA_BLOCK_SIZE_REG		);
wire	w_addr07c4_rd = w_rd_en & (i_PADDR == SPA_BLOCK_SIZE_REG		);
wire	w_addr07c8_wr = w_wr_en & (i_PADDR == SPA_AREA_SIZE_REG		);
wire	w_addr07c8_rd = w_rd_en & (i_PADDR == SPA_AREA_SIZE_REG		);
wire	w_addr07cc_wr = w_wr_en & (i_PADDR == SPA_CHAR_LENGTH_THICK_V_REG		);
wire	w_addr07cc_rd = w_rd_en & (i_PADDR == SPA_CHAR_LENGTH_THICK_V_REG		);
wire	w_addr07d0_wr = w_wr_en & (i_PADDR == SPA_CHAR_LENGTH_THICK_H_REG		);
wire	w_addr07d0_rd = w_rd_en & (i_PADDR == SPA_CHAR_LENGTH_THICK_H_REG		);
wire	w_addr07d4_wr = w_wr_en & (i_PADDR == SPA_DIFF_CHANGE_V_REG		);
wire	w_addr07d4_rd = w_rd_en & (i_PADDR == SPA_DIFF_CHANGE_V_REG		);
wire	w_addr07d8_wr = w_wr_en & (i_PADDR == SPA_DIFF_CHANGE_H_REG		);
wire	w_addr07d8_rd = w_rd_en & (i_PADDR == SPA_DIFF_CHANGE_H_REG		);
wire	w_addr07dc_wr = w_wr_en & (i_PADDR == SPA_DIR_TH1_REG		);
wire	w_addr07dc_rd = w_rd_en & (i_PADDR == SPA_DIR_TH1_REG		);
wire	w_addr07e0_wr = w_wr_en & (i_PADDR == SPA_DIR_TH2_REG		);
wire	w_addr07e0_rd = w_rd_en & (i_PADDR == SPA_DIR_TH2_REG		);
wire	w_addr07e4_wr = w_wr_en & (i_PADDR == SPA_OUT_AREA_OFFSET1_REG		);
wire	w_addr07e4_rd = w_rd_en & (i_PADDR == SPA_OUT_AREA_OFFSET1_REG		);
wire	w_addr07e8_wr = w_wr_en & (i_PADDR == SPA_OUT_AREA_OFFSET2_REG		);
wire	w_addr07e8_rd = w_rd_en & (i_PADDR == SPA_OUT_AREA_OFFSET2_REG		);
wire	w_addr07ec_wr = w_wr_en & (i_PADDR == SPA_LINE_SPACE_REG		);
wire	w_addr07ec_rd = w_rd_en & (i_PADDR == SPA_LINE_SPACE_REG		);
wire	w_addr07f0_wr = w_wr_en & (i_PADDR == SPA_TEXT_FLAG_REG		);
wire	w_addr07f0_rd = w_rd_en & (i_PADDR == SPA_TEXT_FLAG_REG		);
wire	w_addr07f4_wr = w_wr_en & (i_PADDR == SPA_TEXT_AREA1_W_REG		);
wire	w_addr07f4_rd = w_rd_en & (i_PADDR == SPA_TEXT_AREA1_W_REG		);
wire	w_addr07f8_wr = w_wr_en & (i_PADDR == SPA_TEXT_AREA1_H_REG		);
wire	w_addr07f8_rd = w_rd_en & (i_PADDR == SPA_TEXT_AREA1_H_REG		);
wire	w_addr07fc_wr = w_wr_en & (i_PADDR == SPA_TEXT_AREA2_W_REG		);
wire	w_addr07fc_rd = w_rd_en & (i_PADDR == SPA_TEXT_AREA2_W_REG		);
wire	w_addr0800_wr = w_wr_en & (i_PADDR == SPA_TEXT_AREA2_H_REG		);
wire	w_addr0800_rd = w_rd_en & (i_PADDR == SPA_TEXT_AREA2_H_REG		);
wire	w_addr0804_wr = w_wr_en & (i_PADDR == SPA_TEXT_AREA3_W_REG		);
wire	w_addr0804_rd = w_rd_en & (i_PADDR == SPA_TEXT_AREA3_W_REG		);
wire	w_addr0808_wr = w_wr_en & (i_PADDR == SPA_TEXT_AREA3_H_REG		);
wire	w_addr0808_rd = w_rd_en & (i_PADDR == SPA_TEXT_AREA3_H_REG		);
wire	w_addr0840_wr = w_wr_en & (i_PADDR == SPA_ABS_PRE_SCAN_LINE_REG		);
wire	w_addr0840_rd = w_rd_en & (i_PADDR == SPA_ABS_PRE_SCAN_LINE_REG		);
wire	w_addr0844_wr = w_wr_en & (i_PADDR == SPA_ABS_PRE_SCAN_IWIN_REG		);
wire	w_addr0844_rd = w_rd_en & (i_PADDR == SPA_ABS_PRE_SCAN_IWIN_REG		);
wire	w_addr0848_wr = w_wr_en & (i_PADDR == SPA_ABS_TH_REG		);
wire	w_addr0848_rd = w_rd_en & (i_PADDR == SPA_ABS_TH_REG		);
wire	w_addr084c_wr = w_wr_en & (i_PADDR == SPA_ABS_VALID_PERCENTAGE_REG		);
wire	w_addr084c_rd = w_rd_en & (i_PADDR == SPA_ABS_VALID_PERCENTAGE_REG		);
wire	w_addr0850_wr = w_wr_en & (i_PADDR == SPA_ABS_BK_STD_TH_REG		);
wire	w_addr0850_rd = w_rd_en & (i_PADDR == SPA_ABS_BK_STD_TH_REG		);
wire	w_addr0854_wr = w_wr_en & (i_PADDR == SPA_ABS_SIGMA_REG		);
wire	w_addr0854_rd = w_rd_en & (i_PADDR == SPA_ABS_SIGMA_REG		);
wire	w_addr0858_wr = w_wr_en & (i_PADDR == SPA_ABS_BG_BACKUP_REG		);
wire	w_addr0858_rd = w_rd_en & (i_PADDR == SPA_ABS_BG_BACKUP_REG		);
wire	w_addr085c_wr = w_wr_en & (i_PADDR == SPA_ABS_COLOR_EXCEPTION_REG		);
wire	w_addr085c_rd = w_rd_en & (i_PADDR == SPA_ABS_COLOR_EXCEPTION_REG		);
wire	w_addr0860_wr = w_wr_en & (i_PADDR == SPA_ABS_TOP_BG_LEVEL_REG		);
wire	w_addr0860_rd = w_rd_en & (i_PADDR == SPA_ABS_TOP_BG_LEVEL_REG		);
wire	w_addr0864_wr = w_wr_en & (i_PADDR == SPA_ABS_TOP_PEAK_CONFIDENCE_REG		);
wire	w_addr0864_rd = w_rd_en & (i_PADDR == SPA_ABS_TOP_PEAK_CONFIDENCE_REG		);
wire	w_addr0868_wr = w_wr_en & (i_PADDR == SPA_ABS_PRE_SCAN_START_REG		);
wire	w_addr0868_rd = w_rd_en & (i_PADDR == SPA_ABS_PRE_SCAN_START_REG		);
wire	w_addr0880_wr = w_wr_en & (i_PADDR == SPA_MAD_PRE_SCAN_LINE_REG		);
wire	w_addr0880_rd = w_rd_en & (i_PADDR == SPA_MAD_PRE_SCAN_LINE_REG		);
wire	w_addr0884_wr = w_wr_en & (i_PADDR == SPA_MAD_PRE_SCAN_IWIN_REG		);
wire	w_addr0884_rd = w_rd_en & (i_PADDR == SPA_MAD_PRE_SCAN_IWIN_REG		);
wire	w_addr0888_wr = w_wr_en & (i_PADDR == SPA_MAD_TH_REG		);
wire	w_addr0888_rd = w_rd_en & (i_PADDR == SPA_MAD_TH_REG		);
wire	w_addr088c_wr = w_wr_en & (i_PADDR == SPA_MAD_VALID_PERCENTAGE_REG		);
wire	w_addr088c_rd = w_rd_en & (i_PADDR == SPA_MAD_VALID_PERCENTAGE_REG		);
wire	w_addr0890_wr = w_wr_en & (i_PADDR == SPA_MAD_BK_STD_TH_REG		);
wire	w_addr0890_rd = w_rd_en & (i_PADDR == SPA_MAD_BK_STD_TH_REG		);
wire	w_addr0894_wr = w_wr_en & (i_PADDR == SPA_MAD_SIGMA_REG		);
wire	w_addr0894_rd = w_rd_en & (i_PADDR == SPA_MAD_SIGMA_REG		);
wire	w_addr0898_wr = w_wr_en & (i_PADDR == SPA_MAD_BG_BACKUP_REG		);
wire	w_addr0898_rd = w_rd_en & (i_PADDR == SPA_MAD_BG_BACKUP_REG		);
wire	w_addr089c_wr = w_wr_en & (i_PADDR == SPA_MAD_COLOR_EXCEPTION_REG		);
wire	w_addr089c_rd = w_rd_en & (i_PADDR == SPA_MAD_COLOR_EXCEPTION_REG		);
wire	w_addr08a0_wr = w_wr_en & (i_PADDR == SPA_MAD_TOP_BG_LEVEL_REG		);
wire	w_addr08a0_rd = w_rd_en & (i_PADDR == SPA_MAD_TOP_BG_LEVEL_REG		);
wire	w_addr08a4_wr = w_wr_en & (i_PADDR == SPA_MAD_TOP_PEAK_CONFIDENCE_REG		);
wire	w_addr08a4_rd = w_rd_en & (i_PADDR == SPA_MAD_TOP_PEAK_CONFIDENCE_REG		);
wire	w_addr08a8_wr = w_wr_en & (i_PADDR == SPA_MAD_PRE_SCAN_START_REG		);
wire	w_addr08a8_rd = w_rd_en & (i_PADDR == SPA_MAD_PRE_SCAN_START_REG		);
wire	w_addr08c0_wr = w_wr_en & (i_PADDR == SPA_NEWABSD_SCAN_RANGE_REG		);
wire	w_addr08c0_rd = w_rd_en & (i_PADDR == SPA_NEWABSD_SCAN_RANGE_REG		);
wire	w_addr08c4_wr = w_wr_en & (i_PADDR == SPA_NEWABSD_PRE_SCAN_IWIN_REG		);
wire	w_addr08c4_rd = w_rd_en & (i_PADDR == SPA_NEWABSD_PRE_SCAN_IWIN_REG		);
wire	w_addr08c8_wr = w_wr_en & (i_PADDR == SPA_NEWABSD_CHOMA_TH_REG		);
wire	w_addr08c8_rd = w_rd_en & (i_PADDR == SPA_NEWABSD_CHOMA_TH_REG		);
wire	w_addr08cc_wr = w_wr_en & (i_PADDR == SPA_NEWABSD_LIMIT_REG		);
wire	w_addr08cc_rd = w_rd_en & (i_PADDR == SPA_NEWABSD_LIMIT_REG		);
wire	w_addr08d0_wr = w_wr_en & (i_PADDR == SPA_NEWABSD_HISTO_PEAK_REG		);
wire	w_addr08d0_rd = w_rd_en & (i_PADDR == SPA_NEWABSD_HISTO_PEAK_REG		);
wire	w_addr08d4_wr = w_wr_en & (i_PADDR == SPA_NEWABSD_HISTO_LEFT_REG		);
wire	w_addr08d4_rd = w_rd_en & (i_PADDR == SPA_NEWABSD_HISTO_LEFT_REG		);
wire	w_addr08d8_wr = w_wr_en & (i_PADDR == SPA_NEWABSD_HISTO_RIGHT_REG		);
wire	w_addr08d8_rd = w_rd_en & (i_PADDR == SPA_NEWABSD_HISTO_RIGHT_REG		);
wire	w_addr08dc_wr = w_wr_en & (i_PADDR == SPA_NEWABSD_RESULT_REG		);
wire	w_addr08dc_rd = w_rd_en & (i_PADDR == SPA_NEWABSD_RESULT_REG		);
wire	w_addr0900_wr = w_wr_en & (i_PADDR == SPA_CLA_CON1_REG		);
wire	w_addr0900_rd = w_rd_en & (i_PADDR == SPA_CLA_CON1_REG		);
wire	w_addr0904_wr = w_wr_en & (i_PADDR == SPA_CLA_CON2_REG		);
wire	w_addr0904_rd = w_rd_en & (i_PADDR == SPA_CLA_CON2_REG		);
wire	w_addr0908_wr = w_wr_en & (i_PADDR == SPA_TOTAL_BIN_CNT_REG		);
wire	w_addr0908_rd = w_rd_en & (i_PADDR == SPA_TOTAL_BIN_CNT_REG		);
wire	w_addr090c_wr = w_wr_en & (i_PADDR == SPA_HL_RANGE2_REG		);
wire	w_addr090c_rd = w_rd_en & (i_PADDR == SPA_HL_RANGE2_REG		);
wire	w_addr0910_wr = w_wr_en & (i_PADDR == SPA_HL_COLOR2_REG		);
wire	w_addr0910_rd = w_rd_en & (i_PADDR == SPA_HL_COLOR2_REG		);
wire	w_addr0914_wr = w_wr_en & (i_PADDR == SPA_BTEXT_CNT_REG		);
wire	w_addr0914_rd = w_rd_en & (i_PADDR == SPA_BTEXT_CNT_REG		);
wire	w_addr0918_wr = w_wr_en & (i_PADDR == SPA_TEXT_CNT_REG		);
wire	w_addr0918_rd = w_rd_en & (i_PADDR == SPA_TEXT_CNT_REG		);
wire	w_addr091c_wr = w_wr_en & (i_PADDR == SPA_HT_CNT_REG		);
wire	w_addr091c_rd = w_rd_en & (i_PADDR == SPA_HT_CNT_REG		);
wire	w_addr0920_wr = w_wr_en & (i_PADDR == SPA_EDGE_CNT_REG		);
wire	w_addr0920_rd = w_rd_en & (i_PADDR == SPA_EDGE_CNT_REG		);
wire	w_addr0924_wr = w_wr_en & (i_PADDR == SPA_WHITE_CNT_REG		);
wire	w_addr0924_rd = w_rd_en & (i_PADDR == SPA_WHITE_CNT_REG		);
wire	w_addr0928_wr = w_wr_en & (i_PADDR == SPA_CONTONE_CNT_REG		);
wire	w_addr0928_rd = w_rd_en & (i_PADDR == SPA_CONTONE_CNT_REG		);
wire	w_addr092c_wr = w_wr_en & (i_PADDR == SPA_WHITE_WO_TEXT_CNT_REG		);
wire	w_addr092c_rd = w_rd_en & (i_PADDR == SPA_WHITE_WO_TEXT_CNT_REG		);
wire	w_addr0930_wr = w_wr_en & (i_PADDR == SPA_WHITE_WO_HT_TEXT_CNT_REG		);
wire	w_addr0930_rd = w_rd_en & (i_PADDR == SPA_WHITE_WO_HT_TEXT_CNT_REG		);
wire	w_addr0934_wr = w_wr_en & (i_PADDR == SPA_CONTENT_SIZE_REG		);
wire	w_addr0934_rd = w_rd_en & (i_PADDR == SPA_CONTENT_SIZE_REG		);
wire	w_addr0980_wr = w_wr_en & (i_PADDR == SPA_MARGIN1_REG		);
wire	w_addr0980_rd = w_rd_en & (i_PADDR == SPA_MARGIN1_REG		);
wire	w_addr0984_wr = w_wr_en & (i_PADDR == SPA_MARGIN2_REG		);
wire	w_addr0984_rd = w_rd_en & (i_PADDR == SPA_MARGIN2_REG		);
wire	w_addr0988_wr = w_wr_en & (i_PADDR == SPA_TH1_REG		);
wire	w_addr0988_rd = w_rd_en & (i_PADDR == SPA_TH1_REG		);
wire	w_addr098c_wr = w_wr_en & (i_PADDR == SPA_TH2_REG		);
wire	w_addr098c_rd = w_rd_en & (i_PADDR == SPA_TH2_REG		);
wire	w_addr0990_wr = w_wr_en & (i_PADDR == SPA_HLIGHT_SEL_EN_REG		);
wire	w_addr0990_rd = w_rd_en & (i_PADDR == SPA_HLIGHT_SEL_EN_REG		);
wire	w_addr0994_wr = w_wr_en & (i_PADDR == SPA_AVG_TH_REG		);
wire	w_addr0994_rd = w_rd_en & (i_PADDR == SPA_AVG_TH_REG		);
wire	w_addr0998_wr = w_wr_en & (i_PADDR == SPA_HISTO_WIN_VAL_REG		);
wire	w_addr0998_rd = w_rd_en & (i_PADDR == SPA_HISTO_WIN_VAL_REG		);
wire	w_addr099c_wr = w_wr_en & (i_PADDR == SPA_RATIO_TH_REG		);
wire	w_addr099c_rd = w_rd_en & (i_PADDR == SPA_RATIO_TH_REG		);
wire	w_addr09a0_wr = w_wr_en & (i_PADDR == SPA_LIMIT_TH_REG		);
wire	w_addr09a0_rd = w_rd_en & (i_PADDR == SPA_LIMIT_TH_REG		);
wire	w_addr09a4_wr = w_wr_en & (i_PADDR == SPA_BRIGHT_STRETCH_OFFSET_REG		);
wire	w_addr09a4_rd = w_rd_en & (i_PADDR == SPA_BRIGHT_STRETCH_OFFSET_REG		);
wire	w_addr09a8_wr = w_wr_en & (i_PADDR == SPA_ACB_TH1_REG		);
wire	w_addr09a8_rd = w_rd_en & (i_PADDR == SPA_ACB_TH1_REG		);
wire	w_addr09ac_wr = w_wr_en & (i_PADDR == SPA_ACB_TH2_REG		);
wire	w_addr09ac_rd = w_rd_en & (i_PADDR == SPA_ACB_TH2_REG		);
wire	w_addr09b0_wr = w_wr_en & (i_PADDR == SPA_OBJECT_TH_REG		);
wire	w_addr09b0_rd = w_rd_en & (i_PADDR == SPA_OBJECT_TH_REG		);
wire	w_addr09b4_wr = w_wr_en & (i_PADDR == SPA_ACBD_RESULT1_REG		);
wire	w_addr09b4_rd = w_rd_en & (i_PADDR == SPA_ACBD_RESULT1_REG		);
wire	w_addr09b8_wr = w_wr_en & (i_PADDR == SPA_ACBD_RESULT2_REG		);
wire	w_addr09b8_rd = w_rd_en & (i_PADDR == SPA_ACBD_RESULT2_REG		);
wire	w_addr09bc_wr = w_wr_en & (i_PADDR == SPA_ACBD_ACSREFON_REG		);
wire	w_addr09bc_rd = w_rd_en & (i_PADDR == SPA_ACBD_ACSREFON_REG		);
wire	w_addr09c0_wr = w_wr_en & (i_PADDR == SPA_ACS_CON_REG		);
wire	w_addr09c0_rd = w_rd_en & (i_PADDR == SPA_ACS_CON_REG		);
wire	w_addr09c4_wr = w_wr_en & (i_PADDR == SPA_ACS_MARK_POS_UPPER_REG		);
wire	w_addr09c4_rd = w_rd_en & (i_PADDR == SPA_ACS_MARK_POS_UPPER_REG		);
wire	w_addr09c8_wr = w_wr_en & (i_PADDR == SPA_ACS_MARK_POS_LOWER_REG		);
wire	w_addr09c8_rd = w_rd_en & (i_PADDR == SPA_ACS_MARK_POS_LOWER_REG		);
wire	w_addr09cc_wr = w_wr_en & (i_PADDR == SPA_ACS_MARK_POS_LEFT_REG		);
wire	w_addr09cc_rd = w_rd_en & (i_PADDR == SPA_ACS_MARK_POS_LEFT_REG		);
wire	w_addr09d0_wr = w_wr_en & (i_PADDR == SPA_ACS_MARK_POS_RIGHT_REG		);
wire	w_addr09d0_rd = w_rd_en & (i_PADDR == SPA_ACS_MARK_POS_RIGHT_REG		);
wire	w_addr09d4_wr = w_wr_en & (i_PADDR == SPA_ACS_SATURATION_TH_REG		);
wire	w_addr09d4_rd = w_rd_en & (i_PADDR == SPA_ACS_SATURATION_TH_REG		);
wire	w_addr09d8_wr = w_wr_en & (i_PADDR == SPA_ACS_HT_TH_REG		);
wire	w_addr09d8_rd = w_rd_en & (i_PADDR == SPA_ACS_HT_TH_REG		);
wire	w_addr09dc_wr = w_wr_en & (i_PADDR == SPA_ACS_CBMAX1_REG		);
wire	w_addr09dc_rd = w_rd_en & (i_PADDR == SPA_ACS_CBMAX1_REG		);
wire	w_addr09e0_wr = w_wr_en & (i_PADDR == SPA_ACS_CBMAX2_REG		);
wire	w_addr09e0_rd = w_rd_en & (i_PADDR == SPA_ACS_CBMAX2_REG		);
wire	w_addr09e4_wr = w_wr_en & (i_PADDR == SPA_ACS_CBMAX3_REG		);
wire	w_addr09e4_rd = w_rd_en & (i_PADDR == SPA_ACS_CBMAX3_REG		);
wire	w_addr09e8_wr = w_wr_en & (i_PADDR == SPA_ACS_CBMAX4_REG		);
wire	w_addr09e8_rd = w_rd_en & (i_PADDR == SPA_ACS_CBMAX4_REG		);
wire	w_addr09ec_wr = w_wr_en & (i_PADDR == SPA_ACS_CBMIN1_REG		);
wire	w_addr09ec_rd = w_rd_en & (i_PADDR == SPA_ACS_CBMIN1_REG		);
wire	w_addr09f0_wr = w_wr_en & (i_PADDR == SPA_ACS_CBMIN2_REG		);
wire	w_addr09f0_rd = w_rd_en & (i_PADDR == SPA_ACS_CBMIN2_REG		);
wire	w_addr09f4_wr = w_wr_en & (i_PADDR == SPA_ACS_CBMIN3_REG		);
wire	w_addr09f4_rd = w_rd_en & (i_PADDR == SPA_ACS_CBMIN3_REG		);
wire	w_addr09f8_wr = w_wr_en & (i_PADDR == SPA_ACS_CBMIN4_REG		);
wire	w_addr09f8_rd = w_rd_en & (i_PADDR == SPA_ACS_CBMIN4_REG		);
wire	w_addr09fc_wr = w_wr_en & (i_PADDR == SPA_ACS_CRMAX1_REG		);
wire	w_addr09fc_rd = w_rd_en & (i_PADDR == SPA_ACS_CRMAX1_REG		);
wire	w_addr0a00_wr = w_wr_en & (i_PADDR == SPA_ACS_CRMAX2_REG		);
wire	w_addr0a00_rd = w_rd_en & (i_PADDR == SPA_ACS_CRMAX2_REG		);
wire	w_addr0a04_wr = w_wr_en & (i_PADDR == SPA_ACS_CRMAX3_REG		);
wire	w_addr0a04_rd = w_rd_en & (i_PADDR == SPA_ACS_CRMAX3_REG		);
wire	w_addr0a08_wr = w_wr_en & (i_PADDR == SPA_ACS_CRMAX4_REG		);
wire	w_addr0a08_rd = w_rd_en & (i_PADDR == SPA_ACS_CRMAX4_REG		);
wire	w_addr0a0c_wr = w_wr_en & (i_PADDR == SPA_ACS_CRMIN1_REG		);
wire	w_addr0a0c_rd = w_rd_en & (i_PADDR == SPA_ACS_CRMIN1_REG		);
wire	w_addr0a10_wr = w_wr_en & (i_PADDR == SPA_ACS_CRMIN2_REG		);
wire	w_addr0a10_rd = w_rd_en & (i_PADDR == SPA_ACS_CRMIN2_REG		);
wire	w_addr0a14_wr = w_wr_en & (i_PADDR == SPA_ACS_CRMIN3_REG		);
wire	w_addr0a14_rd = w_rd_en & (i_PADDR == SPA_ACS_CRMIN3_REG		);
wire	w_addr0a18_wr = w_wr_en & (i_PADDR == SPA_ACS_CRMIN4_REG		);
wire	w_addr0a18_rd = w_rd_en & (i_PADDR == SPA_ACS_CRMIN4_REG		);
wire	w_addr0a1c_wr = w_wr_en & (i_PADDR == SPA_ACS_CBMAXH1_REG		);
wire	w_addr0a1c_rd = w_rd_en & (i_PADDR == SPA_ACS_CBMAXH1_REG		);
wire	w_addr0a20_wr = w_wr_en & (i_PADDR == SPA_ACS_CBMAXH2_REG		);
wire	w_addr0a20_rd = w_rd_en & (i_PADDR == SPA_ACS_CBMAXH2_REG		);
wire	w_addr0a24_wr = w_wr_en & (i_PADDR == SPA_ACS_CBMAXH3_REG		);
wire	w_addr0a24_rd = w_rd_en & (i_PADDR == SPA_ACS_CBMAXH3_REG		);
wire	w_addr0a28_wr = w_wr_en & (i_PADDR == SPA_ACS_CBMAXH4_REG		);
wire	w_addr0a28_rd = w_rd_en & (i_PADDR == SPA_ACS_CBMAXH4_REG		);
wire	w_addr0a2c_wr = w_wr_en & (i_PADDR == SPA_ACS_CBMINH1_REG		);
wire	w_addr0a2c_rd = w_rd_en & (i_PADDR == SPA_ACS_CBMINH1_REG		);
wire	w_addr0a30_wr = w_wr_en & (i_PADDR == SPA_ACS_CBMINH2_REG		);
wire	w_addr0a30_rd = w_rd_en & (i_PADDR == SPA_ACS_CBMINH2_REG		);
wire	w_addr0a34_wr = w_wr_en & (i_PADDR == SPA_ACS_CBMINH3_REG		);
wire	w_addr0a34_rd = w_rd_en & (i_PADDR == SPA_ACS_CBMINH3_REG		);
wire	w_addr0a38_wr = w_wr_en & (i_PADDR == SPA_ACS_CBMINH4_REG		);
wire	w_addr0a38_rd = w_rd_en & (i_PADDR == SPA_ACS_CBMINH4_REG		);
wire	w_addr0a3c_wr = w_wr_en & (i_PADDR == SPA_ACS_CRMAXH1_REG		);
wire	w_addr0a3c_rd = w_rd_en & (i_PADDR == SPA_ACS_CRMAXH1_REG		);
wire	w_addr0a40_wr = w_wr_en & (i_PADDR == SPA_ACS_CRMAXH2_REG		);
wire	w_addr0a40_rd = w_rd_en & (i_PADDR == SPA_ACS_CRMAXH2_REG		);
wire	w_addr0a44_wr = w_wr_en & (i_PADDR == SPA_ACS_CRMAXH3_REG		);
wire	w_addr0a44_rd = w_rd_en & (i_PADDR == SPA_ACS_CRMAXH3_REG		);
wire	w_addr0a48_wr = w_wr_en & (i_PADDR == SPA_ACS_CRMAXH4_REG		);
wire	w_addr0a48_rd = w_rd_en & (i_PADDR == SPA_ACS_CRMAXH4_REG		);
wire	w_addr0a4c_wr = w_wr_en & (i_PADDR == SPA_ACS_CRMINH1_REG		);
wire	w_addr0a4c_rd = w_rd_en & (i_PADDR == SPA_ACS_CRMINH1_REG		);
wire	w_addr0a50_wr = w_wr_en & (i_PADDR == SPA_ACS_CRMINH2_REG		);
wire	w_addr0a50_rd = w_rd_en & (i_PADDR == SPA_ACS_CRMINH2_REG		);
wire	w_addr0a54_wr = w_wr_en & (i_PADDR == SPA_ACS_CRMINH3_REG		);
wire	w_addr0a54_rd = w_rd_en & (i_PADDR == SPA_ACS_CRMINH3_REG		);
wire	w_addr0a58_wr = w_wr_en & (i_PADDR == SPA_ACS_CRMINH4_REG		);
wire	w_addr0a58_rd = w_rd_en & (i_PADDR == SPA_ACS_CRMINH4_REG		);
wire	w_addr0a5c_wr = w_wr_en & (i_PADDR == SPA_ACS_VALUE_TH_REG		);
wire	w_addr0a5c_rd = w_rd_en & (i_PADDR == SPA_ACS_VALUE_TH_REG		);
wire	w_addr0a60_wr = w_wr_en & (i_PADDR == SPA_ACS_TBLK_PAGE_REG		);
wire	w_addr0a60_rd = w_rd_en & (i_PADDR == SPA_ACS_TBLK_PAGE_REG		);
wire	w_addr0a64_wr = w_wr_en & (i_PADDR == SPA_ACS_TBLK_NPAGE_REG		);
wire	w_addr0a64_rd = w_rd_en & (i_PADDR == SPA_ACS_TBLK_NPAGE_REG		);
wire	w_addr0a68_wr = w_wr_en & (i_PADDR == SPA_ACS_CBLK_REG		);
wire	w_addr0a68_rd = w_rd_en & (i_PADDR == SPA_ACS_CBLK_REG		);
wire	w_addr0a6c_wr = w_wr_en & (i_PADDR == SPA_ACS_SBLK_PAGE_REG		);
wire	w_addr0a6c_rd = w_rd_en & (i_PADDR == SPA_ACS_SBLK_PAGE_REG		);
wire	w_addr0a70_wr = w_wr_en & (i_PADDR == SPA_ACS_SPXL_BLK_PAGE_REG		);
wire	w_addr0a70_rd = w_rd_en & (i_PADDR == SPA_ACS_SPXL_BLK_PAGE_REG		);
wire	w_addr0a74_wr = w_wr_en & (i_PADDR == SPA_ACS_SPXL_PAGE_REG		);
wire	w_addr0a74_rd = w_rd_en & (i_PADDR == SPA_ACS_SPXL_PAGE_REG		);
wire	w_addr0a78_wr = w_wr_en & (i_PADDR == SPA_ACS_TEXT_PAGE_REG		);
wire	w_addr0a78_rd = w_rd_en & (i_PADDR == SPA_ACS_TEXT_PAGE_REG		);
wire	w_addr0a7c_wr = w_wr_en & (i_PADDR == SPA_ACS_HT_PAGE_REG		);
wire	w_addr0a7c_rd = w_rd_en & (i_PADDR == SPA_ACS_HT_PAGE_REG		);
wire	w_addr0a80_wr = w_wr_en & (i_PADDR == SPA_ACS_EDGE_PAGE_REG		);
wire	w_addr0a80_rd = w_rd_en & (i_PADDR == SPA_ACS_EDGE_PAGE_REG		);
wire	w_addr0a88_wr = w_wr_en & (i_PADDR == SPA_AVG_HT_ACS00_REG		);
wire	w_addr0a88_rd = w_rd_en & (i_PADDR == SPA_AVG_HT_ACS00_REG		);
wire	w_addr0a8c_wr = w_wr_en & (i_PADDR == SPA_AVG_HT_ACS01_REG		);
wire	w_addr0a8c_rd = w_rd_en & (i_PADDR == SPA_AVG_HT_ACS01_REG		);
wire	w_addr0a90_wr = w_wr_en & (i_PADDR == SPA_AVG_HT_ACS02_REG		);
wire	w_addr0a90_rd = w_rd_en & (i_PADDR == SPA_AVG_HT_ACS02_REG		);
wire	w_addr0a94_wr = w_wr_en & (i_PADDR == SPA_AVG_HT_ACS03_REG		);
wire	w_addr0a94_rd = w_rd_en & (i_PADDR == SPA_AVG_HT_ACS03_REG		);
wire	w_addr0a98_wr = w_wr_en & (i_PADDR == SPA_AVG_HT_ACS04_REG		);
wire	w_addr0a98_rd = w_rd_en & (i_PADDR == SPA_AVG_HT_ACS04_REG		);
wire	w_addr0a9c_wr = w_wr_en & (i_PADDR == SPA_AVG_HT_ACS05_REG		);
wire	w_addr0a9c_rd = w_rd_en & (i_PADDR == SPA_AVG_HT_ACS05_REG		);
wire	w_addr0aa0_wr = w_wr_en & (i_PADDR == SPA_AVG_HT_ACS06_REG		);
wire	w_addr0aa0_rd = w_rd_en & (i_PADDR == SPA_AVG_HT_ACS06_REG		);
wire	w_addr0aa4_wr = w_wr_en & (i_PADDR == SPA_AVG_HT_ACS07_REG		);
wire	w_addr0aa4_rd = w_rd_en & (i_PADDR == SPA_AVG_HT_ACS07_REG		);
wire	w_addr0aa8_wr = w_wr_en & (i_PADDR == SPA_AVG_HT_ACS08_REG		);
wire	w_addr0aa8_rd = w_rd_en & (i_PADDR == SPA_AVG_HT_ACS08_REG		);
wire	w_addr0aac_wr = w_wr_en & (i_PADDR == SPA_AVG_HT_ACS09_REG		);
wire	w_addr0aac_rd = w_rd_en & (i_PADDR == SPA_AVG_HT_ACS09_REG		);
wire	w_addr0ab0_wr = w_wr_en & (i_PADDR == SPA_AVG_HT_ACS10_REG		);
wire	w_addr0ab0_rd = w_rd_en & (i_PADDR == SPA_AVG_HT_ACS10_REG		);
wire	w_addr0ab4_wr = w_wr_en & (i_PADDR == SPA_AVG_HT_ACS11_REG		);
wire	w_addr0ab4_rd = w_rd_en & (i_PADDR == SPA_AVG_HT_ACS11_REG		);
wire	w_addr0ab8_wr = w_wr_en & (i_PADDR == SPA_AVG_HT_ACS12_REG		);
wire	w_addr0ab8_rd = w_rd_en & (i_PADDR == SPA_AVG_HT_ACS12_REG		);
wire	w_addr0abc_wr = w_wr_en & (i_PADDR == SPA_AVG_HT_ACS13_REG		);
wire	w_addr0abc_rd = w_rd_en & (i_PADDR == SPA_AVG_HT_ACS13_REG		);
wire	w_addr0ac0_wr = w_wr_en & (i_PADDR == SPA_AVG_HT_ACS14_REG		);
wire	w_addr0ac0_rd = w_rd_en & (i_PADDR == SPA_AVG_HT_ACS14_REG		);
wire	w_addr0ac4_wr = w_wr_en & (i_PADDR == SPA_AVG_HT_ACS15_REG		);
wire	w_addr0ac4_rd = w_rd_en & (i_PADDR == SPA_AVG_HT_ACS15_REG		);
wire	w_addr0ac8_wr = w_wr_en & (i_PADDR == SPA_AVG_NHT_ACS00_REG		);
wire	w_addr0ac8_rd = w_rd_en & (i_PADDR == SPA_AVG_NHT_ACS00_REG		);
wire	w_addr0acc_wr = w_wr_en & (i_PADDR == SPA_AVG_NHT_ACS01_REG		);
wire	w_addr0acc_rd = w_rd_en & (i_PADDR == SPA_AVG_NHT_ACS01_REG		);
wire	w_addr0ad0_wr = w_wr_en & (i_PADDR == SPA_AVG_NHT_ACS02_REG		);
wire	w_addr0ad0_rd = w_rd_en & (i_PADDR == SPA_AVG_NHT_ACS02_REG		);
wire	w_addr0ad4_wr = w_wr_en & (i_PADDR == SPA_AVG_NHT_ACS03_REG		);
wire	w_addr0ad4_rd = w_rd_en & (i_PADDR == SPA_AVG_NHT_ACS03_REG		);
wire	w_addr0ad8_wr = w_wr_en & (i_PADDR == SPA_AVG_NHT_ACS04_REG		);
wire	w_addr0ad8_rd = w_rd_en & (i_PADDR == SPA_AVG_NHT_ACS04_REG		);
wire	w_addr0adc_wr = w_wr_en & (i_PADDR == SPA_AVG_NHT_ACS05_REG		);
wire	w_addr0adc_rd = w_rd_en & (i_PADDR == SPA_AVG_NHT_ACS05_REG		);
wire	w_addr0ae0_wr = w_wr_en & (i_PADDR == SPA_AVG_NHT_ACS06_REG		);
wire	w_addr0ae0_rd = w_rd_en & (i_PADDR == SPA_AVG_NHT_ACS06_REG		);
wire	w_addr0ae4_wr = w_wr_en & (i_PADDR == SPA_AVG_NHT_ACS07_REG		);
wire	w_addr0ae4_rd = w_rd_en & (i_PADDR == SPA_AVG_NHT_ACS07_REG		);
wire	w_addr0ae8_wr = w_wr_en & (i_PADDR == SPA_AVG_NHT_ACS08_REG		);
wire	w_addr0ae8_rd = w_rd_en & (i_PADDR == SPA_AVG_NHT_ACS08_REG		);
wire	w_addr0aec_wr = w_wr_en & (i_PADDR == SPA_AVG_NHT_ACS09_REG		);
wire	w_addr0aec_rd = w_rd_en & (i_PADDR == SPA_AVG_NHT_ACS09_REG		);
wire	w_addr0af0_wr = w_wr_en & (i_PADDR == SPA_AVG_NHT_ACS10_REG		);
wire	w_addr0af0_rd = w_rd_en & (i_PADDR == SPA_AVG_NHT_ACS10_REG		);
wire	w_addr0af4_wr = w_wr_en & (i_PADDR == SPA_AVG_NHT_ACS11_REG		);
wire	w_addr0af4_rd = w_rd_en & (i_PADDR == SPA_AVG_NHT_ACS11_REG		);
wire	w_addr0af8_wr = w_wr_en & (i_PADDR == SPA_AVG_NHT_ACS12_REG		);
wire	w_addr0af8_rd = w_rd_en & (i_PADDR == SPA_AVG_NHT_ACS12_REG		);
wire	w_addr0afc_wr = w_wr_en & (i_PADDR == SPA_AVG_NHT_ACS13_REG		);
wire	w_addr0afc_rd = w_rd_en & (i_PADDR == SPA_AVG_NHT_ACS13_REG		);
wire	w_addr0b00_wr = w_wr_en & (i_PADDR == SPA_AVG_NHT_ACS14_REG		);
wire	w_addr0b00_rd = w_rd_en & (i_PADDR == SPA_AVG_NHT_ACS14_REG		);
wire	w_addr0b04_wr = w_wr_en & (i_PADDR == SPA_AVG_NHT_ACS15_REG		);
wire	w_addr0b04_rd = w_rd_en & (i_PADDR == SPA_AVG_NHT_ACS15_REG		);
wire	w_addr0b08_wr = w_wr_en & (i_PADDR == SPA_ACS_SATURATION_TH2_REG		);
wire	w_addr0b08_rd = w_rd_en & (i_PADDR == SPA_ACS_SATURATION_TH2_REG		);
wire	w_addr0b0c_wr = w_wr_en & (i_PADDR == SPA_ACS_VALID_RANGE_H_REG		);
wire	w_addr0b0c_rd = w_rd_en & (i_PADDR == SPA_ACS_VALID_RANGE_H_REG		);
wire	w_addr0b10_wr = w_wr_en & (i_PADDR == SPA_ACS_VALID_RANGE_W_REG		);
wire	w_addr0b10_rd = w_rd_en & (i_PADDR == SPA_ACS_VALID_RANGE_W_REG		);
wire	w_addr0b14_wr = w_wr_en & (i_PADDR == SPA_ACS_V2_CON_REG		);
wire	w_addr0b14_rd = w_rd_en & (i_PADDR == SPA_ACS_V2_CON_REG		);
wire	w_addr0b18_wr = w_wr_en & (i_PADDR == SPA_ACS_V2_SATURATION_TH_REG		);
wire	w_addr0b18_rd = w_rd_en & (i_PADDR == SPA_ACS_V2_SATURATION_TH_REG		);
wire	w_addr0b1c_wr = w_wr_en & (i_PADDR == SPA_ACS_V2_SATURATION_TH2_REG		);
wire	w_addr0b1c_rd = w_rd_en & (i_PADDR == SPA_ACS_V2_SATURATION_TH2_REG		);
wire	w_addr0b20_wr = w_wr_en & (i_PADDR == SPA_ACS_V2_HT_TH_REG		);
wire	w_addr0b20_rd = w_rd_en & (i_PADDR == SPA_ACS_V2_HT_TH_REG		);
wire	w_addr0b24_wr = w_wr_en & (i_PADDR == SPA_ACS_V2_VALUE_TH_REG		);
wire	w_addr0b24_rd = w_rd_en & (i_PADDR == SPA_ACS_V2_VALUE_TH_REG		);
wire	w_addr0b28_wr = w_wr_en & (i_PADDR == SPA_ACS_V2_TBLK_PAGE_REG		);
wire	w_addr0b28_rd = w_rd_en & (i_PADDR == SPA_ACS_V2_TBLK_PAGE_REG		);
wire	w_addr0b2c_wr = w_wr_en & (i_PADDR == SPA_ACS_V2_TBLK_NPAGE_REG		);
wire	w_addr0b2c_rd = w_rd_en & (i_PADDR == SPA_ACS_V2_TBLK_NPAGE_REG		);
wire	w_addr0b30_wr = w_wr_en & (i_PADDR == SPA_ACS_V2_CBLK_REG		);
wire	w_addr0b30_rd = w_rd_en & (i_PADDR == SPA_ACS_V2_CBLK_REG		);
wire	w_addr0b34_wr = w_wr_en & (i_PADDR == SPA_ACS_V2_SBLK_PAGE_REG		);
wire	w_addr0b34_rd = w_rd_en & (i_PADDR == SPA_ACS_V2_SBLK_PAGE_REG		);
wire	w_addr0b38_wr = w_wr_en & (i_PADDR == SPA_ACS_V2_SPXL_BLK_PAGE_REG		);
wire	w_addr0b38_rd = w_rd_en & (i_PADDR == SPA_ACS_V2_SPXL_BLK_PAGE_REG		);
wire	w_addr0b3c_wr = w_wr_en & (i_PADDR == SPA_ACS_V2_SPXL_PAGE_REG		);
wire	w_addr0b3c_rd = w_rd_en & (i_PADDR == SPA_ACS_V2_SPXL_PAGE_REG		);
wire	w_addr0b40_wr = w_wr_en & (i_PADDR == SPA_BLANK_CON0_REG		);
wire	w_addr0b40_rd = w_rd_en & (i_PADDR == SPA_BLANK_CON0_REG		);
wire	w_addr0b44_wr = w_wr_en & (i_PADDR == SPA_BLANK_CON1_REG		);
wire	w_addr0b44_rd = w_rd_en & (i_PADDR == SPA_BLANK_CON1_REG		);
wire	w_addr0b48_wr = w_wr_en & (i_PADDR == SPA_BLANK_MARK_POS_UPPER_REG		);
wire	w_addr0b48_rd = w_rd_en & (i_PADDR == SPA_BLANK_MARK_POS_UPPER_REG		);
wire	w_addr0b4c_wr = w_wr_en & (i_PADDR == SPA_BLANK_MARK_POS_LOWER_REG		);
wire	w_addr0b4c_rd = w_rd_en & (i_PADDR == SPA_BLANK_MARK_POS_LOWER_REG		);
wire	w_addr0b50_wr = w_wr_en & (i_PADDR == SPA_BLANK_MARK_POS_LEFT_REG		);
wire	w_addr0b50_rd = w_rd_en & (i_PADDR == SPA_BLANK_MARK_POS_LEFT_REG		);
wire	w_addr0b54_wr = w_wr_en & (i_PADDR == SPA_BLANK_MARK_POS_RIGHT_REG		);
wire	w_addr0b54_rd = w_rd_en & (i_PADDR == SPA_BLANK_MARK_POS_RIGHT_REG		);
wire	w_addr0b58_wr = w_wr_en & (i_PADDR == SPA_BLANK_COLOR_BLK_REG		);
wire	w_addr0b58_rd = w_rd_en & (i_PADDR == SPA_BLANK_COLOR_BLK_REG		);
wire	w_addr0b5c_wr = w_wr_en & (i_PADDR == SPA_BLANK_TOTALBLK_REG		);
wire	w_addr0b5c_rd = w_rd_en & (i_PADDR == SPA_BLANK_TOTALBLK_REG		);
wire	w_addr0b60_wr = w_wr_en & (i_PADDR == SPA_BLANK_CONTBLK_REG		);
wire	w_addr0b60_rd = w_rd_en & (i_PADDR == SPA_BLANK_CONTBLK_REG		);
wire	w_addr0b64_wr = w_wr_en & (i_PADDR == SPA_BLANK_BLANKBLK_REG		);
wire	w_addr0b64_rd = w_rd_en & (i_PADDR == SPA_BLANK_BLANKBLK_REG		);
wire	w_addr0b68_wr = w_wr_en & (i_PADDR == SPA_BLANK_DARKBLK_REG		);
wire	w_addr0b68_rd = w_rd_en & (i_PADDR == SPA_BLANK_DARKBLK_REG		);
wire	w_addr0b6c_wr = w_wr_en & (i_PADDR == SPA_BLANK_COLORBLK_REG		);
wire	w_addr0b6c_rd = w_rd_en & (i_PADDR == SPA_BLANK_COLORBLK_REG		);
wire	w_addr0b70_wr = w_wr_en & (i_PADDR == SPA_BLANK_Y_MIN_MAX_REG		);
wire	w_addr0b70_rd = w_rd_en & (i_PADDR == SPA_BLANK_Y_MIN_MAX_REG		);
wire	w_addr0b74_wr = w_wr_en & (i_PADDR == SPA_BLANK_CB_MIN_MAX_REG		);
wire	w_addr0b74_rd = w_rd_en & (i_PADDR == SPA_BLANK_CB_MIN_MAX_REG		);
wire	w_addr0b78_wr = w_wr_en & (i_PADDR == SPA_BLANK_CR_MIN_MAX_REG		);
wire	w_addr0b78_rd = w_rd_en & (i_PADDR == SPA_BLANK_CR_MIN_MAX_REG		);
wire	w_addr0b80_wr = w_wr_en & (i_PADDR == SPA_RC2_OUTIMG_WIDTH_HEIGHT_REG		);
wire	w_addr0b80_rd = w_rd_en & (i_PADDR == SPA_RC2_OUTIMG_WIDTH_HEIGHT_REG		);
wire	w_addr0b84_wr = w_wr_en & (i_PADDR == SPA_RC2_OVERLAP_REG		);
wire	w_addr0b84_rd = w_rd_en & (i_PADDR == SPA_RC2_OVERLAP_REG		);
wire	w_addr0b88_wr = w_wr_en & (i_PADDR == SPA_RC2_FRAC_REG		);
wire	w_addr0b88_rd = w_rd_en & (i_PADDR == SPA_RC2_FRAC_REG		);
wire	w_addr0bc0_wr = w_wr_en & (i_PADDR == SPA_BDS_CON_REG		);
wire	w_addr0bc0_rd = w_rd_en & (i_PADDR == SPA_BDS_CON_REG		);
wire	w_addr0bc4_wr = w_wr_en & (i_PADDR == SPA_BDS_EDGE1_REG		);
wire	w_addr0bc4_rd = w_rd_en & (i_PADDR == SPA_BDS_EDGE1_REG		);
wire	w_addr0bc8_wr = w_wr_en & (i_PADDR == SPA_BDS_EDGE2_REG		);
wire	w_addr0bc8_rd = w_rd_en & (i_PADDR == SPA_BDS_EDGE2_REG		);
wire	w_addr0bcc_wr = w_wr_en & (i_PADDR == SPA_BDS_EURION1_REG		);
wire	w_addr0bcc_rd = w_rd_en & (i_PADDR == SPA_BDS_EURION1_REG		);
wire	w_addr0bd0_wr = w_wr_en & (i_PADDR == SPA_BDS_EURION2_REG		);
wire	w_addr0bd0_rd = w_rd_en & (i_PADDR == SPA_BDS_EURION2_REG		);
wire	w_addr0bd4_wr = w_wr_en & (i_PADDR == SPA_BDS_OFFSET_REG		);
wire	w_addr0bd4_rd = w_rd_en & (i_PADDR == SPA_BDS_OFFSET_REG		);
wire	w_addr0bd8_wr = w_wr_en & (i_PADDR == SPA_BDS_CONTENTS_REG		);
wire	w_addr0bd8_rd = w_rd_en & (i_PADDR == SPA_BDS_CONTENTS_REG		);
wire	w_addr0c84_wr = w_wr_en & (i_PADDR == SPA_SMAP_PARAM_B_REG		);
wire	w_addr0c84_rd = w_rd_en & (i_PADDR == SPA_SMAP_PARAM_B_REG		);
wire	w_addr0c88_wr = w_wr_en & (i_PADDR == SPA_SMAP_PARAM_C_REG		);
wire	w_addr0c88_rd = w_rd_en & (i_PADDR == SPA_SMAP_PARAM_C_REG		);
wire	w_addr0c8c_wr = w_wr_en & (i_PADDR == SPA_SMAP_ADAPT_CON_REG		);
wire	w_addr0c8c_rd = w_rd_en & (i_PADDR == SPA_SMAP_ADAPT_CON_REG		);
wire	w_addr0c90_wr = w_wr_en & (i_PADDR == SPA_SMAP_ADAPT_R_MAX0_REG		);
wire	w_addr0c90_rd = w_rd_en & (i_PADDR == SPA_SMAP_ADAPT_R_MAX0_REG		);
wire	w_addr0c94_wr = w_wr_en & (i_PADDR == SPA_SMAP_ADAPT_R_MAX1_REG		);
wire	w_addr0c94_rd = w_rd_en & (i_PADDR == SPA_SMAP_ADAPT_R_MAX1_REG		);
wire	w_addr0c98_wr = w_wr_en & (i_PADDR == SPA_SMAP_ADAPT_R_MAX2_REG		);
wire	w_addr0c98_rd = w_rd_en & (i_PADDR == SPA_SMAP_ADAPT_R_MAX2_REG		);
wire	w_addr0c9c_wr = w_wr_en & (i_PADDR == SPA_SMAP_ADAPT_R_MAX3_REG		);
wire	w_addr0c9c_rd = w_rd_en & (i_PADDR == SPA_SMAP_ADAPT_R_MAX3_REG		);
wire	w_addr0ca0_wr = w_wr_en & (i_PADDR == SPA_SMAP_ADAPT_R_MAX4_REG		);
wire	w_addr0ca0_rd = w_rd_en & (i_PADDR == SPA_SMAP_ADAPT_R_MAX4_REG		);
wire	w_addr0ca4_wr = w_wr_en & (i_PADDR == SPA_SMAP_ADAPT_R_MAX5_REG		);
wire	w_addr0ca4_rd = w_rd_en & (i_PADDR == SPA_SMAP_ADAPT_R_MAX5_REG		);
wire	w_addr0ca8_wr = w_wr_en & (i_PADDR == SPA_SMAP_ADAPT_R_MAX6_REG		);
wire	w_addr0ca8_rd = w_rd_en & (i_PADDR == SPA_SMAP_ADAPT_R_MAX6_REG		);
wire	w_addr0cac_wr = w_wr_en & (i_PADDR == SPA_SMAP_ADAPT_R_MAX7_REG		);
wire	w_addr0cac_rd = w_rd_en & (i_PADDR == SPA_SMAP_ADAPT_R_MAX7_REG		);
wire	w_addr0cb0_wr = w_wr_en & (i_PADDR == SPA_SMAP_ADAPT_R_MIN0_REG		);
wire	w_addr0cb0_rd = w_rd_en & (i_PADDR == SPA_SMAP_ADAPT_R_MIN0_REG		);
wire	w_addr0cb4_wr = w_wr_en & (i_PADDR == SPA_SMAP_ADAPT_R_MIN1_REG		);
wire	w_addr0cb4_rd = w_rd_en & (i_PADDR == SPA_SMAP_ADAPT_R_MIN1_REG		);
wire	w_addr0cb8_wr = w_wr_en & (i_PADDR == SPA_SMAP_ADAPT_R_MIN2_REG		);
wire	w_addr0cb8_rd = w_rd_en & (i_PADDR == SPA_SMAP_ADAPT_R_MIN2_REG		);
wire	w_addr0cbc_wr = w_wr_en & (i_PADDR == SPA_SMAP_ADAPT_R_MIN3_REG		);
wire	w_addr0cbc_rd = w_rd_en & (i_PADDR == SPA_SMAP_ADAPT_R_MIN3_REG		);
wire	w_addr0cc0_wr = w_wr_en & (i_PADDR == SPA_SMAP_ADAPT_R_MIN4_REG		);
wire	w_addr0cc0_rd = w_rd_en & (i_PADDR == SPA_SMAP_ADAPT_R_MIN4_REG		);
wire	w_addr0cc4_wr = w_wr_en & (i_PADDR == SPA_SMAP_ADAPT_R_MIN5_REG		);
wire	w_addr0cc4_rd = w_rd_en & (i_PADDR == SPA_SMAP_ADAPT_R_MIN5_REG		);
wire	w_addr0cc8_wr = w_wr_en & (i_PADDR == SPA_SMAP_ADAPT_R_MIN6_REG		);
wire	w_addr0cc8_rd = w_rd_en & (i_PADDR == SPA_SMAP_ADAPT_R_MIN6_REG		);
wire	w_addr0ccc_wr = w_wr_en & (i_PADDR == SPA_SMAP_ADAPT_R_MIN7_REG		);
wire	w_addr0ccc_rd = w_rd_en & (i_PADDR == SPA_SMAP_ADAPT_R_MIN7_REG		);
wire	w_addr0cd0_wr = w_wr_en & (i_PADDR == SPA_SMAP_ADAPT_G_MAX0_REG		);
wire	w_addr0cd0_rd = w_rd_en & (i_PADDR == SPA_SMAP_ADAPT_G_MAX0_REG		);
wire	w_addr0cd4_wr = w_wr_en & (i_PADDR == SPA_SMAP_ADAPT_G_MAX1_REG		);
wire	w_addr0cd4_rd = w_rd_en & (i_PADDR == SPA_SMAP_ADAPT_G_MAX1_REG		);
wire	w_addr0cd8_wr = w_wr_en & (i_PADDR == SPA_SMAP_ADAPT_G_MAX2_REG		);
wire	w_addr0cd8_rd = w_rd_en & (i_PADDR == SPA_SMAP_ADAPT_G_MAX2_REG		);
wire	w_addr0cdc_wr = w_wr_en & (i_PADDR == SPA_SMAP_ADAPT_G_MAX3_REG		);
wire	w_addr0cdc_rd = w_rd_en & (i_PADDR == SPA_SMAP_ADAPT_G_MAX3_REG		);
wire	w_addr0ce0_wr = w_wr_en & (i_PADDR == SPA_SMAP_ADAPT_G_MAX4_REG		);
wire	w_addr0ce0_rd = w_rd_en & (i_PADDR == SPA_SMAP_ADAPT_G_MAX4_REG		);
wire	w_addr0ce4_wr = w_wr_en & (i_PADDR == SPA_SMAP_ADAPT_G_MAX5_REG		);
wire	w_addr0ce4_rd = w_rd_en & (i_PADDR == SPA_SMAP_ADAPT_G_MAX5_REG		);
wire	w_addr0ce8_wr = w_wr_en & (i_PADDR == SPA_SMAP_ADAPT_G_MAX6_REG		);
wire	w_addr0ce8_rd = w_rd_en & (i_PADDR == SPA_SMAP_ADAPT_G_MAX6_REG		);
wire	w_addr0cec_wr = w_wr_en & (i_PADDR == SPA_SMAP_ADAPT_G_MAX7_REG		);
wire	w_addr0cec_rd = w_rd_en & (i_PADDR == SPA_SMAP_ADAPT_G_MAX7_REG		);
wire	w_addr0cf0_wr = w_wr_en & (i_PADDR == SPA_SMAP_ADAPT_G_MIN0_REG		);
wire	w_addr0cf0_rd = w_rd_en & (i_PADDR == SPA_SMAP_ADAPT_G_MIN0_REG		);
wire	w_addr0cf4_wr = w_wr_en & (i_PADDR == SPA_SMAP_ADAPT_G_MIN1_REG		);
wire	w_addr0cf4_rd = w_rd_en & (i_PADDR == SPA_SMAP_ADAPT_G_MIN1_REG		);
wire	w_addr0cf8_wr = w_wr_en & (i_PADDR == SPA_SMAP_ADAPT_G_MIN2_REG		);
wire	w_addr0cf8_rd = w_rd_en & (i_PADDR == SPA_SMAP_ADAPT_G_MIN2_REG		);
wire	w_addr0cfc_wr = w_wr_en & (i_PADDR == SPA_SMAP_ADAPT_G_MIN3_REG		);
wire	w_addr0cfc_rd = w_rd_en & (i_PADDR == SPA_SMAP_ADAPT_G_MIN3_REG		);
wire	w_addr0d00_wr = w_wr_en & (i_PADDR == SPA_SMAP_ADAPT_G_MIN4_REG		);
wire	w_addr0d00_rd = w_rd_en & (i_PADDR == SPA_SMAP_ADAPT_G_MIN4_REG		);
wire	w_addr0d04_wr = w_wr_en & (i_PADDR == SPA_SMAP_ADAPT_G_MIN5_REG		);
wire	w_addr0d04_rd = w_rd_en & (i_PADDR == SPA_SMAP_ADAPT_G_MIN5_REG		);
wire	w_addr0d08_wr = w_wr_en & (i_PADDR == SPA_SMAP_ADAPT_G_MIN6_REG		);
wire	w_addr0d08_rd = w_rd_en & (i_PADDR == SPA_SMAP_ADAPT_G_MIN6_REG		);
wire	w_addr0d0c_wr = w_wr_en & (i_PADDR == SPA_SMAP_ADAPT_G_MIN7_REG		);
wire	w_addr0d0c_rd = w_rd_en & (i_PADDR == SPA_SMAP_ADAPT_G_MIN7_REG		);
wire	w_addr0d10_wr = w_wr_en & (i_PADDR == SPA_SMAP_ADAPT_B_MAX0_REG		);
wire	w_addr0d10_rd = w_rd_en & (i_PADDR == SPA_SMAP_ADAPT_B_MAX0_REG		);
wire	w_addr0d14_wr = w_wr_en & (i_PADDR == SPA_SMAP_ADAPT_B_MAX1_REG		);
wire	w_addr0d14_rd = w_rd_en & (i_PADDR == SPA_SMAP_ADAPT_B_MAX1_REG		);
wire	w_addr0d18_wr = w_wr_en & (i_PADDR == SPA_SMAP_ADAPT_B_MAX2_REG		);
wire	w_addr0d18_rd = w_rd_en & (i_PADDR == SPA_SMAP_ADAPT_B_MAX2_REG		);
wire	w_addr0d1c_wr = w_wr_en & (i_PADDR == SPA_SMAP_ADAPT_B_MAX3_REG		);
wire	w_addr0d1c_rd = w_rd_en & (i_PADDR == SPA_SMAP_ADAPT_B_MAX3_REG		);
wire	w_addr0d20_wr = w_wr_en & (i_PADDR == SPA_SMAP_ADAPT_B_MAX4_REG		);
wire	w_addr0d20_rd = w_rd_en & (i_PADDR == SPA_SMAP_ADAPT_B_MAX4_REG		);
wire	w_addr0d24_wr = w_wr_en & (i_PADDR == SPA_SMAP_ADAPT_B_MAX5_REG		);
wire	w_addr0d24_rd = w_rd_en & (i_PADDR == SPA_SMAP_ADAPT_B_MAX5_REG		);
wire	w_addr0d28_wr = w_wr_en & (i_PADDR == SPA_SMAP_ADAPT_B_MAX6_REG		);
wire	w_addr0d28_rd = w_rd_en & (i_PADDR == SPA_SMAP_ADAPT_B_MAX6_REG		);
wire	w_addr0d2c_wr = w_wr_en & (i_PADDR == SPA_SMAP_ADAPT_B_MAX7_REG		);
wire	w_addr0d2c_rd = w_rd_en & (i_PADDR == SPA_SMAP_ADAPT_B_MAX7_REG		);
wire	w_addr0d30_wr = w_wr_en & (i_PADDR == SPA_SMAP_ADAPT_B_MIN0_REG		);
wire	w_addr0d30_rd = w_rd_en & (i_PADDR == SPA_SMAP_ADAPT_B_MIN0_REG		);
wire	w_addr0d34_wr = w_wr_en & (i_PADDR == SPA_SMAP_ADAPT_B_MIN1_REG		);
wire	w_addr0d34_rd = w_rd_en & (i_PADDR == SPA_SMAP_ADAPT_B_MIN1_REG		);
wire	w_addr0d38_wr = w_wr_en & (i_PADDR == SPA_SMAP_ADAPT_B_MIN2_REG		);
wire	w_addr0d38_rd = w_rd_en & (i_PADDR == SPA_SMAP_ADAPT_B_MIN2_REG		);
wire	w_addr0d3c_wr = w_wr_en & (i_PADDR == SPA_SMAP_ADAPT_B_MIN3_REG		);
wire	w_addr0d3c_rd = w_rd_en & (i_PADDR == SPA_SMAP_ADAPT_B_MIN3_REG		);
wire	w_addr0d40_wr = w_wr_en & (i_PADDR == SPA_SMAP_ADAPT_B_MIN4_REG		);
wire	w_addr0d40_rd = w_rd_en & (i_PADDR == SPA_SMAP_ADAPT_B_MIN4_REG		);
wire	w_addr0d44_wr = w_wr_en & (i_PADDR == SPA_SMAP_ADAPT_B_MIN5_REG		);
wire	w_addr0d44_rd = w_rd_en & (i_PADDR == SPA_SMAP_ADAPT_B_MIN5_REG		);
wire	w_addr0d48_wr = w_wr_en & (i_PADDR == SPA_SMAP_ADAPT_B_MIN6_REG		);
wire	w_addr0d48_rd = w_rd_en & (i_PADDR == SPA_SMAP_ADAPT_B_MIN6_REG		);
wire	w_addr0d4c_wr = w_wr_en & (i_PADDR == SPA_SMAP_ADAPT_B_MIN7_REG		);
wire	w_addr0d4c_rd = w_rd_en & (i_PADDR == SPA_SMAP_ADAPT_B_MIN7_REG		);
wire	w_addr108c_wr = w_wr_en & (i_PADDR == SPA_TBL_ADDR_00_UP_REG		);
wire	w_addr108c_rd = w_rd_en & (i_PADDR == SPA_TBL_ADDR_00_UP_REG		);
wire	w_addr1090_wr = w_wr_en & (i_PADDR == SPA_TBL_ADDR_01_UP_REG		);
wire	w_addr1090_rd = w_rd_en & (i_PADDR == SPA_TBL_ADDR_01_UP_REG		);
wire	w_addr1094_wr = w_wr_en & (i_PADDR == SPA_TBL_ADDR_02_UP_REG		);
wire	w_addr1094_rd = w_rd_en & (i_PADDR == SPA_TBL_ADDR_02_UP_REG		);
wire	w_addr1098_wr = w_wr_en & (i_PADDR == SPA_TBL_ADDR_03_UP_REG		);
wire	w_addr1098_rd = w_rd_en & (i_PADDR == SPA_TBL_ADDR_03_UP_REG		);
wire	w_addr109c_wr = w_wr_en & (i_PADDR == SPA_TBL_ADDR_04_UP_REG		);
wire	w_addr109c_rd = w_rd_en & (i_PADDR == SPA_TBL_ADDR_04_UP_REG		);
wire	w_addr10a0_wr = w_wr_en & (i_PADDR == SPA_TBL_ADDR_05_UP_REG		);
wire	w_addr10a0_rd = w_rd_en & (i_PADDR == SPA_TBL_ADDR_05_UP_REG		);
wire	w_addr10a4_wr = w_wr_en & (i_PADDR == SPA_TBL_ADDR_06_UP_REG		);
wire	w_addr10a4_rd = w_rd_en & (i_PADDR == SPA_TBL_ADDR_06_UP_REG		);
wire	w_addr10a8_wr = w_wr_en & (i_PADDR == SPA_TBL_ADDR_07_UP_REG		);
wire	w_addr10a8_rd = w_rd_en & (i_PADDR == SPA_TBL_ADDR_07_UP_REG		);
wire	w_addr10ac_wr = w_wr_en & (i_PADDR == SPA_TBL_ADDR_08_UP_REG		);
wire	w_addr10ac_rd = w_rd_en & (i_PADDR == SPA_TBL_ADDR_08_UP_REG		);
wire	w_addr10b0_wr = w_wr_en & (i_PADDR == SPA_TBL_ADDR_09_UP_REG		);
wire	w_addr10b0_rd = w_rd_en & (i_PADDR == SPA_TBL_ADDR_09_UP_REG		);
wire	w_addr10b4_wr = w_wr_en & (i_PADDR == SPA_TBL_ADDR_10_UP_REG		);
wire	w_addr10b4_rd = w_rd_en & (i_PADDR == SPA_TBL_ADDR_10_UP_REG		);
wire	w_addr10b8_wr = w_wr_en & (i_PADDR == SPA_TBL_ADDR_11_UP_REG		);
wire	w_addr10b8_rd = w_rd_en & (i_PADDR == SPA_TBL_ADDR_11_UP_REG		);
wire	w_addr10bc_wr = w_wr_en & (i_PADDR == SPA_TBL_ADDR_12_UP_REG		);
wire	w_addr10bc_rd = w_rd_en & (i_PADDR == SPA_TBL_ADDR_12_UP_REG		);
wire	w_addr10c0_wr = w_wr_en & (i_PADDR == SPA_TBL_ADDR_13_UP_REG		);
wire	w_addr10c0_rd = w_rd_en & (i_PADDR == SPA_TBL_ADDR_13_UP_REG		);
wire	w_addr10c4_wr = w_wr_en & (i_PADDR == SPA_TBL_ADDR_14_UP_REG		);
wire	w_addr10c4_rd = w_rd_en & (i_PADDR == SPA_TBL_ADDR_14_UP_REG		);
wire	w_addr10c8_wr = w_wr_en & (i_PADDR == SPA_TBL_ADDR_15_UP_REG		);
wire	w_addr10c8_rd = w_rd_en & (i_PADDR == SPA_TBL_ADDR_15_UP_REG		);
wire	w_addr10cc_wr = w_wr_en & (i_PADDR == SPA_TBL_ADDR_16_UP_REG		);
wire	w_addr10cc_rd = w_rd_en & (i_PADDR == SPA_TBL_ADDR_16_UP_REG		);
wire	w_addr10d0_wr = w_wr_en & (i_PADDR == SPA_TBL_ADDR_17_UP_REG		);
wire	w_addr10d0_rd = w_rd_en & (i_PADDR == SPA_TBL_ADDR_17_UP_REG		);
wire	w_addr10d4_wr = w_wr_en & (i_PADDR == SPA_TBL_ADDR_18_UP_REG		);
wire	w_addr10d4_rd = w_rd_en & (i_PADDR == SPA_TBL_ADDR_18_UP_REG		);
wire	w_addr10d8_wr = w_wr_en & (i_PADDR == SPA_TBL_ADDR_19_UP_REG		);
wire	w_addr10d8_rd = w_rd_en & (i_PADDR == SPA_TBL_ADDR_19_UP_REG		);
wire	w_addr10dc_wr = w_wr_en & (i_PADDR == SPA_TBL_ADDR_20_UP_REG		);
wire	w_addr10dc_rd = w_rd_en & (i_PADDR == SPA_TBL_ADDR_20_UP_REG		);
wire	w_addr10e0_wr = w_wr_en & (i_PADDR == SPA_TBL_ADDR_21_UP_REG		);
wire	w_addr10e0_rd = w_rd_en & (i_PADDR == SPA_TBL_ADDR_21_UP_REG		);
wire	w_addr10e4_wr = w_wr_en & (i_PADDR == SPA_TBL_ADDR_22_UP_REG		);
wire	w_addr10e4_rd = w_rd_en & (i_PADDR == SPA_TBL_ADDR_22_UP_REG		);
wire	w_addr10e8_wr = w_wr_en & (i_PADDR == SPA_TBL_ADDR_23_UP_REG		);
wire	w_addr10e8_rd = w_rd_en & (i_PADDR == SPA_TBL_ADDR_23_UP_REG		);
wire	w_addr10ec_wr = w_wr_en & (i_PADDR == SPA_TBL_ADDR_24_UP_REG		);
wire	w_addr10ec_rd = w_rd_en & (i_PADDR == SPA_TBL_ADDR_24_UP_REG		);
wire	w_addr114c_wr = w_wr_en & (i_PADDR == SPA_RX_CH0_PREV_ADDR_UP_REG		);
wire	w_addr114c_rd = w_rd_en & (i_PADDR == SPA_RX_CH0_PREV_ADDR_UP_REG		);
wire	w_addr1150_wr = w_wr_en & (i_PADDR == SPA_RX_CH1_PREV_ADDR_UP_REG		);
wire	w_addr1150_rd = w_rd_en & (i_PADDR == SPA_RX_CH1_PREV_ADDR_UP_REG		);
wire	w_addr1154_wr = w_wr_en & (i_PADDR == SPA_RX_CH2_PREV_ADDR_UP_REG		);
wire	w_addr1154_rd = w_rd_en & (i_PADDR == SPA_RX_CH2_PREV_ADDR_UP_REG		);
wire	w_addr1158_wr = w_wr_en & (i_PADDR == SPA_RX_CH0_CURR_ADDR_UP_REG		);
wire	w_addr1158_rd = w_rd_en & (i_PADDR == SPA_RX_CH0_CURR_ADDR_UP_REG		);
wire	w_addr115c_wr = w_wr_en & (i_PADDR == SPA_RX_CH1_CURR_ADDR_UP_REG		);
wire	w_addr115c_rd = w_rd_en & (i_PADDR == SPA_RX_CH1_CURR_ADDR_UP_REG		);
wire	w_addr1160_wr = w_wr_en & (i_PADDR == SPA_RX_CH2_CURR_ADDR_UP_REG		);
wire	w_addr1160_rd = w_rd_en & (i_PADDR == SPA_RX_CH2_CURR_ADDR_UP_REG		);
wire	w_addr1164_wr = w_wr_en & (i_PADDR == SPA_RX_CH0_START_ADDR_UP_REG		);
wire	w_addr1164_rd = w_rd_en & (i_PADDR == SPA_RX_CH0_START_ADDR_UP_REG		);
wire	w_addr1168_wr = w_wr_en & (i_PADDR == SPA_RX_CH1_START_ADDR_UP_REG		);
wire	w_addr1168_rd = w_rd_en & (i_PADDR == SPA_RX_CH1_START_ADDR_UP_REG		);
wire	w_addr116c_wr = w_wr_en & (i_PADDR == SPA_RX_CH2_START_ADDR_UP_REG		);
wire	w_addr116c_rd = w_rd_en & (i_PADDR == SPA_RX_CH2_START_ADDR_UP_REG		);
wire	w_addr1178_wr = w_wr_en & (i_PADDR == SPA_RX_CUR_ADDR_CH0_UP_REG		);
wire	w_addr1178_rd = w_rd_en & (i_PADDR == SPA_RX_CUR_ADDR_CH0_UP_REG		);
wire	w_addr117c_wr = w_wr_en & (i_PADDR == SPA_RX_CUR_ADDR_CH1_UP_REG		);
wire	w_addr117c_rd = w_rd_en & (i_PADDR == SPA_RX_CUR_ADDR_CH1_UP_REG		);
wire	w_addr1180_wr = w_wr_en & (i_PADDR == SPA_RX_CUR_ADDR_CH2_UP_REG		);
wire	w_addr1180_rd = w_rd_en & (i_PADDR == SPA_RX_CUR_ADDR_CH2_UP_REG		);
wire	w_addr11d4_wr = w_wr_en & (i_PADDR == SPA_TX_CH0_START_ADDR_UP_REG		);
wire	w_addr11d4_rd = w_rd_en & (i_PADDR == SPA_TX_CH0_START_ADDR_UP_REG		);
wire	w_addr11d8_wr = w_wr_en & (i_PADDR == SPA_TX_CH1_START_ADDR_UP_REG		);
wire	w_addr11d8_rd = w_rd_en & (i_PADDR == SPA_TX_CH1_START_ADDR_UP_REG		);
wire	w_addr11dc_wr = w_wr_en & (i_PADDR == SPA_TX_CH2_START_ADDR_UP_REG		);
wire	w_addr11dc_rd = w_rd_en & (i_PADDR == SPA_TX_CH2_START_ADDR_UP_REG		);
wire	w_addr11f0_wr = w_wr_en & (i_PADDR == SPA_TX_ADDR_CH0_MAX_UP_REG		);
wire	w_addr11f0_rd = w_rd_en & (i_PADDR == SPA_TX_ADDR_CH0_MAX_UP_REG		);
wire	w_addr11f4_wr = w_wr_en & (i_PADDR == SPA_TX_ADDR_CH0_MIN_UP_REG		);
wire	w_addr11f4_rd = w_rd_en & (i_PADDR == SPA_TX_ADDR_CH0_MIN_UP_REG		);
wire	w_addr11f8_wr = w_wr_en & (i_PADDR == SPA_TX_ADDR_CH1_MAX_UP_REG		);
wire	w_addr11f8_rd = w_rd_en & (i_PADDR == SPA_TX_ADDR_CH1_MAX_UP_REG		);
wire	w_addr11fc_wr = w_wr_en & (i_PADDR == SPA_TX_ADDR_CH1_MIN_UP_REG		);
wire	w_addr11fc_rd = w_rd_en & (i_PADDR == SPA_TX_ADDR_CH1_MIN_UP_REG		);
wire	w_addr1200_wr = w_wr_en & (i_PADDR == SPA_TX_ADDR_CH2_MAX_UP_REG		);
wire	w_addr1200_rd = w_rd_en & (i_PADDR == SPA_TX_ADDR_CH2_MAX_UP_REG		);
wire	w_addr1204_wr = w_wr_en & (i_PADDR == SPA_TX_ADDR_CH2_MIN_UP_REG		);
wire	w_addr1204_rd = w_rd_en & (i_PADDR == SPA_TX_ADDR_CH2_MIN_UP_REG		);
wire	w_addr1218_wr = w_wr_en & (i_PADDR == SPA_TX_CH0_CUR_ADDR_UP_REG		);
wire	w_addr1218_rd = w_rd_en & (i_PADDR == SPA_TX_CH0_CUR_ADDR_UP_REG		);
wire	w_addr121c_wr = w_wr_en & (i_PADDR == SPA_TX_CH1_CUR_ADDR_UP_REG		);
wire	w_addr121c_rd = w_rd_en & (i_PADDR == SPA_TX_CH1_CUR_ADDR_UP_REG		);
wire	w_addr1220_wr = w_wr_en & (i_PADDR == SPA_TX_CH2_CUR_ADDR_UP_REG		);
wire	w_addr1220_rd = w_rd_en & (i_PADDR == SPA_TX_CH2_CUR_ADDR_UP_REG		);
wire	w_addr1284_wr = w_wr_en & (i_PADDR == SPA_ADAPT_DMA_ADDR_UP_REG		);
wire	w_addr1284_rd = w_rd_en & (i_PADDR == SPA_ADAPT_DMA_ADDR_UP_REG		);
wire	w_addr1290_wr = w_wr_en & (i_PADDR == SPA_ADAPT_TX_ADDR_MAX_UP_REG		);
wire	w_addr1290_rd = w_rd_en & (i_PADDR == SPA_ADAPT_TX_ADDR_MAX_UP_REG		);
wire	w_addr1294_wr = w_wr_en & (i_PADDR == SPA_ADAPT_TX_ADDR_MIN_UP_REG		);
wire	w_addr1294_rd = w_rd_en & (i_PADDR == SPA_ADAPT_TX_ADDR_MIN_UP_REG		);
wire	w_addr1298_wr = w_wr_en & (i_PADDR == SPA_ADAPT_TX_CUR_ADDR_UP_REG		);
wire	w_addr1298_rd = w_rd_en & (i_PADDR == SPA_ADAPT_TX_CUR_ADDR_UP_REG		);
wire	w_addr12c4_wr = w_wr_en & (i_PADDR == SPA_SMAP_DMA_ADDR_UP_REG		);
wire	w_addr12c4_rd = w_rd_en & (i_PADDR == SPA_SMAP_DMA_ADDR_UP_REG		);
wire	w_addr12d0_wr = w_wr_en & (i_PADDR == SPA_SMAP_TX_ADDR_MAX_UP_REG		);
wire	w_addr12d0_rd = w_rd_en & (i_PADDR == SPA_SMAP_TX_ADDR_MAX_UP_REG		);
wire	w_addr12d4_wr = w_wr_en & (i_PADDR == SPA_SMAP_TX_ADDR_MIN_UP_REG		);
wire	w_addr12d4_rd = w_rd_en & (i_PADDR == SPA_SMAP_TX_ADDR_MIN_UP_REG		);
wire	w_addr12d8_wr = w_wr_en & (i_PADDR == SPA_SMAP_TX_CUR_ADDR_UP_REG		);
wire	w_addr12d8_rd = w_rd_en & (i_PADDR == SPA_SMAP_TX_CUR_ADDR_UP_REG		);
wire	w_addr1304_wr = w_wr_en & (i_PADDR == SPA_BDS_DMA_ADDR_UP_REG		);
wire	w_addr1304_rd = w_rd_en & (i_PADDR == SPA_BDS_DMA_ADDR_UP_REG		);
wire	w_addr1310_wr = w_wr_en & (i_PADDR == SPA_BDS_TX_ADDR_MAX_UP_REG		);
wire	w_addr1310_rd = w_rd_en & (i_PADDR == SPA_BDS_TX_ADDR_MAX_UP_REG		);
wire	w_addr1314_wr = w_wr_en & (i_PADDR == SPA_BDS_TX_ADDR_MIN_UP_REG		);
wire	w_addr1314_rd = w_rd_en & (i_PADDR == SPA_BDS_TX_ADDR_MIN_UP_REG		);
wire	w_addr1318_wr = w_wr_en & (i_PADDR == SPA_BDS_TX_CUR_ADDR_UP_REG		);
wire	w_addr1318_rd = w_rd_en & (i_PADDR == SPA_BDS_TX_CUR_ADDR_UP_REG		);
wire	w_addr1320_wr = w_wr_en & (i_PADDR == SPA_ADAPT_DMA_BUF_WR_CNT_REG		);
wire	w_addr1320_rd = w_rd_en & (i_PADDR == SPA_ADAPT_DMA_BUF_WR_CNT_REG		);
wire	w_addr1324_wr = w_wr_en & (i_PADDR == SPA_ADAPT_DMA_BUF_RD_CNT_REG		);
wire	w_addr1324_rd = w_rd_en & (i_PADDR == SPA_ADAPT_DMA_BUF_RD_CNT_REG		);
wire	w_addr1328_wr = w_wr_en & (i_PADDR == SPA_ADAPT_DMA_OUT0_CNT_REG		);
wire	w_addr1328_rd = w_rd_en & (i_PADDR == SPA_ADAPT_DMA_OUT0_CNT_REG		);
wire	w_addr132c_wr = w_wr_en & (i_PADDR == SPA_SMAP_DMA_BUF_WR_CNT_REG		);
wire	w_addr132c_rd = w_rd_en & (i_PADDR == SPA_SMAP_DMA_BUF_WR_CNT_REG		);
wire	w_addr1330_wr = w_wr_en & (i_PADDR == SPA_SMAP_DMA_BUF_RD_CNT_REG		);
wire	w_addr1330_rd = w_rd_en & (i_PADDR == SPA_SMAP_DMA_BUF_RD_CNT_REG		);
wire	w_addr1334_wr = w_wr_en & (i_PADDR == SPA_SMAP_DMA_OUT0_CNT_REG		);
wire	w_addr1334_rd = w_rd_en & (i_PADDR == SPA_SMAP_DMA_OUT0_CNT_REG		);
wire	w_addr1338_wr = w_wr_en & (i_PADDR == SPA_BDS_DMA_BUF_WR_CNT_REG		);
wire	w_addr1338_rd = w_rd_en & (i_PADDR == SPA_BDS_DMA_BUF_WR_CNT_REG		);
wire	w_addr133c_wr = w_wr_en & (i_PADDR == SPA_BDS_DMA_BUF_RD_CNT_REG		);
wire	w_addr133c_rd = w_rd_en & (i_PADDR == SPA_BDS_DMA_BUF_RD_CNT_REG		);
wire	w_addr1340_wr = w_wr_en & (i_PADDR == SPA_BDS_DMA_OUT0_CNT_REG		);
wire	w_addr1340_rd = w_rd_en & (i_PADDR == SPA_BDS_DMA_OUT0_CNT_REG		);
wire	w_addr1344_wr = w_wr_en & (i_PADDR == SPA_ADAPT_WDATA_CNT_REG		);
wire	w_addr1344_rd = w_rd_en & (i_PADDR == SPA_ADAPT_WDATA_CNT_REG		);
wire	w_addr1348_wr = w_wr_en & (i_PADDR == SPA_SMAP_WDATA_CNT_REG		);
wire	w_addr1348_rd = w_rd_en & (i_PADDR == SPA_SMAP_WDATA_CNT_REG		);
wire	w_addr134c_wr = w_wr_en & (i_PADDR == SPA_BDS_WDATA_CNT_REG		);
wire	w_addr134c_rd = w_rd_en & (i_PADDR == SPA_BDS_WDATA_CNT_REG		);


// SPA_SW_RESET_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_DMA_RESET[0:0]	<= 1`h0;
		r_GLOBAL_RESET[0:0]	<= 1`h0;
	end
	else if (w_addr0000_wr) begin
		r_DMA_RESET[0:0]	<= i_PWDATA[0:0];
		r_GLOBAL_RESET[0:0]	<= i_PWDATA[8:8];
	end
	else begin
		r_DMA_RESET[0:0]	<= r_DMA_RESET[0:0];
		r_GLOBAL_RESET[0:0]	<= r_GLOBAL_RESET[0:0];
	end
end

// output assign for SPA_SW_RESET_REG
assign o_DMA_RESET[0:0]	= r_DMA_RESET[0:0];
assign o_GLOBAL_RESET[0:0]	= r_GLOBAL_RESET[0:0];


// SPA_CORE_START_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_CORE_START[0:0]	<= 1`h0;
		//r_CORE_BUSY[0:0]	<= 1`h0; // read-only
	end
	else if (w_addr0004_wr) begin
		r_CORE_START[0:0]	<= i_PWDATA[0:0];
		//r_CORE_BUSY[0:0]	<= i_PWDATA[1:1]; // read-only
	end
	else begin
		r_CORE_START[0:0]	<= r_CORE_START[0:0];
		//r_CORE_BUSY[0:0]	<= r_CORE_BUSY[0:0]; // read-only
	end
end

// output assign for SPA_CORE_START_REG
assign o_CORE_START[0:0]	= r_CORE_START[0:0];
assign o_CORE_BUSY[0:0]	= 1'h0 /* add logic */ ;


// SPA_MODE_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_RX_COLOR_MODE[1:0]	<= 2`h1;
		r_TX_COLOR_MODE[1:0]	<= 2`h1;
		r_RX_DPI_MODE[2:0]	<= 3`h0;
	end
	else if (w_addr0008_wr) begin
		r_RX_COLOR_MODE[1:0]	<= i_PWDATA[1:0];
		r_TX_COLOR_MODE[1:0]	<= i_PWDATA[5:4];
		r_RX_DPI_MODE[2:0]	<= i_PWDATA[18:16];
	end
	else begin
		r_RX_COLOR_MODE[1:0]	<= r_RX_COLOR_MODE[1:0];
		r_TX_COLOR_MODE[1:0]	<= r_TX_COLOR_MODE[1:0];
		r_RX_DPI_MODE[2:0]	<= r_RX_DPI_MODE[2:0];
	end
end

// output assign for SPA_MODE_REG
assign o_RX_COLOR_MODE[1:0]	= r_RX_COLOR_MODE[1:0];
assign o_TX_COLOR_MODE[1:0]	= r_TX_COLOR_MODE[1:0];
assign o_RX_DPI_MODE[2:0]	= r_RX_DPI_MODE[2:0];


// SPA_MODULE_EN_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_VSD_EN[0:0]	<= 1`h0;
		r_CIS_EN[0:0]	<= 1`h0;
		r_RC1_EN[0:0]	<= 1`h1;
		r_S1D_EN[0:0]	<= 1`h0;
		r_SEG1_EN[0:0]	<= 1`h0;
		r_SCC_EN[0:0]	<= 1`h0;
		r_SEG2_EN[0:0]	<= 1`h0;
		r_ABSD_EN[0:0]	<= 1`h0;
		r_NEWABSD_EN[0:0]	<= 1`h0;
		r_MAGD_EN[0:0]	<= 1`h0;
		r_ACS_EN[0:0]	<= 1`h0;
		r_BLANK_EN[0:0]	<= 1`h0;
		r_ACBD_EN[0:0]	<= 1`h0;
		r_ORIENT_EN[0:0]	<= 1`h0;
		r_CLA_EN[0:0]	<= 1`h0;
		r_BDS_EN[0:0]	<= 1`h0;
		r_ADAPT_EN[0:0]	<= 1`h0;
		r_SMAP_EN[0:0]	<= 1`h0;
		r_TX_CH_EN[0:0]	<= 1`h0;
	end
	else if (w_addr000c_wr) begin
		r_VSD_EN[0:0]	<= i_PWDATA[0:0];
		r_CIS_EN[0:0]	<= i_PWDATA[1:1];
		r_RC1_EN[0:0]	<= i_PWDATA[2:2];
		r_S1D_EN[0:0]	<= i_PWDATA[3:3];
		r_SEG1_EN[0:0]	<= i_PWDATA[4:4];
		r_SCC_EN[0:0]	<= i_PWDATA[5:5];
		r_SEG2_EN[0:0]	<= i_PWDATA[6:6];
		r_ABSD_EN[0:0]	<= i_PWDATA[8:8];
		r_NEWABSD_EN[0:0]	<= i_PWDATA[9:9];
		r_MAGD_EN[0:0]	<= i_PWDATA[10:10];
		r_ACS_EN[0:0]	<= i_PWDATA[11:11];
		r_BLANK_EN[0:0]	<= i_PWDATA[12:12];
		r_ACBD_EN[0:0]	<= i_PWDATA[13:13];
		r_ORIENT_EN[0:0]	<= i_PWDATA[14:14];
		r_CLA_EN[0:0]	<= i_PWDATA[15:15];
		r_BDS_EN[0:0]	<= i_PWDATA[20:20];
		r_ADAPT_EN[0:0]	<= i_PWDATA[21:21];
		r_SMAP_EN[0:0]	<= i_PWDATA[22:22];
		r_TX_CH_EN[0:0]	<= i_PWDATA[23:23];
	end
	else begin
		r_VSD_EN[0:0]	<= r_VSD_EN[0:0];
		r_CIS_EN[0:0]	<= r_CIS_EN[0:0];
		r_RC1_EN[0:0]	<= r_RC1_EN[0:0];
		r_S1D_EN[0:0]	<= r_S1D_EN[0:0];
		r_SEG1_EN[0:0]	<= r_SEG1_EN[0:0];
		r_SCC_EN[0:0]	<= r_SCC_EN[0:0];
		r_SEG2_EN[0:0]	<= r_SEG2_EN[0:0];
		r_ABSD_EN[0:0]	<= r_ABSD_EN[0:0];
		r_NEWABSD_EN[0:0]	<= r_NEWABSD_EN[0:0];
		r_MAGD_EN[0:0]	<= r_MAGD_EN[0:0];
		r_ACS_EN[0:0]	<= r_ACS_EN[0:0];
		r_BLANK_EN[0:0]	<= r_BLANK_EN[0:0];
		r_ACBD_EN[0:0]	<= r_ACBD_EN[0:0];
		r_ORIENT_EN[0:0]	<= r_ORIENT_EN[0:0];
		r_CLA_EN[0:0]	<= r_CLA_EN[0:0];
		r_BDS_EN[0:0]	<= r_BDS_EN[0:0];
		r_ADAPT_EN[0:0]	<= r_ADAPT_EN[0:0];
		r_SMAP_EN[0:0]	<= r_SMAP_EN[0:0];
		r_TX_CH_EN[0:0]	<= r_TX_CH_EN[0:0];
	end
end

// output assign for SPA_MODULE_EN_REG
assign o_VSD_EN[0:0]	= r_VSD_EN[0:0];
assign o_CIS_EN[0:0]	= r_CIS_EN[0:0];
assign o_RC1_EN[0:0]	= r_RC1_EN[0:0];
assign o_S1D_EN[0:0]	= r_S1D_EN[0:0];
assign o_SEG1_EN[0:0]	= r_SEG1_EN[0:0];
assign o_SCC_EN[0:0]	= r_SCC_EN[0:0];
assign o_SEG2_EN[0:0]	= r_SEG2_EN[0:0];
assign o_ABSD_EN[0:0]	= r_ABSD_EN[0:0];
assign o_NEWABSD_EN[0:0]	= r_NEWABSD_EN[0:0];
assign o_MAGD_EN[0:0]	= r_MAGD_EN[0:0];
assign o_ACS_EN[0:0]	= r_ACS_EN[0:0];
assign o_BLANK_EN[0:0]	= r_BLANK_EN[0:0];
assign o_ACBD_EN[0:0]	= r_ACBD_EN[0:0];
assign o_ORIENT_EN[0:0]	= r_ORIENT_EN[0:0];
assign o_CLA_EN[0:0]	= r_CLA_EN[0:0];
assign o_BDS_EN[0:0]	= r_BDS_EN[0:0];
assign o_ADAPT_EN[0:0]	= r_ADAPT_EN[0:0];
assign o_SMAP_EN[0:0]	= r_SMAP_EN[0:0];
assign o_TX_CH_EN[0:0]	= r_TX_CH_EN[0:0];


// SPA_RX_XD_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_RX_XD[15:0]	<= 16`hFFFF;
	end
	else if (w_addr0010_wr) begin
		r_RX_XD[15:0]	<= i_PWDATA[15:0];
	end
	else begin
		r_RX_XD[15:0]	<= r_RX_XD[15:0];
	end
end

// output assign for SPA_RX_XD_REG
assign o_RX_XD[15:0]	= r_RX_XD[15:0];


// SPA_RX_YD_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_RX_YD[15:0]	<= 16`hFFFF;
	end
	else if (w_addr0014_wr) begin
		r_RX_YD[15:0]	<= i_PWDATA[15:0];
	end
	else begin
		r_RX_YD[15:0]	<= r_RX_YD[15:0];
	end
end

// output assign for SPA_RX_YD_REG
assign o_RX_YD[15:0]	= r_RX_YD[15:0];


// SPA_TX_IMG_SIZE_REG register

// output assign for SPA_TX_IMG_SIZE_REG
assign o_TX_XD[15:0]	= 16'h0 /* add logic */ ;
assign o_TX_YD[15:0]	= 16'h0 /* add logic */ ;


// SPA_RX_PADDING_VAL_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_CH0_PADDING_VAL[7:0]	<= 8`hff;
		r_CH1_PADDING_VAL[7:0]	<= 8`hff;
		r_CH2_PADDING_VAL[7:0]	<= 8`hff;
	end
	else if (w_addr001c_wr) begin
		r_CH0_PADDING_VAL[7:0]	<= i_PWDATA[7:0];
		r_CH1_PADDING_VAL[7:0]	<= i_PWDATA[15:8];
		r_CH2_PADDING_VAL[7:0]	<= i_PWDATA[23:16];
	end
	else begin
		r_CH0_PADDING_VAL[7:0]	<= r_CH0_PADDING_VAL[7:0];
		r_CH1_PADDING_VAL[7:0]	<= r_CH1_PADDING_VAL[7:0];
		r_CH2_PADDING_VAL[7:0]	<= r_CH2_PADDING_VAL[7:0];
	end
end

// output assign for SPA_RX_PADDING_VAL_REG
assign o_CH0_PADDING_VAL[7:0]	= r_CH0_PADDING_VAL[7:0];
assign o_CH1_PADDING_VAL[7:0]	= r_CH1_PADDING_VAL[7:0];
assign o_CH2_PADDING_VAL[7:0]	= r_CH2_PADDING_VAL[7:0];


// SPA_VERSION_REG register

// output assign for SPA_VERSION_REG
assign o_VERSION[31:0]	= 32'h0 /* add logic */ ;


// SPA_IRQ_ENABLE_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_RX_BAND_START_EN[0:0]	<= 1`h0;
		r_RX_BAND_END_EN[0:0]	<= 1`h0;
		r_TX_BAND_START_EN[0:0]	<= 1`h0;
		r_BAND_END_EN[0:0]	<= 1`h0;
		r_PAGE_END_EN[0:0]	<= 1`h0;
		r_ABS_DETECT_DONE_EN[0:0]	<= 1`h0;
		r_ADAPT_TX_END_EN[0:0]	<= 1`h0;
		r_SMAP_TX_END_EN[0:0]	<= 1`h0;
		r_SW_RESET_DONE[0:0]	<= 1`h0;
		r_TX_ERR[0:0]	<= 1`h0;
		r_DTX_ADAPT_START_EN[0:0]	<= 1`h0;
		r_DTX_SMAP_START_EN[0:0]	<= 1`h0;
		r_DMA_TX_ADDR_ERR_CH0[0:0]	<= 1`h0;
		r_DMA_TX_ADDR_ERR_CH1[0:0]	<= 1`h0;
		r_DMA_TX_ADDR_ERR_CH2[0:0]	<= 1`h0;
		r_MAGD_DONE[0:0]	<= 1`h0;
		r_CLA_DONE[0:0]	<= 1`h0;
		r_ADAPT_TX_ADDR_ERR_EN[0:0]	<= 1`h0;
		r_SMAP_TX_ADDR_ERR_EN[0:0]	<= 1`h0;
		r_TBL_DMA_END[0:0]	<= 1`h0;
		r_TX_YD_ERR[0:0]	<= 1`h0;
		r_RX_ERR[0:0]	<= 1`h0;
		r_BDS_TX_END_EN[0:0]	<= 1`h0;
		r_DTX_BDS_START_EN[0:0]	<= 1`h0;
		r_BDS_TX_ADDR_ERR_EN[0:0]	<= 1`h0;
		r_ORI_DONE[0:0]	<= 1`h0;
		r_nABSD_DETECT_DONE[0:0]	<= 1`h0;
		r_ACBD_DETECT_DONE[0:0]	<= 1`h0;
		r_ACS_DONE[0:0]	<= 1`h0;
		r_VSD_DONE[0:0]	<= 1`h0;
		r_TX_CH_START_ERR_EN[0:0]	<= 1`h0;
		r_TX_PAGE_END[0:0]	<= 1`h0;
	end
	else if (w_addr0030_wr) begin
		r_RX_BAND_START_EN[0:0]	<= i_PWDATA[0:0];
		r_RX_BAND_END_EN[0:0]	<= i_PWDATA[1:1];
		r_TX_BAND_START_EN[0:0]	<= i_PWDATA[2:2];
		r_BAND_END_EN[0:0]	<= i_PWDATA[3:3];
		r_PAGE_END_EN[0:0]	<= i_PWDATA[4:4];
		r_ABS_DETECT_DONE_EN[0:0]	<= i_PWDATA[5:5];
		r_ADAPT_TX_END_EN[0:0]	<= i_PWDATA[6:6];
		r_SMAP_TX_END_EN[0:0]	<= i_PWDATA[7:7];
		r_SW_RESET_DONE[0:0]	<= i_PWDATA[8:8];
		r_TX_ERR[0:0]	<= i_PWDATA[9:9];
		r_DTX_ADAPT_START_EN[0:0]	<= i_PWDATA[10:10];
		r_DTX_SMAP_START_EN[0:0]	<= i_PWDATA[11:11];
		r_DMA_TX_ADDR_ERR_CH0[0:0]	<= i_PWDATA[12:12];
		r_DMA_TX_ADDR_ERR_CH1[0:0]	<= i_PWDATA[13:13];
		r_DMA_TX_ADDR_ERR_CH2[0:0]	<= i_PWDATA[14:14];
		r_MAGD_DONE[0:0]	<= i_PWDATA[15:15];
		r_CLA_DONE[0:0]	<= i_PWDATA[16:16];
		r_ADAPT_TX_ADDR_ERR_EN[0:0]	<= i_PWDATA[17:17];
		r_SMAP_TX_ADDR_ERR_EN[0:0]	<= i_PWDATA[18:18];
		r_TBL_DMA_END[0:0]	<= i_PWDATA[19:19];
		r_TX_YD_ERR[0:0]	<= i_PWDATA[20:20];
		r_RX_ERR[0:0]	<= i_PWDATA[21:21];
		r_BDS_TX_END_EN[0:0]	<= i_PWDATA[22:22];
		r_DTX_BDS_START_EN[0:0]	<= i_PWDATA[23:23];
		r_BDS_TX_ADDR_ERR_EN[0:0]	<= i_PWDATA[24:24];
		r_ORI_DONE[0:0]	<= i_PWDATA[25:25];
		r_nABSD_DETECT_DONE[0:0]	<= i_PWDATA[26:26];
		r_ACBD_DETECT_DONE[0:0]	<= i_PWDATA[27:27];
		r_ACS_DONE[0:0]	<= i_PWDATA[28:28];
		r_VSD_DONE[0:0]	<= i_PWDATA[29:29];
		r_TX_CH_START_ERR_EN[0:0]	<= i_PWDATA[30:30];
		r_TX_PAGE_END[0:0]	<= i_PWDATA[31:31];
	end
	else begin
		r_RX_BAND_START_EN[0:0]	<= r_RX_BAND_START_EN[0:0];
		r_RX_BAND_END_EN[0:0]	<= r_RX_BAND_END_EN[0:0];
		r_TX_BAND_START_EN[0:0]	<= r_TX_BAND_START_EN[0:0];
		r_BAND_END_EN[0:0]	<= r_BAND_END_EN[0:0];
		r_PAGE_END_EN[0:0]	<= r_PAGE_END_EN[0:0];
		r_ABS_DETECT_DONE_EN[0:0]	<= r_ABS_DETECT_DONE_EN[0:0];
		r_ADAPT_TX_END_EN[0:0]	<= r_ADAPT_TX_END_EN[0:0];
		r_SMAP_TX_END_EN[0:0]	<= r_SMAP_TX_END_EN[0:0];
		r_SW_RESET_DONE[0:0]	<= r_SW_RESET_DONE[0:0];
		r_TX_ERR[0:0]	<= r_TX_ERR[0:0];
		r_DTX_ADAPT_START_EN[0:0]	<= r_DTX_ADAPT_START_EN[0:0];
		r_DTX_SMAP_START_EN[0:0]	<= r_DTX_SMAP_START_EN[0:0];
		r_DMA_TX_ADDR_ERR_CH0[0:0]	<= r_DMA_TX_ADDR_ERR_CH0[0:0];
		r_DMA_TX_ADDR_ERR_CH1[0:0]	<= r_DMA_TX_ADDR_ERR_CH1[0:0];
		r_DMA_TX_ADDR_ERR_CH2[0:0]	<= r_DMA_TX_ADDR_ERR_CH2[0:0];
		r_MAGD_DONE[0:0]	<= r_MAGD_DONE[0:0];
		r_CLA_DONE[0:0]	<= r_CLA_DONE[0:0];
		r_ADAPT_TX_ADDR_ERR_EN[0:0]	<= r_ADAPT_TX_ADDR_ERR_EN[0:0];
		r_SMAP_TX_ADDR_ERR_EN[0:0]	<= r_SMAP_TX_ADDR_ERR_EN[0:0];
		r_TBL_DMA_END[0:0]	<= r_TBL_DMA_END[0:0];
		r_TX_YD_ERR[0:0]	<= r_TX_YD_ERR[0:0];
		r_RX_ERR[0:0]	<= r_RX_ERR[0:0];
		r_BDS_TX_END_EN[0:0]	<= r_BDS_TX_END_EN[0:0];
		r_DTX_BDS_START_EN[0:0]	<= r_DTX_BDS_START_EN[0:0];
		r_BDS_TX_ADDR_ERR_EN[0:0]	<= r_BDS_TX_ADDR_ERR_EN[0:0];
		r_ORI_DONE[0:0]	<= r_ORI_DONE[0:0];
		r_nABSD_DETECT_DONE[0:0]	<= r_nABSD_DETECT_DONE[0:0];
		r_ACBD_DETECT_DONE[0:0]	<= r_ACBD_DETECT_DONE[0:0];
		r_ACS_DONE[0:0]	<= r_ACS_DONE[0:0];
		r_VSD_DONE[0:0]	<= r_VSD_DONE[0:0];
		r_TX_CH_START_ERR_EN[0:0]	<= r_TX_CH_START_ERR_EN[0:0];
		r_TX_PAGE_END[0:0]	<= r_TX_PAGE_END[0:0];
	end
end

// output assign for SPA_IRQ_ENABLE_REG
assign o_RX_BAND_START_EN[0:0]	= r_RX_BAND_START_EN[0:0];
assign o_RX_BAND_END_EN[0:0]	= r_RX_BAND_END_EN[0:0];
assign o_TX_BAND_START_EN[0:0]	= r_TX_BAND_START_EN[0:0];
assign o_BAND_END_EN[0:0]	= r_BAND_END_EN[0:0];
assign o_PAGE_END_EN[0:0]	= r_PAGE_END_EN[0:0];
assign o_ABS_DETECT_DONE_EN[0:0]	= r_ABS_DETECT_DONE_EN[0:0];
assign o_ADAPT_TX_END_EN[0:0]	= r_ADAPT_TX_END_EN[0:0];
assign o_SMAP_TX_END_EN[0:0]	= r_SMAP_TX_END_EN[0:0];
assign o_SW_RESET_DONE[0:0]	= r_SW_RESET_DONE[0:0];
assign o_TX_ERR[0:0]	= r_TX_ERR[0:0];
assign o_DTX_ADAPT_START_EN[0:0]	= r_DTX_ADAPT_START_EN[0:0];
assign o_DTX_SMAP_START_EN[0:0]	= r_DTX_SMAP_START_EN[0:0];
assign o_DMA_TX_ADDR_ERR_CH0[0:0]	= r_DMA_TX_ADDR_ERR_CH0[0:0];
assign o_DMA_TX_ADDR_ERR_CH1[0:0]	= r_DMA_TX_ADDR_ERR_CH1[0:0];
assign o_DMA_TX_ADDR_ERR_CH2[0:0]	= r_DMA_TX_ADDR_ERR_CH2[0:0];
assign o_MAGD_DONE[0:0]	= r_MAGD_DONE[0:0];
assign o_CLA_DONE[0:0]	= r_CLA_DONE[0:0];
assign o_ADAPT_TX_ADDR_ERR_EN[0:0]	= r_ADAPT_TX_ADDR_ERR_EN[0:0];
assign o_SMAP_TX_ADDR_ERR_EN[0:0]	= r_SMAP_TX_ADDR_ERR_EN[0:0];
assign o_TBL_DMA_END[0:0]	= r_TBL_DMA_END[0:0];
assign o_TX_YD_ERR[0:0]	= r_TX_YD_ERR[0:0];
assign o_RX_ERR[0:0]	= r_RX_ERR[0:0];
assign o_BDS_TX_END_EN[0:0]	= r_BDS_TX_END_EN[0:0];
assign o_DTX_BDS_START_EN[0:0]	= r_DTX_BDS_START_EN[0:0];
assign o_BDS_TX_ADDR_ERR_EN[0:0]	= r_BDS_TX_ADDR_ERR_EN[0:0];
assign o_ORI_DONE[0:0]	= r_ORI_DONE[0:0];
assign o_nABSD_DETECT_DONE[0:0]	= r_nABSD_DETECT_DONE[0:0];
assign o_ACBD_DETECT_DONE[0:0]	= r_ACBD_DETECT_DONE[0:0];
assign o_ACS_DONE[0:0]	= r_ACS_DONE[0:0];
assign o_VSD_DONE[0:0]	= r_VSD_DONE[0:0];
assign o_TX_CH_START_ERR_EN[0:0]	= r_TX_CH_START_ERR_EN[0:0];
assign o_TX_PAGE_END[0:0]	= r_TX_PAGE_END[0:0];


// SPA_IRQ_PEND_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_RX_BAND_START[0:0]	<= 1`h0;
		r_RX_BAND_END[0:0]	<= 1`h0;
		r_TX_BAND_START[0:0]	<= 1`h0;
		r_BAND_END[0:0]	<= 1`h0;
		r_PAGE_END[0:0]	<= 1`h0;
		r_ABSD_DETECT_END[0:0]	<= 1`h0;
		r_ADAPT_TX_END[0:0]	<= 1`h0;
		r_SMAP_TX_END[0:0]	<= 1`h0;
		r_DMA_STOP_DONE[0:0]	<= 1`h0;
		r_TX_ERR[0:0]	<= 1`h0;
		r_DTX_ADAPT_START_ERR[0:0]	<= 1`h0;
		r_DTX_SMAP_START_ERR[0:0]	<= 1`h0;
		r_DMA_TX_ADDR_ERR_CH0[0:0]	<= 1`h0;
		r_DMA_TX_ADDR_ERR_CH1[0:0]	<= 1`h0;
		r_DMA_TX_ADDR_ERR_CH2[0:0]	<= 1`h0;
		r_MAGD_DONE[0:0]	<= 1`h0;
		r_CLA_DONE[0:0]	<= 1`h0;
		r_ADAPT_TX_ADDR_ERR[0:0]	<= 1`h0;
		r_SMAP_TX_ADDR_ERR[0:0]	<= 1`h0;
		r_TBL_DMA_END[0:0]	<= 1`h0;
		r_TX_YD_ERR[0:0]	<= 1`h0;
		r_RX_ERR[0:0]	<= 1`h0;
		r_BDS_TX_END[0:0]	<= 1`h0;
		r_DTX_BDS_START_ERR[0:0]	<= 1`h0;
		r_BDS_TX_ADDR_ERR[0:0]	<= 1`h0;
		r_ORI_DONE[0:0]	<= 1`h0;
		r_nABSD_DETECT_DONE[0:0]	<= 1`h0;
		r_ACBD_DETECT_DONE[0:0]	<= 1`h0;
		r_ACS_DONE[0:0]	<= 1`h0;
		r_VSD_DONE[0:0]	<= 1`h0;
		r_TX_CH_START_ERR[0:0]	<= 1`h0;
		r_TX_PAGE_END[0:0]	<= 1`h0;
	end
	else if (w_addr0034_wr) begin
		r_RX_BAND_START[0:0]	<= i_PWDATA[0:0];
		r_RX_BAND_END[0:0]	<= i_PWDATA[1:1];
		r_TX_BAND_START[0:0]	<= i_PWDATA[2:2];
		r_BAND_END[0:0]	<= i_PWDATA[3:3];
		r_PAGE_END[0:0]	<= i_PWDATA[4:4];
		r_ABSD_DETECT_END[0:0]	<= i_PWDATA[5:5];
		r_ADAPT_TX_END[0:0]	<= i_PWDATA[6:6];
		r_SMAP_TX_END[0:0]	<= i_PWDATA[7:7];
		r_DMA_STOP_DONE[0:0]	<= i_PWDATA[8:8];
		r_TX_ERR[0:0]	<= i_PWDATA[9:9];
		r_DTX_ADAPT_START_ERR[0:0]	<= i_PWDATA[10:10];
		r_DTX_SMAP_START_ERR[0:0]	<= i_PWDATA[11:11];
		r_DMA_TX_ADDR_ERR_CH0[0:0]	<= i_PWDATA[12:12];
		r_DMA_TX_ADDR_ERR_CH1[0:0]	<= i_PWDATA[13:13];
		r_DMA_TX_ADDR_ERR_CH2[0:0]	<= i_PWDATA[14:14];
		r_MAGD_DONE[0:0]	<= i_PWDATA[15:15];
		r_CLA_DONE[0:0]	<= i_PWDATA[16:16];
		r_ADAPT_TX_ADDR_ERR[0:0]	<= i_PWDATA[17:17];
		r_SMAP_TX_ADDR_ERR[0:0]	<= i_PWDATA[18:18];
		r_TBL_DMA_END[0:0]	<= i_PWDATA[19:19];
		r_TX_YD_ERR[0:0]	<= i_PWDATA[20:20];
		r_RX_ERR[0:0]	<= i_PWDATA[21:21];
		r_BDS_TX_END[0:0]	<= i_PWDATA[22:22];
		r_DTX_BDS_START_ERR[0:0]	<= i_PWDATA[23:23];
		r_BDS_TX_ADDR_ERR[0:0]	<= i_PWDATA[24:24];
		r_ORI_DONE[0:0]	<= i_PWDATA[25:25];
		r_nABSD_DETECT_DONE[0:0]	<= i_PWDATA[26:26];
		r_ACBD_DETECT_DONE[0:0]	<= i_PWDATA[27:27];
		r_ACS_DONE[0:0]	<= i_PWDATA[28:28];
		r_VSD_DONE[0:0]	<= i_PWDATA[29:29];
		r_TX_CH_START_ERR[0:0]	<= i_PWDATA[30:30];
		r_TX_PAGE_END[0:0]	<= i_PWDATA[31:31];
	end
	else begin
		r_RX_BAND_START[0:0]	<= r_RX_BAND_START[0:0];
		r_RX_BAND_END[0:0]	<= r_RX_BAND_END[0:0];
		r_TX_BAND_START[0:0]	<= r_TX_BAND_START[0:0];
		r_BAND_END[0:0]	<= r_BAND_END[0:0];
		r_PAGE_END[0:0]	<= r_PAGE_END[0:0];
		r_ABSD_DETECT_END[0:0]	<= r_ABSD_DETECT_END[0:0];
		r_ADAPT_TX_END[0:0]	<= r_ADAPT_TX_END[0:0];
		r_SMAP_TX_END[0:0]	<= r_SMAP_TX_END[0:0];
		r_DMA_STOP_DONE[0:0]	<= r_DMA_STOP_DONE[0:0];
		r_TX_ERR[0:0]	<= r_TX_ERR[0:0];
		r_DTX_ADAPT_START_ERR[0:0]	<= r_DTX_ADAPT_START_ERR[0:0];
		r_DTX_SMAP_START_ERR[0:0]	<= r_DTX_SMAP_START_ERR[0:0];
		r_DMA_TX_ADDR_ERR_CH0[0:0]	<= r_DMA_TX_ADDR_ERR_CH0[0:0];
		r_DMA_TX_ADDR_ERR_CH1[0:0]	<= r_DMA_TX_ADDR_ERR_CH1[0:0];
		r_DMA_TX_ADDR_ERR_CH2[0:0]	<= r_DMA_TX_ADDR_ERR_CH2[0:0];
		r_MAGD_DONE[0:0]	<= r_MAGD_DONE[0:0];
		r_CLA_DONE[0:0]	<= r_CLA_DONE[0:0];
		r_ADAPT_TX_ADDR_ERR[0:0]	<= r_ADAPT_TX_ADDR_ERR[0:0];
		r_SMAP_TX_ADDR_ERR[0:0]	<= r_SMAP_TX_ADDR_ERR[0:0];
		r_TBL_DMA_END[0:0]	<= r_TBL_DMA_END[0:0];
		r_TX_YD_ERR[0:0]	<= r_TX_YD_ERR[0:0];
		r_RX_ERR[0:0]	<= r_RX_ERR[0:0];
		r_BDS_TX_END[0:0]	<= r_BDS_TX_END[0:0];
		r_DTX_BDS_START_ERR[0:0]	<= r_DTX_BDS_START_ERR[0:0];
		r_BDS_TX_ADDR_ERR[0:0]	<= r_BDS_TX_ADDR_ERR[0:0];
		r_ORI_DONE[0:0]	<= r_ORI_DONE[0:0];
		r_nABSD_DETECT_DONE[0:0]	<= r_nABSD_DETECT_DONE[0:0];
		r_ACBD_DETECT_DONE[0:0]	<= r_ACBD_DETECT_DONE[0:0];
		r_ACS_DONE[0:0]	<= r_ACS_DONE[0:0];
		r_VSD_DONE[0:0]	<= r_VSD_DONE[0:0];
		r_TX_CH_START_ERR[0:0]	<= r_TX_CH_START_ERR[0:0];
		r_TX_PAGE_END[0:0]	<= r_TX_PAGE_END[0:0];
	end
end

// output assign for SPA_IRQ_PEND_REG
assign o_RX_BAND_START[0:0]	= r_RX_BAND_START[0:0];
assign o_RX_BAND_END[0:0]	= r_RX_BAND_END[0:0];
assign o_TX_BAND_START[0:0]	= r_TX_BAND_START[0:0];
assign o_BAND_END[0:0]	= r_BAND_END[0:0];
assign o_PAGE_END[0:0]	= r_PAGE_END[0:0];
assign o_ABSD_DETECT_END[0:0]	= r_ABSD_DETECT_END[0:0];
assign o_ADAPT_TX_END[0:0]	= r_ADAPT_TX_END[0:0];
assign o_SMAP_TX_END[0:0]	= r_SMAP_TX_END[0:0];
assign o_DMA_STOP_DONE[0:0]	= r_DMA_STOP_DONE[0:0];
assign o_TX_ERR[0:0]	= r_TX_ERR[0:0];
assign o_DTX_ADAPT_START_ERR[0:0]	= r_DTX_ADAPT_START_ERR[0:0];
assign o_DTX_SMAP_START_ERR[0:0]	= r_DTX_SMAP_START_ERR[0:0];
assign o_DMA_TX_ADDR_ERR_CH0[0:0]	= r_DMA_TX_ADDR_ERR_CH0[0:0];
assign o_DMA_TX_ADDR_ERR_CH1[0:0]	= r_DMA_TX_ADDR_ERR_CH1[0:0];
assign o_DMA_TX_ADDR_ERR_CH2[0:0]	= r_DMA_TX_ADDR_ERR_CH2[0:0];
assign o_MAGD_DONE[0:0]	= r_MAGD_DONE[0:0];
assign o_CLA_DONE[0:0]	= r_CLA_DONE[0:0];
assign o_ADAPT_TX_ADDR_ERR[0:0]	= r_ADAPT_TX_ADDR_ERR[0:0];
assign o_SMAP_TX_ADDR_ERR[0:0]	= r_SMAP_TX_ADDR_ERR[0:0];
assign o_TBL_DMA_END[0:0]	= r_TBL_DMA_END[0:0];
assign o_TX_YD_ERR[0:0]	= r_TX_YD_ERR[0:0];
assign o_RX_ERR[0:0]	= r_RX_ERR[0:0];
assign o_BDS_TX_END[0:0]	= r_BDS_TX_END[0:0];
assign o_DTX_BDS_START_ERR[0:0]	= r_DTX_BDS_START_ERR[0:0];
assign o_BDS_TX_ADDR_ERR[0:0]	= r_BDS_TX_ADDR_ERR[0:0];
assign o_ORI_DONE[0:0]	= r_ORI_DONE[0:0];
assign o_nABSD_DETECT_DONE[0:0]	= r_nABSD_DETECT_DONE[0:0];
assign o_ACBD_DETECT_DONE[0:0]	= r_ACBD_DETECT_DONE[0:0];
assign o_ACS_DONE[0:0]	= r_ACS_DONE[0:0];
assign o_VSD_DONE[0:0]	= r_VSD_DONE[0:0];
assign o_TX_CH_START_ERR[0:0]	= r_TX_CH_START_ERR[0:0];
assign o_TX_PAGE_END[0:0]	= r_TX_PAGE_END[0:0];


// SPA_IRQ_SVC_CNT_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_IRQ_SVC_CNT[31:0]	<= 32`h00000000;
	end
	else if (w_addr0038_wr) begin
		r_IRQ_SVC_CNT[31:0]	<= i_PWDATA[31:0];
	end
	else begin
		r_IRQ_SVC_CNT[31:0]	<= r_IRQ_SVC_CNT[31:0];
	end
end

// output assign for SPA_IRQ_SVC_CNT_REG
assign o_IRQ_SVC_CNT[31:0]	= r_IRQ_SVC_CNT[31:0];


// SPA_RAM_SW_MODE_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_RAM_SW_MODE[0:0]	<= 1`h0;
	end
	else if (w_addr003c_wr) begin
		r_RAM_SW_MODE[0:0]	<= i_PWDATA[0:0];
	end
	else begin
		r_RAM_SW_MODE[0:0]	<= r_RAM_SW_MODE[0:0];
	end
end

// output assign for SPA_RAM_SW_MODE_REG
assign o_RAM_SW_MODE[0:0]	= r_RAM_SW_MODE[0:0];


// SPA_RAM_CS_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_RAM_CS_00[0:0]	<= 1`h0;
		r_RAM_CS_01[0:0]	<= 1`h0;
		r_RAM_CS_02[0:0]	<= 1`h0;
		r_RAM_CS_03[0:0]	<= 1`h0;
		r_RAM_CS_04[0:0]	<= 1`h0;
		r_RAM_CS_05[0:0]	<= 1`h0;
		r_RAM_CS_06[0:0]	<= 1`h0;
		r_RAM_CS_07[0:0]	<= 1`h0;
		r_RAM_CS_08[0:0]	<= 1`h0;
		r_RAM_CS_09[0:0]	<= 1`h0;
		r_RAM_CS_10[0:0]	<= 1`h0;
		r_RAM_CS_11[0:0]	<= 1`h0;
		r_RAM_CS_12[0:0]	<= 1`h0;
		r_RAM_CS_13[0:0]	<= 1`h0;
		r_RAM_CS_14[0:0]	<= 1`h0;
		r_RAM_CS_15[0:0]	<= 1`h0;
		r_RAM_CS_16[0:0]	<= 1`h0;
		r_RAM_CS_17[0:0]	<= 1`h0;
		r_RAM_CS_18[0:0]	<= 1`h0;
		r_RAM_CS_19[0:0]	<= 1`h0;
		r_RAM_CS_20[0:0]	<= 1`h0;
		r_RAM_CS_21[0:0]	<= 1`h0;
		r_RAM_CS_22[0:0]	<= 1`h0;
		r_RAM_CS_23[0:0]	<= 1`h0;
		r_RAM_CS_24[0:0]	<= 1`h0;
	end
	else if (w_addr0040_wr) begin
		r_RAM_CS_00[0:0]	<= i_PWDATA[0:0];
		r_RAM_CS_01[0:0]	<= i_PWDATA[1:1];
		r_RAM_CS_02[0:0]	<= i_PWDATA[2:2];
		r_RAM_CS_03[0:0]	<= i_PWDATA[3:3];
		r_RAM_CS_04[0:0]	<= i_PWDATA[4:4];
		r_RAM_CS_05[0:0]	<= i_PWDATA[5:5];
		r_RAM_CS_06[0:0]	<= i_PWDATA[6:6];
		r_RAM_CS_07[0:0]	<= i_PWDATA[7:7];
		r_RAM_CS_08[0:0]	<= i_PWDATA[8:8];
		r_RAM_CS_09[0:0]	<= i_PWDATA[9:9];
		r_RAM_CS_10[0:0]	<= i_PWDATA[10:10];
		r_RAM_CS_11[0:0]	<= i_PWDATA[11:11];
		r_RAM_CS_12[0:0]	<= i_PWDATA[12:12];
		r_RAM_CS_13[0:0]	<= i_PWDATA[13:13];
		r_RAM_CS_14[0:0]	<= i_PWDATA[14:14];
		r_RAM_CS_15[0:0]	<= i_PWDATA[15:15];
		r_RAM_CS_16[0:0]	<= i_PWDATA[16:16];
		r_RAM_CS_17[0:0]	<= i_PWDATA[17:17];
		r_RAM_CS_18[0:0]	<= i_PWDATA[18:18];
		r_RAM_CS_19[0:0]	<= i_PWDATA[19:19];
		r_RAM_CS_20[0:0]	<= i_PWDATA[20:20];
		r_RAM_CS_21[0:0]	<= i_PWDATA[21:21];
		r_RAM_CS_22[0:0]	<= i_PWDATA[22:22];
		r_RAM_CS_23[0:0]	<= i_PWDATA[23:23];
		r_RAM_CS_24[0:0]	<= i_PWDATA[24:24];
	end
	else begin
		r_RAM_CS_00[0:0]	<= r_RAM_CS_00[0:0];
		r_RAM_CS_01[0:0]	<= r_RAM_CS_01[0:0];
		r_RAM_CS_02[0:0]	<= r_RAM_CS_02[0:0];
		r_RAM_CS_03[0:0]	<= r_RAM_CS_03[0:0];
		r_RAM_CS_04[0:0]	<= r_RAM_CS_04[0:0];
		r_RAM_CS_05[0:0]	<= r_RAM_CS_05[0:0];
		r_RAM_CS_06[0:0]	<= r_RAM_CS_06[0:0];
		r_RAM_CS_07[0:0]	<= r_RAM_CS_07[0:0];
		r_RAM_CS_08[0:0]	<= r_RAM_CS_08[0:0];
		r_RAM_CS_09[0:0]	<= r_RAM_CS_09[0:0];
		r_RAM_CS_10[0:0]	<= r_RAM_CS_10[0:0];
		r_RAM_CS_11[0:0]	<= r_RAM_CS_11[0:0];
		r_RAM_CS_12[0:0]	<= r_RAM_CS_12[0:0];
		r_RAM_CS_13[0:0]	<= r_RAM_CS_13[0:0];
		r_RAM_CS_14[0:0]	<= r_RAM_CS_14[0:0];
		r_RAM_CS_15[0:0]	<= r_RAM_CS_15[0:0];
		r_RAM_CS_16[0:0]	<= r_RAM_CS_16[0:0];
		r_RAM_CS_17[0:0]	<= r_RAM_CS_17[0:0];
		r_RAM_CS_18[0:0]	<= r_RAM_CS_18[0:0];
		r_RAM_CS_19[0:0]	<= r_RAM_CS_19[0:0];
		r_RAM_CS_20[0:0]	<= r_RAM_CS_20[0:0];
		r_RAM_CS_21[0:0]	<= r_RAM_CS_21[0:0];
		r_RAM_CS_22[0:0]	<= r_RAM_CS_22[0:0];
		r_RAM_CS_23[0:0]	<= r_RAM_CS_23[0:0];
		r_RAM_CS_24[0:0]	<= r_RAM_CS_24[0:0];
	end
end

// output assign for SPA_RAM_CS_REG
assign o_RAM_CS_00[0:0]	= r_RAM_CS_00[0:0];
assign o_RAM_CS_01[0:0]	= r_RAM_CS_01[0:0];
assign o_RAM_CS_02[0:0]	= r_RAM_CS_02[0:0];
assign o_RAM_CS_03[0:0]	= r_RAM_CS_03[0:0];
assign o_RAM_CS_04[0:0]	= r_RAM_CS_04[0:0];
assign o_RAM_CS_05[0:0]	= r_RAM_CS_05[0:0];
assign o_RAM_CS_06[0:0]	= r_RAM_CS_06[0:0];
assign o_RAM_CS_07[0:0]	= r_RAM_CS_07[0:0];
assign o_RAM_CS_08[0:0]	= r_RAM_CS_08[0:0];
assign o_RAM_CS_09[0:0]	= r_RAM_CS_09[0:0];
assign o_RAM_CS_10[0:0]	= r_RAM_CS_10[0:0];
assign o_RAM_CS_11[0:0]	= r_RAM_CS_11[0:0];
assign o_RAM_CS_12[0:0]	= r_RAM_CS_12[0:0];
assign o_RAM_CS_13[0:0]	= r_RAM_CS_13[0:0];
assign o_RAM_CS_14[0:0]	= r_RAM_CS_14[0:0];
assign o_RAM_CS_15[0:0]	= r_RAM_CS_15[0:0];
assign o_RAM_CS_16[0:0]	= r_RAM_CS_16[0:0];
assign o_RAM_CS_17[0:0]	= r_RAM_CS_17[0:0];
assign o_RAM_CS_18[0:0]	= r_RAM_CS_18[0:0];
assign o_RAM_CS_19[0:0]	= r_RAM_CS_19[0:0];
assign o_RAM_CS_20[0:0]	= r_RAM_CS_20[0:0];
assign o_RAM_CS_21[0:0]	= r_RAM_CS_21[0:0];
assign o_RAM_CS_22[0:0]	= r_RAM_CS_22[0:0];
assign o_RAM_CS_23[0:0]	= r_RAM_CS_23[0:0];
assign o_RAM_CS_24[0:0]	= r_RAM_CS_24[0:0];


// SPA_RAM_DATA_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_RAM_DATA[31:0]	<= 32`h00000000;
	end
	else if (w_addr0048_wr) begin
		r_RAM_DATA[31:0]	<= i_PWDATA[31:0];
	end
	else begin
		r_RAM_DATA[31:0]	<= r_RAM_DATA[31:0];
	end
end

// output assign for SPA_RAM_DATA_REG
assign o_RAM_DATA[31:0]	= r_RAM_DATA[31:0];


// SPA_RAM_ADDR_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_RAM_ADDR[31:0]	<= 32`h00000000;
	end
	else if (w_addr004c_wr) begin
		r_RAM_ADDR[31:0]	<= i_PWDATA[31:0];
	end
	else begin
		r_RAM_ADDR[31:0]	<= r_RAM_ADDR[31:0];
	end
end

// output assign for SPA_RAM_ADDR_REG
assign o_RAM_ADDR[31:0]	= r_RAM_ADDR[31:0];


// SPA_CORE_BAND_DONE_REG register

// output assign for SPA_CORE_BAND_DONE_REG
assign o_ALL_BAND_DONE[0:0]	= 1'h0 /* add logic */ ;
assign o_SEG2_BAND_DONE[0:0]	= 1'h0 /* add logic */ ;
assign o_SCC_BAND_DONE[0:0]	= 1'h0 /* add logic */ ;
assign o_SEG1_BAND_DONE[0:0]	= 1'h0 /* add logic */ ;
assign o_BSSB_BAND_DONE[0:0]	= 1'h0 /* add logic */ ;
assign o_S1D_BAND_DONE[0:0]	= 1'h0 /* add logic */ ;
assign o_RC1_BAND_DONE[0:0]	= 1'h0 /* add logic */ ;
assign o_CIS_BAND_DONE[0:0]	= 1'h0 /* add logic */ ;
assign o_VSD_BAND_DONE[0:0]	= 1'h0 /* add logic */ ;


// SPA_CORE_PAGE_DONE_REG register

// output assign for SPA_CORE_PAGE_DONE_REG
assign o_ALL_PAGE_DONE[0:0]	= 1'h0 /* add logic */ ;
assign o_SEG2_PAGE_DONE[0:0]	= 1'h0 /* add logic */ ;
assign o_SCC_PAGE_DONE[0:0]	= 1'h0 /* add logic */ ;
assign o_SEG1_PAGE_DONE[0:0]	= 1'h0 /* add logic */ ;
assign o_BSSB_PAGE_DONE[0:0]	= 1'h0 /* add logic */ ;
assign o_S1D_PAGE_END[0:0]	= 1'h0 /* add logic */ ;
assign o_RC1_PAGE_DONE[0:0]	= 1'h0 /* add logic */ ;
assign o_CIS_PAGE_DONE[0:0]	= 1'h0 /* add logic */ ;
assign o_VSD_PAGE_DONE[0:0]	= 1'h0 /* add logic */ ;


// SPA_TBL_RX_CNT_REG register

// output assign for SPA_TBL_RX_CNT_REG
assign o_TBL_RX_END_CNT[15:0]	= 16'h0 /* add logic */ ;
assign o_TBL_RX_START_CNT[15:0]	= 16'h0 /* add logic */ ;


// SPA_TBL_TX_CNT_REG register

// output assign for SPA_TBL_TX_CNT_REG
assign o_TBL_TX_END_CNT[15:0]	= 16'h0 /* add logic */ ;
assign o_TBL_TX_START_CNT[15:0]	= 16'h0 /* add logic */ ;


// SPA_TBL_END_STATUS1_REG register

// output assign for SPA_TBL_END_STATUS1_REG
assign o_TBL_END_STATUS1[29:0]	= 30'h0 /* add logic */ ;


// SPA_TBL_START_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_TBL_START[0:0]	<= 1`h0;
		r_TBL_RW[0:0]	<= 1`h0;
	end
	else if (w_addr0080_wr) begin
		r_TBL_START[0:0]	<= i_PWDATA[0:0];
		r_TBL_RW[0:0]	<= i_PWDATA[8:8];
	end
	else begin
		r_TBL_START[0:0]	<= r_TBL_START[0:0];
		r_TBL_RW[0:0]	<= r_TBL_RW[0:0];
	end
end

// output assign for SPA_TBL_START_REG
assign o_TBL_START[0:0]	= r_TBL_START[0:0];
assign o_TBL_RW[0:0]	= r_TBL_RW[0:0];


// SPA_TBL_ENABLE_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_TBL_ENABLE00[0:0]	<= 1`h0;
		r_TBL_ENABLE01[0:0]	<= 1`h0;
		r_TBL_ENABLE02[0:0]	<= 1`h0;
		r_TBL_ENABLE03[0:0]	<= 1`h0;
		r_TBL_ENABLE04[0:0]	<= 1`h0;
		r_TBL_ENABLE05[0:0]	<= 1`h0;
		r_TBL_ENABLE06[0:0]	<= 1`h0;
		r_TBL_ENABLE07[0:0]	<= 1`h0;
		r_TBL_ENABLE08[0:0]	<= 1`h0;
		r_TBL_ENABLE09[0:0]	<= 1`h0;
		r_TBL_ENABLE10[0:0]	<= 1`h0;
		r_TBL_ENABLE11[0:0]	<= 1`h0;
		r_TBL_ENABLE12[0:0]	<= 1`h0;
		r_TBL_ENABLE13[0:0]	<= 1`h0;
		r_TBL_ENABLE14[0:0]	<= 1`h0;
		r_TBL_ENABLE15[0:0]	<= 1`h0;
		r_TBL_ENABLE16[0:0]	<= 1`h0;
		r_TBL_ENABLE17[0:0]	<= 1`h0;
		r_TBL_ENABLE18[0:0]	<= 1`h0;
		r_TBL_ENABLE19[0:0]	<= 1`h0;
		r_TBL_ENABLE20[0:0]	<= 1`h0;
		r_TBL_ENABLE21[0:0]	<= 1`h0;
		r_TBL_ENABLE22[0:0]	<= 1`h0;
		r_TBL_ENABLE23[0:0]	<= 1`h0;
		r_TBL_ENABLE24[0:0]	<= 1`h0;
	end
	else if (w_addr0084_wr) begin
		r_TBL_ENABLE00[0:0]	<= i_PWDATA[0:0];
		r_TBL_ENABLE01[0:0]	<= i_PWDATA[1:1];
		r_TBL_ENABLE02[0:0]	<= i_PWDATA[2:2];
		r_TBL_ENABLE03[0:0]	<= i_PWDATA[3:3];
		r_TBL_ENABLE04[0:0]	<= i_PWDATA[4:4];
		r_TBL_ENABLE05[0:0]	<= i_PWDATA[5:5];
		r_TBL_ENABLE06[0:0]	<= i_PWDATA[6:6];
		r_TBL_ENABLE07[0:0]	<= i_PWDATA[7:7];
		r_TBL_ENABLE08[0:0]	<= i_PWDATA[8:8];
		r_TBL_ENABLE09[0:0]	<= i_PWDATA[9:9];
		r_TBL_ENABLE10[0:0]	<= i_PWDATA[10:10];
		r_TBL_ENABLE11[0:0]	<= i_PWDATA[11:11];
		r_TBL_ENABLE12[0:0]	<= i_PWDATA[12:12];
		r_TBL_ENABLE13[0:0]	<= i_PWDATA[13:13];
		r_TBL_ENABLE14[0:0]	<= i_PWDATA[14:14];
		r_TBL_ENABLE15[0:0]	<= i_PWDATA[15:15];
		r_TBL_ENABLE16[0:0]	<= i_PWDATA[16:16];
		r_TBL_ENABLE17[0:0]	<= i_PWDATA[17:17];
		r_TBL_ENABLE18[0:0]	<= i_PWDATA[18:18];
		r_TBL_ENABLE19[0:0]	<= i_PWDATA[19:19];
		r_TBL_ENABLE20[0:0]	<= i_PWDATA[20:20];
		r_TBL_ENABLE21[0:0]	<= i_PWDATA[21:21];
		r_TBL_ENABLE22[0:0]	<= i_PWDATA[22:22];
		r_TBL_ENABLE23[0:0]	<= i_PWDATA[23:23];
		r_TBL_ENABLE24[0:0]	<= i_PWDATA[24:24];
	end
	else begin
		r_TBL_ENABLE00[0:0]	<= r_TBL_ENABLE00[0:0];
		r_TBL_ENABLE01[0:0]	<= r_TBL_ENABLE01[0:0];
		r_TBL_ENABLE02[0:0]	<= r_TBL_ENABLE02[0:0];
		r_TBL_ENABLE03[0:0]	<= r_TBL_ENABLE03[0:0];
		r_TBL_ENABLE04[0:0]	<= r_TBL_ENABLE04[0:0];
		r_TBL_ENABLE05[0:0]	<= r_TBL_ENABLE05[0:0];
		r_TBL_ENABLE06[0:0]	<= r_TBL_ENABLE06[0:0];
		r_TBL_ENABLE07[0:0]	<= r_TBL_ENABLE07[0:0];
		r_TBL_ENABLE08[0:0]	<= r_TBL_ENABLE08[0:0];
		r_TBL_ENABLE09[0:0]	<= r_TBL_ENABLE09[0:0];
		r_TBL_ENABLE10[0:0]	<= r_TBL_ENABLE10[0:0];
		r_TBL_ENABLE11[0:0]	<= r_TBL_ENABLE11[0:0];
		r_TBL_ENABLE12[0:0]	<= r_TBL_ENABLE12[0:0];
		r_TBL_ENABLE13[0:0]	<= r_TBL_ENABLE13[0:0];
		r_TBL_ENABLE14[0:0]	<= r_TBL_ENABLE14[0:0];
		r_TBL_ENABLE15[0:0]	<= r_TBL_ENABLE15[0:0];
		r_TBL_ENABLE16[0:0]	<= r_TBL_ENABLE16[0:0];
		r_TBL_ENABLE17[0:0]	<= r_TBL_ENABLE17[0:0];
		r_TBL_ENABLE18[0:0]	<= r_TBL_ENABLE18[0:0];
		r_TBL_ENABLE19[0:0]	<= r_TBL_ENABLE19[0:0];
		r_TBL_ENABLE20[0:0]	<= r_TBL_ENABLE20[0:0];
		r_TBL_ENABLE21[0:0]	<= r_TBL_ENABLE21[0:0];
		r_TBL_ENABLE22[0:0]	<= r_TBL_ENABLE22[0:0];
		r_TBL_ENABLE23[0:0]	<= r_TBL_ENABLE23[0:0];
		r_TBL_ENABLE24[0:0]	<= r_TBL_ENABLE24[0:0];
	end
end

// output assign for SPA_TBL_ENABLE_REG
assign o_TBL_ENABLE00[0:0]	= r_TBL_ENABLE00[0:0];
assign o_TBL_ENABLE01[0:0]	= r_TBL_ENABLE01[0:0];
assign o_TBL_ENABLE02[0:0]	= r_TBL_ENABLE02[0:0];
assign o_TBL_ENABLE03[0:0]	= r_TBL_ENABLE03[0:0];
assign o_TBL_ENABLE04[0:0]	= r_TBL_ENABLE04[0:0];
assign o_TBL_ENABLE05[0:0]	= r_TBL_ENABLE05[0:0];
assign o_TBL_ENABLE06[0:0]	= r_TBL_ENABLE06[0:0];
assign o_TBL_ENABLE07[0:0]	= r_TBL_ENABLE07[0:0];
assign o_TBL_ENABLE08[0:0]	= r_TBL_ENABLE08[0:0];
assign o_TBL_ENABLE09[0:0]	= r_TBL_ENABLE09[0:0];
assign o_TBL_ENABLE10[0:0]	= r_TBL_ENABLE10[0:0];
assign o_TBL_ENABLE11[0:0]	= r_TBL_ENABLE11[0:0];
assign o_TBL_ENABLE12[0:0]	= r_TBL_ENABLE12[0:0];
assign o_TBL_ENABLE13[0:0]	= r_TBL_ENABLE13[0:0];
assign o_TBL_ENABLE14[0:0]	= r_TBL_ENABLE14[0:0];
assign o_TBL_ENABLE15[0:0]	= r_TBL_ENABLE15[0:0];
assign o_TBL_ENABLE16[0:0]	= r_TBL_ENABLE16[0:0];
assign o_TBL_ENABLE17[0:0]	= r_TBL_ENABLE17[0:0];
assign o_TBL_ENABLE18[0:0]	= r_TBL_ENABLE18[0:0];
assign o_TBL_ENABLE19[0:0]	= r_TBL_ENABLE19[0:0];
assign o_TBL_ENABLE20[0:0]	= r_TBL_ENABLE20[0:0];
assign o_TBL_ENABLE21[0:0]	= r_TBL_ENABLE21[0:0];
assign o_TBL_ENABLE22[0:0]	= r_TBL_ENABLE22[0:0];
assign o_TBL_ENABLE23[0:0]	= r_TBL_ENABLE23[0:0];
assign o_TBL_ENABLE24[0:0]	= r_TBL_ENABLE24[0:0];


// SPA_TBL_ADDR_00_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_TBL_ADDR_00[31:0]	<= 32`h0;
	end
	else if (w_addr008c_wr) begin
		r_TBL_ADDR_00[31:0]	<= i_PWDATA[31:0];
	end
	else begin
		r_TBL_ADDR_00[31:0]	<= r_TBL_ADDR_00[31:0];
	end
end

// output assign for SPA_TBL_ADDR_00_REG
assign o_TBL_ADDR_00[31:0]	= r_TBL_ADDR_00[31:0];


// SPA_TBL_ADDR_01_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_TBL_ADDR_01[31:0]	<= 32`h0;
	end
	else if (w_addr0090_wr) begin
		r_TBL_ADDR_01[31:0]	<= i_PWDATA[31:0];
	end
	else begin
		r_TBL_ADDR_01[31:0]	<= r_TBL_ADDR_01[31:0];
	end
end

// output assign for SPA_TBL_ADDR_01_REG
assign o_TBL_ADDR_01[31:0]	= r_TBL_ADDR_01[31:0];


// SPA_TBL_ADDR_02_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_TBL_ADDR_02[31:0]	<= 32`h0;
	end
	else if (w_addr0094_wr) begin
		r_TBL_ADDR_02[31:0]	<= i_PWDATA[31:0];
	end
	else begin
		r_TBL_ADDR_02[31:0]	<= r_TBL_ADDR_02[31:0];
	end
end

// output assign for SPA_TBL_ADDR_02_REG
assign o_TBL_ADDR_02[31:0]	= r_TBL_ADDR_02[31:0];


// SPA_TBL_ADDR_03_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_TBL_ADDR_03[31:0]	<= 32`h0;
	end
	else if (w_addr0098_wr) begin
		r_TBL_ADDR_03[31:0]	<= i_PWDATA[31:0];
	end
	else begin
		r_TBL_ADDR_03[31:0]	<= r_TBL_ADDR_03[31:0];
	end
end

// output assign for SPA_TBL_ADDR_03_REG
assign o_TBL_ADDR_03[31:0]	= r_TBL_ADDR_03[31:0];


// SPA_TBL_ADDR_04_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_TBL_ADDR_04[31:0]	<= 32`h0;
	end
	else if (w_addr009c_wr) begin
		r_TBL_ADDR_04[31:0]	<= i_PWDATA[31:0];
	end
	else begin
		r_TBL_ADDR_04[31:0]	<= r_TBL_ADDR_04[31:0];
	end
end

// output assign for SPA_TBL_ADDR_04_REG
assign o_TBL_ADDR_04[31:0]	= r_TBL_ADDR_04[31:0];


// SPA_TBL_ADDR_05_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_TBL_ADDR_05[31:0]	<= 32`h0;
	end
	else if (w_addr00a0_wr) begin
		r_TBL_ADDR_05[31:0]	<= i_PWDATA[31:0];
	end
	else begin
		r_TBL_ADDR_05[31:0]	<= r_TBL_ADDR_05[31:0];
	end
end

// output assign for SPA_TBL_ADDR_05_REG
assign o_TBL_ADDR_05[31:0]	= r_TBL_ADDR_05[31:0];


// SPA_TBL_ADDR_06_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_TBL_ADDR_06[31:0]	<= 32`h0;
	end
	else if (w_addr00a4_wr) begin
		r_TBL_ADDR_06[31:0]	<= i_PWDATA[31:0];
	end
	else begin
		r_TBL_ADDR_06[31:0]	<= r_TBL_ADDR_06[31:0];
	end
end

// output assign for SPA_TBL_ADDR_06_REG
assign o_TBL_ADDR_06[31:0]	= r_TBL_ADDR_06[31:0];


// SPA_TBL_ADDR_07_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_TBL_ADDR_07[31:0]	<= 32`h0;
	end
	else if (w_addr00a8_wr) begin
		r_TBL_ADDR_07[31:0]	<= i_PWDATA[31:0];
	end
	else begin
		r_TBL_ADDR_07[31:0]	<= r_TBL_ADDR_07[31:0];
	end
end

// output assign for SPA_TBL_ADDR_07_REG
assign o_TBL_ADDR_07[31:0]	= r_TBL_ADDR_07[31:0];


// SPA_TBL_ADDR_08_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_TBL_ADDR_08[31:0]	<= 32`h0;
	end
	else if (w_addr00ac_wr) begin
		r_TBL_ADDR_08[31:0]	<= i_PWDATA[31:0];
	end
	else begin
		r_TBL_ADDR_08[31:0]	<= r_TBL_ADDR_08[31:0];
	end
end

// output assign for SPA_TBL_ADDR_08_REG
assign o_TBL_ADDR_08[31:0]	= r_TBL_ADDR_08[31:0];


// SPA_TBL_ADDR_09_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_TBL_ADDR_09[31:0]	<= 32`h0;
	end
	else if (w_addr00b0_wr) begin
		r_TBL_ADDR_09[31:0]	<= i_PWDATA[31:0];
	end
	else begin
		r_TBL_ADDR_09[31:0]	<= r_TBL_ADDR_09[31:0];
	end
end

// output assign for SPA_TBL_ADDR_09_REG
assign o_TBL_ADDR_09[31:0]	= r_TBL_ADDR_09[31:0];


// SPA_TBL_ADDR_10_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_TBL_ADDR_10[31:0]	<= 32`h0;
	end
	else if (w_addr00b4_wr) begin
		r_TBL_ADDR_10[31:0]	<= i_PWDATA[31:0];
	end
	else begin
		r_TBL_ADDR_10[31:0]	<= r_TBL_ADDR_10[31:0];
	end
end

// output assign for SPA_TBL_ADDR_10_REG
assign o_TBL_ADDR_10[31:0]	= r_TBL_ADDR_10[31:0];


// SPA_TBL_ADDR_11_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_TBL_ADDR_11[31:0]	<= 32`h0;
	end
	else if (w_addr00b8_wr) begin
		r_TBL_ADDR_11[31:0]	<= i_PWDATA[31:0];
	end
	else begin
		r_TBL_ADDR_11[31:0]	<= r_TBL_ADDR_11[31:0];
	end
end

// output assign for SPA_TBL_ADDR_11_REG
assign o_TBL_ADDR_11[31:0]	= r_TBL_ADDR_11[31:0];


// SPA_TBL_ADDR_12_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_TBL_ADDR_12[31:0]	<= 32`h0;
	end
	else if (w_addr00bc_wr) begin
		r_TBL_ADDR_12[31:0]	<= i_PWDATA[31:0];
	end
	else begin
		r_TBL_ADDR_12[31:0]	<= r_TBL_ADDR_12[31:0];
	end
end

// output assign for SPA_TBL_ADDR_12_REG
assign o_TBL_ADDR_12[31:0]	= r_TBL_ADDR_12[31:0];


// SPA_TBL_ADDR_13_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_TBL_ADDR_13[31:0]	<= 32`h0;
	end
	else if (w_addr00c0_wr) begin
		r_TBL_ADDR_13[31:0]	<= i_PWDATA[31:0];
	end
	else begin
		r_TBL_ADDR_13[31:0]	<= r_TBL_ADDR_13[31:0];
	end
end

// output assign for SPA_TBL_ADDR_13_REG
assign o_TBL_ADDR_13[31:0]	= r_TBL_ADDR_13[31:0];


// SPA_TBL_ADDR_14_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_TBL_ADDR_14[31:0]	<= 32`h0;
	end
	else if (w_addr00c4_wr) begin
		r_TBL_ADDR_14[31:0]	<= i_PWDATA[31:0];
	end
	else begin
		r_TBL_ADDR_14[31:0]	<= r_TBL_ADDR_14[31:0];
	end
end

// output assign for SPA_TBL_ADDR_14_REG
assign o_TBL_ADDR_14[31:0]	= r_TBL_ADDR_14[31:0];


// SPA_TBL_ADDR_15_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_TBL_ADDR_15[31:0]	<= 32`h0;
	end
	else if (w_addr00c8_wr) begin
		r_TBL_ADDR_15[31:0]	<= i_PWDATA[31:0];
	end
	else begin
		r_TBL_ADDR_15[31:0]	<= r_TBL_ADDR_15[31:0];
	end
end

// output assign for SPA_TBL_ADDR_15_REG
assign o_TBL_ADDR_15[31:0]	= r_TBL_ADDR_15[31:0];


// SPA_TBL_ADDR_16_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_TBL_ADDR_16[31:0]	<= 32`h0;
	end
	else if (w_addr00cc_wr) begin
		r_TBL_ADDR_16[31:0]	<= i_PWDATA[31:0];
	end
	else begin
		r_TBL_ADDR_16[31:0]	<= r_TBL_ADDR_16[31:0];
	end
end

// output assign for SPA_TBL_ADDR_16_REG
assign o_TBL_ADDR_16[31:0]	= r_TBL_ADDR_16[31:0];


// SPA_TBL_ADDR_17_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_TBL_ADDR_17[31:0]	<= 32`h0;
	end
	else if (w_addr00d0_wr) begin
		r_TBL_ADDR_17[31:0]	<= i_PWDATA[31:0];
	end
	else begin
		r_TBL_ADDR_17[31:0]	<= r_TBL_ADDR_17[31:0];
	end
end

// output assign for SPA_TBL_ADDR_17_REG
assign o_TBL_ADDR_17[31:0]	= r_TBL_ADDR_17[31:0];


// SPA_TBL_ADDR_18_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_TBL_ADDR_18[31:0]	<= 32`h0;
	end
	else if (w_addr00d4_wr) begin
		r_TBL_ADDR_18[31:0]	<= i_PWDATA[31:0];
	end
	else begin
		r_TBL_ADDR_18[31:0]	<= r_TBL_ADDR_18[31:0];
	end
end

// output assign for SPA_TBL_ADDR_18_REG
assign o_TBL_ADDR_18[31:0]	= r_TBL_ADDR_18[31:0];


// SPA_TBL_ADDR_19_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_TBL_ADDR_19[31:0]	<= 32`h0;
	end
	else if (w_addr00d8_wr) begin
		r_TBL_ADDR_19[31:0]	<= i_PWDATA[31:0];
	end
	else begin
		r_TBL_ADDR_19[31:0]	<= r_TBL_ADDR_19[31:0];
	end
end

// output assign for SPA_TBL_ADDR_19_REG
assign o_TBL_ADDR_19[31:0]	= r_TBL_ADDR_19[31:0];


// SPA_TBL_ADDR_20_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_TBL_ADDR_20[31:0]	<= 32`h0;
	end
	else if (w_addr00dc_wr) begin
		r_TBL_ADDR_20[31:0]	<= i_PWDATA[31:0];
	end
	else begin
		r_TBL_ADDR_20[31:0]	<= r_TBL_ADDR_20[31:0];
	end
end

// output assign for SPA_TBL_ADDR_20_REG
assign o_TBL_ADDR_20[31:0]	= r_TBL_ADDR_20[31:0];


// SPA_TBL_ADDR_21_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_TBL_ADDR_21[31:0]	<= 32`h0;
	end
	else if (w_addr00e0_wr) begin
		r_TBL_ADDR_21[31:0]	<= i_PWDATA[31:0];
	end
	else begin
		r_TBL_ADDR_21[31:0]	<= r_TBL_ADDR_21[31:0];
	end
end

// output assign for SPA_TBL_ADDR_21_REG
assign o_TBL_ADDR_21[31:0]	= r_TBL_ADDR_21[31:0];


// SPA_TBL_ADDR_22_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_TBL_ADDR_22[31:0]	<= 32`h0;
	end
	else if (w_addr00e4_wr) begin
		r_TBL_ADDR_22[31:0]	<= i_PWDATA[31:0];
	end
	else begin
		r_TBL_ADDR_22[31:0]	<= r_TBL_ADDR_22[31:0];
	end
end

// output assign for SPA_TBL_ADDR_22_REG
assign o_TBL_ADDR_22[31:0]	= r_TBL_ADDR_22[31:0];


// SPA_TBL_ADDR_23_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_TBL_ADDR_23[31:0]	<= 32`h0;
	end
	else if (w_addr00e8_wr) begin
		r_TBL_ADDR_23[31:0]	<= i_PWDATA[31:0];
	end
	else begin
		r_TBL_ADDR_23[31:0]	<= r_TBL_ADDR_23[31:0];
	end
end

// output assign for SPA_TBL_ADDR_23_REG
assign o_TBL_ADDR_23[31:0]	= r_TBL_ADDR_23[31:0];


// SPA_TBL_ADDR_24_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_TBL_ADDR_24[31:0]	<= 32`h0;
	end
	else if (w_addr00ec_wr) begin
		r_TBL_ADDR_24[31:0]	<= i_PWDATA[31:0];
	end
	else begin
		r_TBL_ADDR_24[31:0]	<= r_TBL_ADDR_24[31:0];
	end
end

// output assign for SPA_TBL_ADDR_24_REG
assign o_TBL_ADDR_24[31:0]	= r_TBL_ADDR_24[31:0];


// SPA_RX_START_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_RX_START[0:0]	<= 1`h0;
	end
	else if (w_addr0140_wr) begin
		r_RX_START[0:0]	<= i_PWDATA[0:0];
	end
	else begin
		r_RX_START[0:0]	<= r_RX_START[0:0];
	end
end

// output assign for SPA_RX_START_REG
assign o_RX_START[0:0]	= r_RX_START[0:0];


// SPA_RX_INCR_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_RX_INCR[31:0]	<= 32`h0;
	end
	else if (w_addr0148_wr) begin
		r_RX_INCR[31:0]	<= i_PWDATA[31:0];
	end
	else begin
		r_RX_INCR[31:0]	<= r_RX_INCR[31:0];
	end
end

// output assign for SPA_RX_INCR_REG
assign o_RX_INCR[31:0]	= r_RX_INCR[31:0];


// SPA_RX_CH0_PREV_ADDR_REG register

// output assign for SPA_RX_CH0_PREV_ADDR_REG
assign o_RX_CH0_PREV_ADDR[31:0]	= 32'h0 /* add logic */ ;


// SPA_RX_CH1_PREV_ADDR_REG register

// output assign for SPA_RX_CH1_PREV_ADDR_REG
assign o_RX_CH1_PREV_ADDR[31:0]	= 32'h0 /* add logic */ ;


// SPA_RX_CH2_PREV_ADDR_REG register

// output assign for SPA_RX_CH2_PREV_ADDR_REG
assign o_RX_CH2_PREV_ADDR[31:0]	= 32'h0 /* add logic */ ;


// SPA_RX_CH0_CURR_ADDR_REG register

// output assign for SPA_RX_CH0_CURR_ADDR_REG
assign o_RX_CH0_CURR_ADDR[31:0]	= 32'h0 /* add logic */ ;


// SPA_RX_CH1_CURR_ADDR_REG register

// output assign for SPA_RX_CH1_CURR_ADDR_REG
assign o_RX_CH1_CURR_ADDR[31:0]	= 32'h0 /* add logic */ ;


// SPA_RX_CH2_CURR_ADDR_REG register

// output assign for SPA_RX_CH2_CURR_ADDR_REG
assign o_RX_CH2_CURR_ADDR[31:0]	= 32'h0 /* add logic */ ;


// SPA_RX_CH0_START_ADDR_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_RX_CH0_START_ADDR[31:0]	<= 32`h0;
	end
	else if (w_addr0164_wr) begin
		r_RX_CH0_START_ADDR[31:0]	<= i_PWDATA[31:0];
	end
	else begin
		r_RX_CH0_START_ADDR[31:0]	<= r_RX_CH0_START_ADDR[31:0];
	end
end

// output assign for SPA_RX_CH0_START_ADDR_REG
assign o_RX_CH0_START_ADDR[31:0]	= r_RX_CH0_START_ADDR[31:0];


// SPA_RX_CH1_START_ADDR_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_RX_CH1_START_ADDR[31:0]	<= 32`h0;
	end
	else if (w_addr0168_wr) begin
		r_RX_CH1_START_ADDR[31:0]	<= i_PWDATA[31:0];
	end
	else begin
		r_RX_CH1_START_ADDR[31:0]	<= r_RX_CH1_START_ADDR[31:0];
	end
end

// output assign for SPA_RX_CH1_START_ADDR_REG
assign o_RX_CH1_START_ADDR[31:0]	= r_RX_CH1_START_ADDR[31:0];


// SPA_RX_CH2_START_ADDR_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_RX_CH2_START_ADDR[31:0]	<= 32`h0;
	end
	else if (w_addr016c_wr) begin
		r_RX_CH2_START_ADDR[31:0]	<= i_PWDATA[31:0];
	end
	else begin
		r_RX_CH2_START_ADDR[31:0]	<= r_RX_CH2_START_ADDR[31:0];
	end
end

// output assign for SPA_RX_CH2_START_ADDR_REG
assign o_RX_CH2_START_ADDR[31:0]	= r_RX_CH2_START_ADDR[31:0];


// SPA_RX_BLK_CNT_REG register

// output assign for SPA_RX_BLK_CNT_REG
assign o_RX_BLK_CNT[7:0]	= 8'h0 /* add logic */ ;
assign o_RX_BAND_CNT[7:0]	= 8'h0 /* add logic */ ;


// SPA_RX_STATUS_REG register

// output assign for SPA_RX_STATUS_REG
assign o_BUSY[0:0]	= 1'h0 /* add logic */ ;


// SPA_RX_CH0_CUR_ADDR_REG register

// output assign for SPA_RX_CH0_CUR_ADDR_REG
assign o_RX_CH0_CUR_ADDR[31:0]	= 32'h0 /* add logic */ ;


// SPA_RX_CH1_CUR_ADDR_REG register

// output assign for SPA_RX_CH1_CUR_ADDR_REG
assign o_RX_CH1_CUR_ADDR[31:0]	= 32'h0 /* add logic */ ;


// SPA_RX_CH2_CUR_ADDR_REG register

// output assign for SPA_RX_CH2_CUR_ADDR_REG
assign o_RX_CH2_CUR_ADDR[31:0]	= 32'h0 /* add logic */ ;


// SPA_RX_CH0_SVC_CNT_REG register

// output assign for SPA_RX_CH0_SVC_CNT_REG
assign o_RX_CH0_SVC_CNT[31:0]	= 32'h0 /* add logic */ ;


// SPA_RX_CH1_SVC_CNT_REG register

// output assign for SPA_RX_CH1_SVC_CNT_REG
assign o_RX_CH1_SVC_CNT[31:0]	= 32'h0 /* add logic */ ;


// SPA_RX_CH2_SVC_CNT_REG register

// output assign for SPA_RX_CH2_SVC_CNT_REG
assign o_RX_CH2_SVC_CNT[31:0]	= 32'h0 /* add logic */ ;


// SPA_RX_DMA_CON_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_RX_ISSUE_CAP[2:0]	<= 3`h0;
		r_RX_ARCACHE[3:0]	<= 4`h0;
		r_RX_ARPROT0[0:0]	<= 1`h0;
		//r_RX_ARPROT1[0:0]	<= 1`h0; // read-only
		r_RX_ARPROT2[0:0]	<= 1`h0;
		r_RX_SWAP_EN[1:0]	<= 2`h0;
	end
	else if (w_addr0190_wr) begin
		r_RX_ISSUE_CAP[2:0]	<= i_PWDATA[2:0];
		r_RX_ARCACHE[3:0]	<= i_PWDATA[19:16];
		r_RX_ARPROT0[0:0]	<= i_PWDATA[20:20];
		//r_RX_ARPROT1[0:0]	<= i_PWDATA[21:21]; // read-only
		r_RX_ARPROT2[0:0]	<= i_PWDATA[22:22];
		r_RX_SWAP_EN[1:0]	<= i_PWDATA[25:24];
	end
	else begin
		r_RX_ISSUE_CAP[2:0]	<= r_RX_ISSUE_CAP[2:0];
		r_RX_ARCACHE[3:0]	<= r_RX_ARCACHE[3:0];
		r_RX_ARPROT0[0:0]	<= r_RX_ARPROT0[0:0];
		//r_RX_ARPROT1[0:0]	<= r_RX_ARPROT1[0:0]; // read-only
		r_RX_ARPROT2[0:0]	<= r_RX_ARPROT2[0:0];
		r_RX_SWAP_EN[1:0]	<= r_RX_SWAP_EN[1:0];
	end
end

// output assign for SPA_RX_DMA_CON_REG
assign o_RX_ISSUE_CAP[2:0]	= r_RX_ISSUE_CAP[2:0];
assign o_RX_ARCACHE[3:0]	= r_RX_ARCACHE[3:0];
assign o_RX_ARPROT0[0:0]	= r_RX_ARPROT0[0:0];
assign o_RX_ARPROT1[0:0]	= 1'h0 /* add logic */ ;
assign o_RX_ARPROT2[0:0]	= r_RX_ARPROT2[0:0];
assign o_RX_SWAP_EN[1:0]	= r_RX_SWAP_EN[1:0];


// SPA_RX_ERR_STATUS_REG register

// output assign for SPA_RX_ERR_STATUS_REG
assign o_RX_RID_ERR_0[0:0]	= 1'h0 /* add logic */ ;
assign o_RX_RID_ERR_1[0:0]	= 1'h0 /* add logic */ ;
assign o_RX_RID_ERR_2[0:0]	= 1'h0 /* add logic */ ;
assign o_RX_RID_ERR_3[0:0]	= 1'h0 /* add logic */ ;
assign o_RX_RRESP_ERR_0[0:0]	= 1'h0 /* add logic */ ;
assign o_RX_RRESP_ERR_1[0:0]	= 1'h0 /* add logic */ ;


// SPA_TX_START_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_TX_START[0:0]	<= 1`h0;
	end
	else if (w_addr01c0_wr) begin
		r_TX_START[0:0]	<= i_PWDATA[0:0];
	end
	else begin
		r_TX_START[0:0]	<= r_TX_START[0:0];
	end
end

// output assign for SPA_TX_START_REG
assign o_TX_START[0:0]	= r_TX_START[0:0];


// SPA_TX_DMA_CON_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_MAX_WISSUE[4:0]	<= 5`hB;
		r_TX_INT_CHECK[0:0]	<= 1`h0;
		r_ALPHA_CH_ON[0:0]	<= 1`h0;
		r_ARB_MODE[0:0]	<= 1`h0;
		r_TX_AWCACHE[3:0]	<= 4`h0;
		r_TX_AWPROT0[0:0]	<= 1`h0;
		//r_TX_AWPROT1[0:0]	<= 1`h0; // read-only
		r_TX_AWPROT2[0:0]	<= 1`h0;
		r_TX_SWAP_EN[1:0]	<= 2`h0;
	end
	else if (w_addr01c4_wr) begin
		r_MAX_WISSUE[4:0]	<= i_PWDATA[4:0];
		r_TX_INT_CHECK[0:0]	<= i_PWDATA[7:7];
		r_ALPHA_CH_ON[0:0]	<= i_PWDATA[8:8];
		r_ARB_MODE[0:0]	<= i_PWDATA[9:9];
		r_TX_AWCACHE[3:0]	<= i_PWDATA[19:16];
		r_TX_AWPROT0[0:0]	<= i_PWDATA[20:20];
		//r_TX_AWPROT1[0:0]	<= i_PWDATA[21:21]; // read-only
		r_TX_AWPROT2[0:0]	<= i_PWDATA[22:22];
		r_TX_SWAP_EN[1:0]	<= i_PWDATA[25:24];
	end
	else begin
		r_MAX_WISSUE[4:0]	<= r_MAX_WISSUE[4:0];
		r_TX_INT_CHECK[0:0]	<= r_TX_INT_CHECK[0:0];
		r_ALPHA_CH_ON[0:0]	<= r_ALPHA_CH_ON[0:0];
		r_ARB_MODE[0:0]	<= r_ARB_MODE[0:0];
		r_TX_AWCACHE[3:0]	<= r_TX_AWCACHE[3:0];
		r_TX_AWPROT0[0:0]	<= r_TX_AWPROT0[0:0];
		//r_TX_AWPROT1[0:0]	<= r_TX_AWPROT1[0:0]; // read-only
		r_TX_AWPROT2[0:0]	<= r_TX_AWPROT2[0:0];
		r_TX_SWAP_EN[1:0]	<= r_TX_SWAP_EN[1:0];
	end
end

// output assign for SPA_TX_DMA_CON_REG
assign o_MAX_WISSUE[4:0]	= r_MAX_WISSUE[4:0];
assign o_TX_INT_CHECK[0:0]	= r_TX_INT_CHECK[0:0];
assign o_ALPHA_CH_ON[0:0]	= r_ALPHA_CH_ON[0:0];
assign o_ARB_MODE[0:0]	= r_ARB_MODE[0:0];
assign o_TX_AWCACHE[3:0]	= r_TX_AWCACHE[3:0];
assign o_TX_AWPROT0[0:0]	= r_TX_AWPROT0[0:0];
assign o_TX_AWPROT1[0:0]	= 1'h0 /* add logic */ ;
assign o_TX_AWPROT2[0:0]	= r_TX_AWPROT2[0:0];
assign o_TX_SWAP_EN[1:0]	= r_TX_SWAP_EN[1:0];


// SPA_TX_BAND_NUM_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_TX_BAND_NUM[7:0]	<= 8`h1;
	end
	else if (w_addr01c8_wr) begin
		r_TX_BAND_NUM[7:0]	<= i_PWDATA[7:0];
	end
	else begin
		r_TX_BAND_NUM[7:0]	<= r_TX_BAND_NUM[7:0];
	end
end

// output assign for SPA_TX_BAND_NUM_REG
assign o_TX_BAND_NUM[7:0]	= r_TX_BAND_NUM[7:0];


// SPA_TX_DATA_INCR_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_TX_DATA_INCR[15:0]	<= 16`h0;
	end
	else if (w_addr01cc_wr) begin
		r_TX_DATA_INCR[15:0]	<= i_PWDATA[15:0];
	end
	else begin
		r_TX_DATA_INCR[15:0]	<= r_TX_DATA_INCR[15:0];
	end
end

// output assign for SPA_TX_DATA_INCR_REG
assign o_TX_DATA_INCR[15:0]	= r_TX_DATA_INCR[15:0];


// SPA_TX_CH0_START_ADDR_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_TX_CH0_START_ADDR[31:0]	<= 32`h00000000;
	end
	else if (w_addr01d4_wr) begin
		r_TX_CH0_START_ADDR[31:0]	<= i_PWDATA[31:0];
	end
	else begin
		r_TX_CH0_START_ADDR[31:0]	<= r_TX_CH0_START_ADDR[31:0];
	end
end

// output assign for SPA_TX_CH0_START_ADDR_REG
assign o_TX_CH0_START_ADDR[31:0]	= r_TX_CH0_START_ADDR[31:0];


// SPA_TX_CH1_START_ADDR_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_TX_CH1_START_ADDR[31:0]	<= 32`h00000000;
	end
	else if (w_addr01d8_wr) begin
		r_TX_CH1_START_ADDR[31:0]	<= i_PWDATA[31:0];
	end
	else begin
		r_TX_CH1_START_ADDR[31:0]	<= r_TX_CH1_START_ADDR[31:0];
	end
end

// output assign for SPA_TX_CH1_START_ADDR_REG
assign o_TX_CH1_START_ADDR[31:0]	= r_TX_CH1_START_ADDR[31:0];


// SPA_TX_CH2_START_ADDR_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_TX_CH2_START_ADDR[31:0]	<= 32`h00000000;
	end
	else if (w_addr01dc_wr) begin
		r_TX_CH2_START_ADDR[31:0]	<= i_PWDATA[31:0];
	end
	else begin
		r_TX_CH2_START_ADDR[31:0]	<= r_TX_CH2_START_ADDR[31:0];
	end
end

// output assign for SPA_TX_CH2_START_ADDR_REG
assign o_TX_CH2_START_ADDR[31:0]	= r_TX_CH2_START_ADDR[31:0];


// SPA_TX_BLK_CNT_REG register

// output assign for SPA_TX_BLK_CNT_REG
assign o_TX_BLK_CNT[7:0]	= 8'h0 /* add logic */ ;
assign o_TX_BAND_CNT[7:0]	= 8'h0 /* add logic */ ;


// SPA_TX_STATUS_REG register

// output assign for SPA_TX_STATUS_REG
assign o_BUSY[0:0]	= 1'h0 /* add logic */ ;


// SPA_TX_ADDR_CH0_MAX_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_TX_ADDR_CH0_MAX[31:0]	<= 32`hFFFFFFFF;
	end
	else if (w_addr01f0_wr) begin
		r_TX_ADDR_CH0_MAX[31:0]	<= i_PWDATA[31:0];
	end
	else begin
		r_TX_ADDR_CH0_MAX[31:0]	<= r_TX_ADDR_CH0_MAX[31:0];
	end
end

// output assign for SPA_TX_ADDR_CH0_MAX_REG
assign o_TX_ADDR_CH0_MAX[31:0]	= r_TX_ADDR_CH0_MAX[31:0];


// SPA_TX_ADDR_CH0_MIN_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_TX_ADDR_CH0_MIN[31:0]	<= 32`h00000000;
	end
	else if (w_addr01f4_wr) begin
		r_TX_ADDR_CH0_MIN[31:0]	<= i_PWDATA[31:0];
	end
	else begin
		r_TX_ADDR_CH0_MIN[31:0]	<= r_TX_ADDR_CH0_MIN[31:0];
	end
end

// output assign for SPA_TX_ADDR_CH0_MIN_REG
assign o_TX_ADDR_CH0_MIN[31:0]	= r_TX_ADDR_CH0_MIN[31:0];


// SPA_TX_ADDR_CH1_MAX_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_TX_ADDR_CH1_MAX[31:0]	<= 32`hFFFFFFFF;
	end
	else if (w_addr01f8_wr) begin
		r_TX_ADDR_CH1_MAX[31:0]	<= i_PWDATA[31:0];
	end
	else begin
		r_TX_ADDR_CH1_MAX[31:0]	<= r_TX_ADDR_CH1_MAX[31:0];
	end
end

// output assign for SPA_TX_ADDR_CH1_MAX_REG
assign o_TX_ADDR_CH1_MAX[31:0]	= r_TX_ADDR_CH1_MAX[31:0];


// SPA_TX_ADDR_CH1_MIN_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_TX_ADDR_CH1_MIN[31:0]	<= 32`h00000000;
	end
	else if (w_addr01fc_wr) begin
		r_TX_ADDR_CH1_MIN[31:0]	<= i_PWDATA[31:0];
	end
	else begin
		r_TX_ADDR_CH1_MIN[31:0]	<= r_TX_ADDR_CH1_MIN[31:0];
	end
end

// output assign for SPA_TX_ADDR_CH1_MIN_REG
assign o_TX_ADDR_CH1_MIN[31:0]	= r_TX_ADDR_CH1_MIN[31:0];


// SPA_TX_ADDR_CH2_MAX_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_TX_ADDR_CH2_MAX[31:0]	<= 32`hFFFFFFFF;
	end
	else if (w_addr0200_wr) begin
		r_TX_ADDR_CH2_MAX[31:0]	<= i_PWDATA[31:0];
	end
	else begin
		r_TX_ADDR_CH2_MAX[31:0]	<= r_TX_ADDR_CH2_MAX[31:0];
	end
end

// output assign for SPA_TX_ADDR_CH2_MAX_REG
assign o_TX_ADDR_CH2_MAX[31:0]	= r_TX_ADDR_CH2_MAX[31:0];


// SPA_TX_ADDR_CH2_MIN_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_TX_ADDR_CH2_MIN[31:0]	<= 32`h00000000;
	end
	else if (w_addr0204_wr) begin
		r_TX_ADDR_CH2_MIN[31:0]	<= i_PWDATA[31:0];
	end
	else begin
		r_TX_ADDR_CH2_MIN[31:0]	<= r_TX_ADDR_CH2_MIN[31:0];
	end
end

// output assign for SPA_TX_ADDR_CH2_MIN_REG
assign o_TX_ADDR_CH2_MIN[31:0]	= r_TX_ADDR_CH2_MIN[31:0];


// SPA_TX_CH0_CUR_ADDR_REG register

// output assign for SPA_TX_CH0_CUR_ADDR_REG
assign o_TX_CH0_CUR_ADDR[31:0]	= 32'h0 /* add logic */ ;


// SPA_TX_CH1_CUR_ADDR_REG register

// output assign for SPA_TX_CH1_CUR_ADDR_REG
assign o_TX_CH1_CUR_ADDR[31:0]	= 32'h0 /* add logic */ ;


// SPA_TX_CH2_CUR_ADDR_REG register

// output assign for SPA_TX_CH2_CUR_ADDR_REG
assign o_TX_CH2_CUR_ADDR[31:0]	= 32'h0 /* add logic */ ;


// SPA_TX_CH0_SVC_CNT_REG register

// output assign for SPA_TX_CH0_SVC_CNT_REG
assign o_TX_CH0_SVC_CNT[31:0]	= 32'h0 /* add logic */ ;


// SPA_TX_CH1_SVC_CNT_REG register

// output assign for SPA_TX_CH1_SVC_CNT_REG
assign o_TX_CH1_SVC_CNT[31:0]	= 32'h0 /* add logic */ ;


// SPA_TX_CH2_SVC_CNT_REG register

// output assign for SPA_TX_CH2_SVC_CNT_REG
assign o_TX_CH2_SVC_CNT[31:0]	= 32'h0 /* add logic */ ;


// SPA_TX_ERR_STATUS_REG register

// output assign for SPA_TX_ERR_STATUS_REG
assign o_TX_ERR_ID_0[0:0]	= 1'h0 /* add logic */ ;
assign o_TX_ERR_ID_1[0:0]	= 1'h0 /* add logic */ ;
assign o_TX_ERR_ID_2[0:0]	= 1'h0 /* add logic */ ;
assign o_TX_ERR_ID_3[0:0]	= 1'h0 /* add logic */ ;
assign o_TX_ERR_RESP_0[0:0]	= 1'h0 /* add logic */ ;
assign o_TX_ERR_RESP_1[0:0]	= 1'h0 /* add logic */ ;


// SPA_ADAPT_DMA_CON_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_ADAPT_SMAP_INT_CHECK[1:0]	<= 2`h0;
		r_ADAPT_OUT_BANDS[7:0]	<= 8`hFF;
	end
	else if (w_addr0280_wr) begin
		r_ADAPT_SMAP_INT_CHECK[1:0]	<= i_PWDATA[1:0];
		r_ADAPT_OUT_BANDS[7:0]	<= i_PWDATA[23:16];
	end
	else begin
		r_ADAPT_SMAP_INT_CHECK[1:0]	<= r_ADAPT_SMAP_INT_CHECK[1:0];
		r_ADAPT_OUT_BANDS[7:0]	<= r_ADAPT_OUT_BANDS[7:0];
	end
end

// output assign for SPA_ADAPT_DMA_CON_REG
assign o_ADAPT_SMAP_INT_CHECK[1:0]	= r_ADAPT_SMAP_INT_CHECK[1:0];
assign o_ADAPT_OUT_BANDS[7:0]	= r_ADAPT_OUT_BANDS[7:0];


// SPA_ADAPT_DMA_ADDR_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_ADAPT_ADDR[31:0]	<= 32`h0;
	end
	else if (w_addr0284_wr) begin
		r_ADAPT_ADDR[31:0]	<= i_PWDATA[31:0];
	end
	else begin
		r_ADAPT_ADDR[31:0]	<= r_ADAPT_ADDR[31:0];
	end
end

// output assign for SPA_ADAPT_DMA_ADDR_REG
assign o_ADAPT_ADDR[31:0]	= r_ADAPT_ADDR[31:0];


// SPA_ADAPT_DMA_ADDR_INCR_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_ADAPT_ADDR_INCR[31:0]	<= 32`h0;
	end
	else if (w_addr0288_wr) begin
		r_ADAPT_ADDR_INCR[31:0]	<= i_PWDATA[31:0];
	end
	else begin
		r_ADAPT_ADDR_INCR[31:0]	<= r_ADAPT_ADDR_INCR[31:0];
	end
end

// output assign for SPA_ADAPT_DMA_ADDR_INCR_REG
assign o_ADAPT_ADDR_INCR[31:0]	= r_ADAPT_ADDR_INCR[31:0];


// SPA_ADAPT_DMA_STATUS_REG register

// output assign for SPA_ADAPT_DMA_STATUS_REG
assign o_ADAPT_TX_BUSY[0:0]	= 1'h0 /* add logic */ ;
assign o_ADAPT_OUT_LINES[15:0]	= 16'h0 /* add logic */ ;


// SPA_ADAPT_TX_ADDR_MAX_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_ADAPT_TX_ADDR_MAX[31:0]	<= 32`hFFFFFFFF;
	end
	else if (w_addr0290_wr) begin
		r_ADAPT_TX_ADDR_MAX[31:0]	<= i_PWDATA[31:0];
	end
	else begin
		r_ADAPT_TX_ADDR_MAX[31:0]	<= r_ADAPT_TX_ADDR_MAX[31:0];
	end
end

// output assign for SPA_ADAPT_TX_ADDR_MAX_REG
assign o_ADAPT_TX_ADDR_MAX[31:0]	= r_ADAPT_TX_ADDR_MAX[31:0];


// SPA_ADAPT_TX_ADDR_MIN_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_ADAPT_TX_ADDR_MIN[31:0]	<= 32`h0;
	end
	else if (w_addr0294_wr) begin
		r_ADAPT_TX_ADDR_MIN[31:0]	<= i_PWDATA[31:0];
	end
	else begin
		r_ADAPT_TX_ADDR_MIN[31:0]	<= r_ADAPT_TX_ADDR_MIN[31:0];
	end
end

// output assign for SPA_ADAPT_TX_ADDR_MIN_REG
assign o_ADAPT_TX_ADDR_MIN[31:0]	= r_ADAPT_TX_ADDR_MIN[31:0];


// SPA_ADAPT_TX_CUR_ADDR_REG register

// output assign for SPA_ADAPT_TX_CUR_ADDR_REG
assign o_ADAPT_TX_CUR_ADDR[31:0]	= 32'h0 /* add logic */ ;


// SPA_ADAPT_TX_SVC_CNT_REG register

// output assign for SPA_ADAPT_TX_SVC_CNT_REG
assign o_ADAPT_TX_SVC_CNT[31:0]	= 32'h0 /* add logic */ ;


// SPA_ADAPT_START_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_ADAPT_START[0:0]	<= 1`h0;
	end
	else if (w_addr02a0_wr) begin
		r_ADAPT_START[0:0]	<= i_PWDATA[0:0];
	end
	else begin
		r_ADAPT_START[0:0]	<= r_ADAPT_START[0:0];
	end
end

// output assign for SPA_ADAPT_START_REG
assign o_ADAPT_START[0:0]	= r_ADAPT_START[0:0];


// SPA_ADAPT_BAND_CNT_REG register

// output assign for SPA_ADAPT_BAND_CNT_REG
assign o_ADAPT_BAND_CNT[7:0]	= 8'h0 /* add logic */ ;


// SPA_SMAP_DMA_CON_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_SMAP_OUT_BANDS[7:0]	<= 8`hFF;
	end
	else if (w_addr02c0_wr) begin
		r_SMAP_OUT_BANDS[7:0]	<= i_PWDATA[23:16];
	end
	else begin
		r_SMAP_OUT_BANDS[7:0]	<= r_SMAP_OUT_BANDS[7:0];
	end
end

// output assign for SPA_SMAP_DMA_CON_REG
assign o_SMAP_OUT_BANDS[7:0]	= r_SMAP_OUT_BANDS[7:0];


// SPA_SMAP_DMA_ADDR_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_SMAP_ADDR[31:0]	<= 32`h0;
	end
	else if (w_addr02c4_wr) begin
		r_SMAP_ADDR[31:0]	<= i_PWDATA[31:0];
	end
	else begin
		r_SMAP_ADDR[31:0]	<= r_SMAP_ADDR[31:0];
	end
end

// output assign for SPA_SMAP_DMA_ADDR_REG
assign o_SMAP_ADDR[31:0]	= r_SMAP_ADDR[31:0];


// SPA_SMAP_DMA_ADDR_INCR_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_SMAP_ADDR_INCR[31:0]	<= 32`h0;
	end
	else if (w_addr02c8_wr) begin
		r_SMAP_ADDR_INCR[31:0]	<= i_PWDATA[31:0];
	end
	else begin
		r_SMAP_ADDR_INCR[31:0]	<= r_SMAP_ADDR_INCR[31:0];
	end
end

// output assign for SPA_SMAP_DMA_ADDR_INCR_REG
assign o_SMAP_ADDR_INCR[31:0]	= r_SMAP_ADDR_INCR[31:0];


// SPA_SMAP_DMA_STATUS_REG register

// output assign for SPA_SMAP_DMA_STATUS_REG
assign o_SMAP_TX_BUSY[0:0]	= 1'h0 /* add logic */ ;
assign o_SMAP_OUT_LINES[15:0]	= 16'h0 /* add logic */ ;


// SPA_SMAP_TX_ADDR_MAX_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_SMAP_TX_ADDR_MAX[31:0]	<= 32`hFFFFFFFF;
	end
	else if (w_addr02d0_wr) begin
		r_SMAP_TX_ADDR_MAX[31:0]	<= i_PWDATA[31:0];
	end
	else begin
		r_SMAP_TX_ADDR_MAX[31:0]	<= r_SMAP_TX_ADDR_MAX[31:0];
	end
end

// output assign for SPA_SMAP_TX_ADDR_MAX_REG
assign o_SMAP_TX_ADDR_MAX[31:0]	= r_SMAP_TX_ADDR_MAX[31:0];


// SPA_SMAP_TX_ADDR_MIN_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_SMAP_TX_ADDR_MIN[31:0]	<= 32`h0;
	end
	else if (w_addr02d4_wr) begin
		r_SMAP_TX_ADDR_MIN[31:0]	<= i_PWDATA[31:0];
	end
	else begin
		r_SMAP_TX_ADDR_MIN[31:0]	<= r_SMAP_TX_ADDR_MIN[31:0];
	end
end

// output assign for SPA_SMAP_TX_ADDR_MIN_REG
assign o_SMAP_TX_ADDR_MIN[31:0]	= r_SMAP_TX_ADDR_MIN[31:0];


// SPA_SMAP_TX_CUR_ADDR_REG register

// output assign for SPA_SMAP_TX_CUR_ADDR_REG
assign o_SMAP_TX_CUR_ADDR[31:0]	= 32'h0 /* add logic */ ;


// SPA_SMAP_TX_SVC_CNT_REG register

// output assign for SPA_SMAP_TX_SVC_CNT_REG
assign o_SMAP_TX_SVC_CNT[31:0]	= 32'h0 /* add logic */ ;


// SPA_SMAP_START_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_SMAP_START[0:0]	<= 1`h0;
	end
	else if (w_addr02e0_wr) begin
		r_SMAP_START[0:0]	<= i_PWDATA[0:0];
	end
	else begin
		r_SMAP_START[0:0]	<= r_SMAP_START[0:0];
	end
end

// output assign for SPA_SMAP_START_REG
assign o_SMAP_START[0:0]	= r_SMAP_START[0:0];


// SPA_SMAP_BAND_CNT_REG register

// output assign for SPA_SMAP_BAND_CNT_REG
assign o_SMAP_BAND_CNT[7:0]	= 8'h0 /* add logic */ ;


// SPA_BDS_DMA_CON_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_BDS_OUT_BANDS[7:0]	<= 8`hFF;
	end
	else if (w_addr0300_wr) begin
		r_BDS_OUT_BANDS[7:0]	<= i_PWDATA[23:16];
	end
	else begin
		r_BDS_OUT_BANDS[7:0]	<= r_BDS_OUT_BANDS[7:0];
	end
end

// output assign for SPA_BDS_DMA_CON_REG
assign o_BDS_OUT_BANDS[7:0]	= r_BDS_OUT_BANDS[7:0];


// SPA_BDS_DMA_ADDR_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_BDS_ADDR[31:0]	<= 32`h0;
	end
	else if (w_addr0304_wr) begin
		r_BDS_ADDR[31:0]	<= i_PWDATA[31:0];
	end
	else begin
		r_BDS_ADDR[31:0]	<= r_BDS_ADDR[31:0];
	end
end

// output assign for SPA_BDS_DMA_ADDR_REG
assign o_BDS_ADDR[31:0]	= r_BDS_ADDR[31:0];


// SPA_BDS_DMA_ADDR_INCR_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_BDS_ADDR_INCR[31:0]	<= 32`h0;
	end
	else if (w_addr0308_wr) begin
		r_BDS_ADDR_INCR[31:0]	<= i_PWDATA[31:0];
	end
	else begin
		r_BDS_ADDR_INCR[31:0]	<= r_BDS_ADDR_INCR[31:0];
	end
end

// output assign for SPA_BDS_DMA_ADDR_INCR_REG
assign o_BDS_ADDR_INCR[31:0]	= r_BDS_ADDR_INCR[31:0];


// SPA_BDS_DMA_STATUS_REG register

// output assign for SPA_BDS_DMA_STATUS_REG
assign o_BDS_TX_BUSY[0:0]	= 1'h0 /* add logic */ ;
assign o_BDS_OUT_LINES[15:0]	= 16'h0 /* add logic */ ;


// SPA_BDS_TX_ADDR_MAX_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_BDS_TX_ADDR_MAX[31:0]	<= 32`hFFFFFFFF;
	end
	else if (w_addr0310_wr) begin
		r_BDS_TX_ADDR_MAX[31:0]	<= i_PWDATA[31:0];
	end
	else begin
		r_BDS_TX_ADDR_MAX[31:0]	<= r_BDS_TX_ADDR_MAX[31:0];
	end
end

// output assign for SPA_BDS_TX_ADDR_MAX_REG
assign o_BDS_TX_ADDR_MAX[31:0]	= r_BDS_TX_ADDR_MAX[31:0];


// SPA_BDS_TX_ADDR_MIN_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_BDS_TX_ADDR_MIN[31:0]	<= 32`h0;
	end
	else if (w_addr0314_wr) begin
		r_BDS_TX_ADDR_MIN[31:0]	<= i_PWDATA[31:0];
	end
	else begin
		r_BDS_TX_ADDR_MIN[31:0]	<= r_BDS_TX_ADDR_MIN[31:0];
	end
end

// output assign for SPA_BDS_TX_ADDR_MIN_REG
assign o_BDS_TX_ADDR_MIN[31:0]	= r_BDS_TX_ADDR_MIN[31:0];


// SPA_BDS_TX_CUR_ADDR_REG register

// output assign for SPA_BDS_TX_CUR_ADDR_REG
assign o_BDS_TX_CUR_ADDR[31:0]	= 32'h0 /* add logic */ ;


// SPA_BDS_TX_SVC_CNT_REG register

// output assign for SPA_BDS_TX_SVC_CNT_REG
assign o_BDS_TX_SVC_CNT[31:0]	= 32'h0 /* add logic */ ;


// SPA_BDS_START_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_BDS_START[0:0]	<= 1`h0;
	end
	else if (w_addr0320_wr) begin
		r_BDS_START[0:0]	<= i_PWDATA[0:0];
	end
	else begin
		r_BDS_START[0:0]	<= r_BDS_START[0:0];
	end
end

// output assign for SPA_BDS_START_REG
assign o_BDS_START[0:0]	= r_BDS_START[0:0];


// SPA_BDS_BAND_CNT_REG register

// output assign for SPA_BDS_BAND_CNT_REG
assign o_BDS_BAND_CNT[7:0]	= 8'h0 /* add logic */ ;


// SPA_RX_CH0_CRC_REG register

// output assign for SPA_RX_CH0_CRC_REG
assign o_RX_CH0_CRC[31:0]	= 32'h0 /* add logic */ ;


// SPA_RX_CH1_CRC_REG register

// output assign for SPA_RX_CH1_CRC_REG
assign o_RX_CH1_CRC[31:0]	= 32'h0 /* add logic */ ;


// SPA_RX_CH2_CRC_REG register

// output assign for SPA_RX_CH2_CRC_REG
assign o_RX_CH2_CRC[31:0]	= 32'h0 /* add logic */ ;


// SPA_RC1_CH0_CRC_REG register

// output assign for SPA_RC1_CH0_CRC_REG
assign o_RC1_CH0_CRC[31:0]	= 32'h0 /* add logic */ ;


// SPA_RC1_CH1_CRC_REG register

// output assign for SPA_RC1_CH1_CRC_REG
assign o_RC1_CH1_CRC[31:0]	= 32'h0 /* add logic */ ;


// SPA_RC1_CH2_CRC_REG register

// output assign for SPA_RC1_CH2_CRC_REG
assign o_RC1_CH2_CRC[31:0]	= 32'h0 /* add logic */ ;


// SPA_RC1_CH0_CRC_DEBUG_REG register

// output assign for SPA_RC1_CH0_CRC_DEBUG_REG
assign o_RC1_CH0_CRC_DEBUG[31:0]	= 32'h0 /* add logic */ ;


// SPA_RC1_CH1_CRC_DEBUG_REG register

// output assign for SPA_RC1_CH1_CRC_DEBUG_REG
assign o_RC1_CH1_CRC_DEBUG[31:0]	= 32'h0 /* add logic */ ;


// SPA_RC1_CH2_CRC_DEBUG_REG register

// output assign for SPA_RC1_CH2_CRC_DEBUG_REG
assign o_RC1_CH2_CRC_DEBUG[31:0]	= 32'h0 /* add logic */ ;


// SPA_S1D_CH0_CRC_REG register

// output assign for SPA_S1D_CH0_CRC_REG
assign o_S1D_CH0_CRC[31:0]	= 32'h0 /* add logic */ ;


// SPA_S1D_CH1_CRC_REG register

// output assign for SPA_S1D_CH1_CRC_REG
assign o_S1D_CH1_CRC[31:0]	= 32'h0 /* add logic */ ;


// SPA_S1D_CH2_CRC_REG register

// output assign for SPA_S1D_CH2_CRC_REG
assign o_S1D_CH2_CRC[31:0]	= 32'h0 /* add logic */ ;


// SPA_SEG1_CH0_CRC_REG register

// output assign for SPA_SEG1_CH0_CRC_REG
assign o_SEG1_CH0_CRC[31:0]	= 32'h0 /* add logic */ ;


// SPA_SEG1_CH1_CRC_REG register

// output assign for SPA_SEG1_CH1_CRC_REG
assign o_SEG1_CH1_CRC[31:0]	= 32'h0 /* add logic */ ;


// SPA_SEG1_CH2_CRC_REG register

// output assign for SPA_SEG1_CH2_CRC_REG
assign o_SEG1_CH2_CRC[31:0]	= 32'h0 /* add logic */ ;


// SPA_SEG1_ATT_CRC_REG register

// output assign for SPA_SEG1_ATT_CRC_REG
assign o_SEG1_ATT_CRC[31:0]	= 32'h0 /* add logic */ ;


// SPA_SCC_CH0_CRC_REG register

// output assign for SPA_SCC_CH0_CRC_REG
assign o_SCC_CH0_CRC[31:0]	= 32'h0 /* add logic */ ;


// SPA_SCC_CH1_CRC_REG register

// output assign for SPA_SCC_CH1_CRC_REG
assign o_SCC_CH1_CRC[31:0]	= 32'h0 /* add logic */ ;


// SPA_SCC_CH2_CRC_REG register

// output assign for SPA_SCC_CH2_CRC_REG
assign o_SCC_CH2_CRC[31:0]	= 32'h0 /* add logic */ ;


// SPA_SCC_ATT_CRC_REG register

// output assign for SPA_SCC_ATT_CRC_REG
assign o_SCC_ATT_CRC[31:0]	= 32'h0 /* add logic */ ;


// SPA_SEG2_CH0_CRC_REG register

// output assign for SPA_SEG2_CH0_CRC_REG
assign o_SEG2_CH0_CRC[31:0]	= 32'h0 /* add logic */ ;


// SPA_SEG2_CH1_CRC_REG register

// output assign for SPA_SEG2_CH1_CRC_REG
assign o_SEG2_CH1_CRC[31:0]	= 32'h0 /* add logic */ ;


// SPA_SEG2_CH2_CRC_REG register

// output assign for SPA_SEG2_CH2_CRC_REG
assign o_SEG2_CH2_CRC[31:0]	= 32'h0 /* add logic */ ;


// SPA_SEG2_ATT_CRC_REG register

// output assign for SPA_SEG2_ATT_CRC_REG
assign o_SEG2_ATT_CRC[31:0]	= 32'h0 /* add logic */ ;


// SPA_BSSA_CH0_CRC_REG register

// output assign for SPA_BSSA_CH0_CRC_REG
assign o_BSSA_CH0_CRC[31:0]	= 32'h0 /* add logic */ ;


// SPA_BSSA_CH1_CRC_REG register

// output assign for SPA_BSSA_CH1_CRC_REG
assign o_BSSA_CH1_CRC[31:0]	= 32'h0 /* add logic */ ;


// SPA_BSSA_CH2_CRC_REG register

// output assign for SPA_BSSA_CH2_CRC_REG
assign o_BSSA_CH2_CRC[31:0]	= 32'h0 /* add logic */ ;


// SPA_DMATX_CH0_CRC_REG register

// output assign for SPA_DMATX_CH0_CRC_REG
assign o_DMATX_CH0_CRC[31:0]	= 32'h0 /* add logic */ ;


// SPA_DMATX_CH1_CRC_REG register

// output assign for SPA_DMATX_CH1_CRC_REG
assign o_DMATX_CH1_CRC[31:0]	= 32'h0 /* add logic */ ;


// SPA_DMATX_CH2_CRC_REG register

// output assign for SPA_DMATX_CH2_CRC_REG
assign o_DMATX_CH2_CRC[31:0]	= 32'h0 /* add logic */ ;


// SPA_RC2_CH0_CRC_REG register

// output assign for SPA_RC2_CH0_CRC_REG
assign o_RC2_CH0_CRC[31:0]	= 32'h0 /* add logic */ ;


// SPA_RC2_CH1_CRC_REG register

// output assign for SPA_RC2_CH1_CRC_REG
assign o_RC2_CH1_CRC[31:0]	= 32'h0 /* add logic */ ;


// SPA_RC2_CH2_CRC_REG register

// output assign for SPA_RC2_CH2_CRC_REG
assign o_RC2_CH2_CRC[31:0]	= 32'h0 /* add logic */ ;


// SPA_ADAPT_CRC_REG register

// output assign for SPA_ADAPT_CRC_REG
assign o_ADAPT_CRC[31:0]	= 32'h0 /* add logic */ ;


// SPA_SMAP_CRC_REG register

// output assign for SPA_SMAP_CRC_REG
assign o_SMAP_CRC[31:0]	= 32'h0 /* add logic */ ;


// SPA_BDS_CRC_REG register

// output assign for SPA_BDS_CRC_REG
assign o_BDS_CRC[31:0]	= 32'h0 /* add logic */ ;


// SPA_VSD_CH0_CRC_REG register

// output assign for SPA_VSD_CH0_CRC_REG
assign o_VSD_CH0_CRC[31:0]	= 32'h0 /* add logic */ ;


// SPA_VSD_CH1_CRC_REG register

// output assign for SPA_VSD_CH1_CRC_REG
assign o_VSD_CH1_CRC[31:0]	= 32'h0 /* add logic */ ;


// SPA_VSD_CH2_CRC_REG register

// output assign for SPA_VSD_CH2_CRC_REG
assign o_VSD_CH2_CRC[31:0]	= 32'h0 /* add logic */ ;


// SPA_CIS_CH0_CRC_REG register

// output assign for SPA_CIS_CH0_CRC_REG
assign o_CIS_CH0_CRC[31:0]	= 32'h0 /* add logic */ ;


// SPA_CIS_CH1_CRC_REG register

// output assign for SPA_CIS_CH1_CRC_REG
assign o_CIS_CH1_CRC[31:0]	= 32'h0 /* add logic */ ;


// SPA_CIS_CH2_CRC_REG register

// output assign for SPA_CIS_CH2_CRC_REG
assign o_CIS_CH2_CRC[31:0]	= 32'h0 /* add logic */ ;


// SPA_BSSB_CH0_CRC_REG register

// output assign for SPA_BSSB_CH0_CRC_REG
assign o_BSSB_CH0_CRC[31:0]	= 32'h0 /* add logic */ ;


// SPA_BSSB_CH1_CRC_REG register

// output assign for SPA_BSSB_CH1_CRC_REG
assign o_BSSB_CH1_CRC[31:0]	= 32'h0 /* add logic */ ;


// SPA_BSSB_CH2_CRC_REG register

// output assign for SPA_BSSB_CH2_CRC_REG
assign o_BSSB_CH2_CRC[31:0]	= 32'h0 /* add logic */ ;


// SPA_S1D_DEBUG_FLAG_REG register

// output assign for SPA_S1D_DEBUG_FLAG_REG
assign o_DEBUG_FLAG[7:0]	= 8'h0 /* add logic */ ;


// SPA_SCC_DEBUG_FLAG_REG register

// output assign for SPA_SCC_DEBUG_FLAG_REG
assign o_DEBUG_FLAG[7:0]	= 8'h0 /* add logic */ ;


// SPA_BDS_DEBUG_FLAG_REG register

// output assign for SPA_BDS_DEBUG_FLAG_REG
assign o_DEBUG_FLAG[7:0]	= 8'h0 /* add logic */ ;


// SPA_BSSA_DEBUG_FLAG_REG register

// output assign for SPA_BSSA_DEBUG_FLAG_REG
assign o_BSSA_DEBUG_FLAG[7:0]	= 8'h0 /* add logic */ ;


// SPA_BSSB_DEBUG_FLAG_REG register

// output assign for SPA_BSSB_DEBUG_FLAG_REG
assign o_BSSB_DEBUG_FLAG[7:0]	= 8'h0 /* add logic */ ;


// SPA_VSD_A_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_VSC_DEBUG[1:0]	<= 2`h0;
		r_VSC_CUR_MEM_INIT[0:0]	<= 1`h0;
	end
	else if (w_addr0480_wr) begin
		r_VSC_DEBUG[1:0]	<= i_PWDATA[13:12];
		r_VSC_CUR_MEM_INIT[0:0]	<= i_PWDATA[30:30];
	end
	else begin
		r_VSC_DEBUG[1:0]	<= r_VSC_DEBUG[1:0];
		r_VSC_CUR_MEM_INIT[0:0]	<= r_VSC_CUR_MEM_INIT[0:0];
	end
end

// output assign for SPA_VSD_A_REG
assign o_VSC_DEBUG[1:0]	= r_VSC_DEBUG[1:0];
assign o_VSC_CUR_MEM_INIT[0:0]	= r_VSC_CUR_MEM_INIT[0:0];


// SPA_VSD_B_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_VSD_K_DEPTH_MIN[7:0]	<= 8`h08;
		r_VSD_TOP_BAND[3:0]	<= 4`h01;
	end
	else if (w_addr0484_wr) begin
		r_VSD_K_DEPTH_MIN[7:0]	<= i_PWDATA[7:0];
		r_VSD_TOP_BAND[3:0]	<= i_PWDATA[11:8];
	end
	else begin
		r_VSD_K_DEPTH_MIN[7:0]	<= r_VSD_K_DEPTH_MIN[7:0];
		r_VSD_TOP_BAND[3:0]	<= r_VSD_TOP_BAND[3:0];
	end
end

// output assign for SPA_VSD_B_REG
assign o_VSD_K_DEPTH_MIN[7:0]	= r_VSD_K_DEPTH_MIN[7:0];
assign o_VSD_TOP_BAND[3:0]	= r_VSD_TOP_BAND[3:0];


// SPA_VSD_C_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_VSD_K_DEPTH_MAX_TOP[7:0]	<= 8`h2A;
		r_VSD_K_DEPTH_MIN_TOP[7:0]	<= 8`h03;
		r_VSD_K_DEPTH_MAX[7:0]	<= 8`h0F;
		r_VSD_K_DEPTH_MID[7:0]	<= 8`h0E;
	end
	else if (w_addr0488_wr) begin
		r_VSD_K_DEPTH_MAX_TOP[7:0]	<= i_PWDATA[7:0];
		r_VSD_K_DEPTH_MIN_TOP[7:0]	<= i_PWDATA[15:8];
		r_VSD_K_DEPTH_MAX[7:0]	<= i_PWDATA[23:16];
		r_VSD_K_DEPTH_MID[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_VSD_K_DEPTH_MAX_TOP[7:0]	<= r_VSD_K_DEPTH_MAX_TOP[7:0];
		r_VSD_K_DEPTH_MIN_TOP[7:0]	<= r_VSD_K_DEPTH_MIN_TOP[7:0];
		r_VSD_K_DEPTH_MAX[7:0]	<= r_VSD_K_DEPTH_MAX[7:0];
		r_VSD_K_DEPTH_MID[7:0]	<= r_VSD_K_DEPTH_MID[7:0];
	end
end

// output assign for SPA_VSD_C_REG
assign o_VSD_K_DEPTH_MAX_TOP[7:0]	= r_VSD_K_DEPTH_MAX_TOP[7:0];
assign o_VSD_K_DEPTH_MIN_TOP[7:0]	= r_VSD_K_DEPTH_MIN_TOP[7:0];
assign o_VSD_K_DEPTH_MAX[7:0]	= r_VSD_K_DEPTH_MAX[7:0];
assign o_VSD_K_DEPTH_MID[7:0]	= r_VSD_K_DEPTH_MID[7:0];


// SPA_VSC_D_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_VSD_W_DEPTH_MAX[7:0]	<= 8`h21;
		r_VSD_W_DEPTH_MID[7:0]	<= 8`h08;
		r_VSD_W_DEPTH_MIN[7:0]	<= 8`h03;
		r_VSD_K_DEPTH_COND[6:0]	<= 7`h0F;
	end
	else if (w_addr048c_wr) begin
		r_VSD_W_DEPTH_MAX[7:0]	<= i_PWDATA[7:0];
		r_VSD_W_DEPTH_MID[7:0]	<= i_PWDATA[15:8];
		r_VSD_W_DEPTH_MIN[7:0]	<= i_PWDATA[23:16];
		r_VSD_K_DEPTH_COND[6:0]	<= i_PWDATA[30:24];
	end
	else begin
		r_VSD_W_DEPTH_MAX[7:0]	<= r_VSD_W_DEPTH_MAX[7:0];
		r_VSD_W_DEPTH_MID[7:0]	<= r_VSD_W_DEPTH_MID[7:0];
		r_VSD_W_DEPTH_MIN[7:0]	<= r_VSD_W_DEPTH_MIN[7:0];
		r_VSD_K_DEPTH_COND[6:0]	<= r_VSD_K_DEPTH_COND[6:0];
	end
end

// output assign for SPA_VSC_D_REG
assign o_VSD_W_DEPTH_MAX[7:0]	= r_VSD_W_DEPTH_MAX[7:0];
assign o_VSD_W_DEPTH_MID[7:0]	= r_VSD_W_DEPTH_MID[7:0];
assign o_VSD_W_DEPTH_MIN[7:0]	= r_VSD_W_DEPTH_MIN[7:0];
assign o_VSD_K_DEPTH_COND[6:0]	= r_VSD_K_DEPTH_COND[6:0];


// SPA_VSD_E_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_VSD_THICKNESS_TH[7:0]	<= 8`h0B;
		r_VSD_W_DEPTH_COND[7:0]	<= 8`h80;
		r_VSD_W_DEPTH_MAX_TOP[7:0]	<= 8`h42;
		r_VSD_W_DEPTH_MIN_TOP[7:0]	<= 8`h01;
	end
	else if (w_addr0490_wr) begin
		r_VSD_THICKNESS_TH[7:0]	<= i_PWDATA[7:0];
		r_VSD_W_DEPTH_COND[7:0]	<= i_PWDATA[15:8];
		r_VSD_W_DEPTH_MAX_TOP[7:0]	<= i_PWDATA[23:16];
		r_VSD_W_DEPTH_MIN_TOP[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_VSD_THICKNESS_TH[7:0]	<= r_VSD_THICKNESS_TH[7:0];
		r_VSD_W_DEPTH_COND[7:0]	<= r_VSD_W_DEPTH_COND[7:0];
		r_VSD_W_DEPTH_MAX_TOP[7:0]	<= r_VSD_W_DEPTH_MAX_TOP[7:0];
		r_VSD_W_DEPTH_MIN_TOP[7:0]	<= r_VSD_W_DEPTH_MIN_TOP[7:0];
	end
end

// output assign for SPA_VSD_E_REG
assign o_VSD_THICKNESS_TH[7:0]	= r_VSD_THICKNESS_TH[7:0];
assign o_VSD_W_DEPTH_COND[7:0]	= r_VSD_W_DEPTH_COND[7:0];
assign o_VSD_W_DEPTH_MAX_TOP[7:0]	= r_VSD_W_DEPTH_MAX_TOP[7:0];
assign o_VSD_W_DEPTH_MIN_TOP[7:0]	= r_VSD_W_DEPTH_MIN_TOP[7:0];


// SPA_VSD_F_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_VSD_CHROMA_TH2_TOP[6:0]	<= 7`h1A;
		r_VSD_CHROMA_TH1_TOP[6:0]	<= 7`h11;
		r_VSD_CHROMA_TH2[6:0]	<= 7`h0D;
		r_VSD_CHROMA_TH1[6:0]	<= 7`h23;
	end
	else if (w_addr0494_wr) begin
		r_VSD_CHROMA_TH2_TOP[6:0]	<= i_PWDATA[6:0];
		r_VSD_CHROMA_TH1_TOP[6:0]	<= i_PWDATA[14:8];
		r_VSD_CHROMA_TH2[6:0]	<= i_PWDATA[22:16];
		r_VSD_CHROMA_TH1[6:0]	<= i_PWDATA[30:24];
	end
	else begin
		r_VSD_CHROMA_TH2_TOP[6:0]	<= r_VSD_CHROMA_TH2_TOP[6:0];
		r_VSD_CHROMA_TH1_TOP[6:0]	<= r_VSD_CHROMA_TH1_TOP[6:0];
		r_VSD_CHROMA_TH2[6:0]	<= r_VSD_CHROMA_TH2[6:0];
		r_VSD_CHROMA_TH1[6:0]	<= r_VSD_CHROMA_TH1[6:0];
	end
end

// output assign for SPA_VSD_F_REG
assign o_VSD_CHROMA_TH2_TOP[6:0]	= r_VSD_CHROMA_TH2_TOP[6:0];
assign o_VSD_CHROMA_TH1_TOP[6:0]	= r_VSD_CHROMA_TH1_TOP[6:0];
assign o_VSD_CHROMA_TH2[6:0]	= r_VSD_CHROMA_TH2[6:0];
assign o_VSD_CHROMA_TH1[6:0]	= r_VSD_CHROMA_TH1[6:0];


// SPA_VSD_G_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_VSD_FREQUENCY_TH[7:0]	<= 8`hA8;
		r_VSD_CONTINUITY_TH[7:0]	<= 8`h46;
	end
	else if (w_addr0498_wr) begin
		r_VSD_FREQUENCY_TH[7:0]	<= i_PWDATA[7:0];
		r_VSD_CONTINUITY_TH[7:0]	<= i_PWDATA[15:8];
	end
	else begin
		r_VSD_FREQUENCY_TH[7:0]	<= r_VSD_FREQUENCY_TH[7:0];
		r_VSD_CONTINUITY_TH[7:0]	<= r_VSD_CONTINUITY_TH[7:0];
	end
end

// output assign for SPA_VSD_G_REG
assign o_VSD_FREQUENCY_TH[7:0]	= r_VSD_FREQUENCY_TH[7:0];
assign o_VSD_CONTINUITY_TH[7:0]	= r_VSD_CONTINUITY_TH[7:0];


// SPA_VSD_H_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_VSD_REFINE_TH[12:0]	<= 13`h0;
		r_VSD_REFINE_EN[0:0]	<= 1`h0;
	end
	else if (w_addr049c_wr) begin
		r_VSD_REFINE_TH[12:0]	<= i_PWDATA[12:0];
		r_VSD_REFINE_EN[0:0]	<= i_PWDATA[16:16];
	end
	else begin
		r_VSD_REFINE_TH[12:0]	<= r_VSD_REFINE_TH[12:0];
		r_VSD_REFINE_EN[0:0]	<= r_VSD_REFINE_EN[0:0];
	end
end

// output assign for SPA_VSD_H_REG
assign o_VSD_REFINE_TH[12:0]	= r_VSD_REFINE_TH[12:0];
assign o_VSD_REFINE_EN[0:0]	= r_VSD_REFINE_EN[0:0];


// SPA_CIS_SUB_COEF_R_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_CIS_SUB_COEF_R1[8:0]	<= 9`h154;
		r_CIS_SUB_COEF_R2[8:0]	<= 9`hAC;
	end
	else if (w_addr04c0_wr) begin
		r_CIS_SUB_COEF_R1[8:0]	<= i_PWDATA[8:0];
		r_CIS_SUB_COEF_R2[8:0]	<= i_PWDATA[20:12];
	end
	else begin
		r_CIS_SUB_COEF_R1[8:0]	<= r_CIS_SUB_COEF_R1[8:0];
		r_CIS_SUB_COEF_R2[8:0]	<= r_CIS_SUB_COEF_R2[8:0];
	end
end

// output assign for SPA_CIS_SUB_COEF_R_REG
assign o_CIS_SUB_COEF_R1[8:0]	= r_CIS_SUB_COEF_R1[8:0];
assign o_CIS_SUB_COEF_R2[8:0]	= r_CIS_SUB_COEF_R2[8:0];


// SPA_CIS_SUB_COEF_G_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_CIS_SUB_COEF_G0[8:0]	<= 9`h54;
		r_CIS_SUB_COEF_G1[8:0]	<= 9`h158;
		r_CIS_SUB_COEF_G2[8:0]	<= 9`h54;
	end
	else if (w_addr04c4_wr) begin
		r_CIS_SUB_COEF_G0[8:0]	<= i_PWDATA[8:0];
		r_CIS_SUB_COEF_G1[8:0]	<= i_PWDATA[17:9];
		r_CIS_SUB_COEF_G2[8:0]	<= i_PWDATA[26:18];
	end
	else begin
		r_CIS_SUB_COEF_G0[8:0]	<= r_CIS_SUB_COEF_G0[8:0];
		r_CIS_SUB_COEF_G1[8:0]	<= r_CIS_SUB_COEF_G1[8:0];
		r_CIS_SUB_COEF_G2[8:0]	<= r_CIS_SUB_COEF_G2[8:0];
	end
end

// output assign for SPA_CIS_SUB_COEF_G_REG
assign o_CIS_SUB_COEF_G0[8:0]	= r_CIS_SUB_COEF_G0[8:0];
assign o_CIS_SUB_COEF_G1[8:0]	= r_CIS_SUB_COEF_G1[8:0];
assign o_CIS_SUB_COEF_G2[8:0]	= r_CIS_SUB_COEF_G2[8:0];


// SPA_CIS_SUB_COEF_B_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_CIS_SUB_COEF_B0[8:0]	<= 9`hAC;
		r_CIS_SUB_COEF_B1[8:0]	<= 9`h154;
	end
	else if (w_addr04c8_wr) begin
		r_CIS_SUB_COEF_B0[8:0]	<= i_PWDATA[8:0];
		r_CIS_SUB_COEF_B1[8:0]	<= i_PWDATA[20:12];
	end
	else begin
		r_CIS_SUB_COEF_B0[8:0]	<= r_CIS_SUB_COEF_B0[8:0];
		r_CIS_SUB_COEF_B1[8:0]	<= r_CIS_SUB_COEF_B1[8:0];
	end
end

// output assign for SPA_CIS_SUB_COEF_B_REG
assign o_CIS_SUB_COEF_B0[8:0]	= r_CIS_SUB_COEF_B0[8:0];
assign o_CIS_SUB_COEF_B1[8:0]	= r_CIS_SUB_COEF_B1[8:0];


// SPA_RC1_SHIFT_VAL_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_RC1_SHIFT_VAL[31:0]	<= 32`h0;
	end
	else if (w_addr0500_wr) begin
		r_RC1_SHIFT_VAL[31:0]	<= i_PWDATA[31:0];
	end
	else begin
		r_RC1_SHIFT_VAL[31:0]	<= r_RC1_SHIFT_VAL[31:0];
	end
end

// output assign for SPA_RC1_SHIFT_VAL_REG
assign o_RC1_SHIFT_VAL[31:0]	= r_RC1_SHIFT_VAL[31:0];


// SPA_RC1_SHIFT_OFST_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_RC1_SHIFT_OFST[31:0]	<= 32`h0;
	end
	else if (w_addr0504_wr) begin
		r_RC1_SHIFT_OFST[31:0]	<= i_PWDATA[31:0];
	end
	else begin
		r_RC1_SHIFT_OFST[31:0]	<= r_RC1_SHIFT_OFST[31:0];
	end
end

// output assign for SPA_RC1_SHIFT_OFST_REG
assign o_RC1_SHIFT_OFST[31:0]	= r_RC1_SHIFT_OFST[31:0];


// SPA_RC1_LOOP_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_RC1_LOOP_Y[2:0]	<= 3`h0;
		r_RC1_LOOP_X[2:0]	<= 3`h0;
	end
	else if (w_addr0508_wr) begin
		r_RC1_LOOP_Y[2:0]	<= i_PWDATA[2:0];
		r_RC1_LOOP_X[2:0]	<= i_PWDATA[18:16];
	end
	else begin
		r_RC1_LOOP_Y[2:0]	<= r_RC1_LOOP_Y[2:0];
		r_RC1_LOOP_X[2:0]	<= r_RC1_LOOP_X[2:0];
	end
end

// output assign for SPA_RC1_LOOP_REG
assign o_RC1_LOOP_Y[2:0]	= r_RC1_LOOP_Y[2:0];
assign o_RC1_LOOP_X[2:0]	= r_RC1_LOOP_X[2:0];


// SPA_RC1_X_COF_00_01_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_RC1_X_COF_01[11:0]	<= 12`h0;
		r_RC1_X_COF_00[11:0]	<= 12`h0;
	end
	else if (w_addr0510_wr) begin
		r_RC1_X_COF_01[11:0]	<= i_PWDATA[11:0];
		r_RC1_X_COF_00[11:0]	<= i_PWDATA[27:16];
	end
	else begin
		r_RC1_X_COF_01[11:0]	<= r_RC1_X_COF_01[11:0];
		r_RC1_X_COF_00[11:0]	<= r_RC1_X_COF_00[11:0];
	end
end

// output assign for SPA_RC1_X_COF_00_01_REG
assign o_RC1_X_COF_01[11:0]	= r_RC1_X_COF_01[11:0];
assign o_RC1_X_COF_00[11:0]	= r_RC1_X_COF_00[11:0];


// SPA_RC1_X_COF_02_03_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_RC1_X_COF_03[11:0]	<= 12`h0;
		r_RC1_X_COF_02[11:0]	<= 12`h0;
	end
	else if (w_addr0514_wr) begin
		r_RC1_X_COF_03[11:0]	<= i_PWDATA[11:0];
		r_RC1_X_COF_02[11:0]	<= i_PWDATA[27:16];
	end
	else begin
		r_RC1_X_COF_03[11:0]	<= r_RC1_X_COF_03[11:0];
		r_RC1_X_COF_02[11:0]	<= r_RC1_X_COF_02[11:0];
	end
end

// output assign for SPA_RC1_X_COF_02_03_REG
assign o_RC1_X_COF_03[11:0]	= r_RC1_X_COF_03[11:0];
assign o_RC1_X_COF_02[11:0]	= r_RC1_X_COF_02[11:0];


// SPA_RC1_X_COF_10_11_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_RC1_X_COF_11[11:0]	<= 12`h0;
		r_RC1_X_COF_10[11:0]	<= 12`h0;
	end
	else if (w_addr0518_wr) begin
		r_RC1_X_COF_11[11:0]	<= i_PWDATA[11:0];
		r_RC1_X_COF_10[11:0]	<= i_PWDATA[27:16];
	end
	else begin
		r_RC1_X_COF_11[11:0]	<= r_RC1_X_COF_11[11:0];
		r_RC1_X_COF_10[11:0]	<= r_RC1_X_COF_10[11:0];
	end
end

// output assign for SPA_RC1_X_COF_10_11_REG
assign o_RC1_X_COF_11[11:0]	= r_RC1_X_COF_11[11:0];
assign o_RC1_X_COF_10[11:0]	= r_RC1_X_COF_10[11:0];


// SPA_RC1_X_COF_12_13_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_RC1_X_COF_13[11:0]	<= 12`h0;
		r_RC1_X_COF_12[11:0]	<= 12`h0;
	end
	else if (w_addr051c_wr) begin
		r_RC1_X_COF_13[11:0]	<= i_PWDATA[11:0];
		r_RC1_X_COF_12[11:0]	<= i_PWDATA[27:16];
	end
	else begin
		r_RC1_X_COF_13[11:0]	<= r_RC1_X_COF_13[11:0];
		r_RC1_X_COF_12[11:0]	<= r_RC1_X_COF_12[11:0];
	end
end

// output assign for SPA_RC1_X_COF_12_13_REG
assign o_RC1_X_COF_13[11:0]	= r_RC1_X_COF_13[11:0];
assign o_RC1_X_COF_12[11:0]	= r_RC1_X_COF_12[11:0];


// SPA_RC1_X_COF_20_21_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_RC1_X_COF_21[11:0]	<= 12`h0;
		r_RC1_X_COF_20[11:0]	<= 12`h0;
	end
	else if (w_addr0520_wr) begin
		r_RC1_X_COF_21[11:0]	<= i_PWDATA[11:0];
		r_RC1_X_COF_20[11:0]	<= i_PWDATA[27:16];
	end
	else begin
		r_RC1_X_COF_21[11:0]	<= r_RC1_X_COF_21[11:0];
		r_RC1_X_COF_20[11:0]	<= r_RC1_X_COF_20[11:0];
	end
end

// output assign for SPA_RC1_X_COF_20_21_REG
assign o_RC1_X_COF_21[11:0]	= r_RC1_X_COF_21[11:0];
assign o_RC1_X_COF_20[11:0]	= r_RC1_X_COF_20[11:0];


// SPA_RC1_X_COF_22_23_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_RC1_X_COF_23[11:0]	<= 12`h0;
		r_RC1_X_COF_22[11:0]	<= 12`h0;
	end
	else if (w_addr0524_wr) begin
		r_RC1_X_COF_23[11:0]	<= i_PWDATA[11:0];
		r_RC1_X_COF_22[11:0]	<= i_PWDATA[27:16];
	end
	else begin
		r_RC1_X_COF_23[11:0]	<= r_RC1_X_COF_23[11:0];
		r_RC1_X_COF_22[11:0]	<= r_RC1_X_COF_22[11:0];
	end
end

// output assign for SPA_RC1_X_COF_22_23_REG
assign o_RC1_X_COF_23[11:0]	= r_RC1_X_COF_23[11:0];
assign o_RC1_X_COF_22[11:0]	= r_RC1_X_COF_22[11:0];


// SPA_RC1_X_COF_30_31_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_RC1_X_COF_31[11:0]	<= 12`h0;
		r_RC1_X_COF_30[11:0]	<= 12`h0;
	end
	else if (w_addr0528_wr) begin
		r_RC1_X_COF_31[11:0]	<= i_PWDATA[11:0];
		r_RC1_X_COF_30[11:0]	<= i_PWDATA[27:16];
	end
	else begin
		r_RC1_X_COF_31[11:0]	<= r_RC1_X_COF_31[11:0];
		r_RC1_X_COF_30[11:0]	<= r_RC1_X_COF_30[11:0];
	end
end

// output assign for SPA_RC1_X_COF_30_31_REG
assign o_RC1_X_COF_31[11:0]	= r_RC1_X_COF_31[11:0];
assign o_RC1_X_COF_30[11:0]	= r_RC1_X_COF_30[11:0];


// SPA_RC1_X_COF_32_33_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_RC1_X_COF_33[11:0]	<= 12`h0;
		r_RC1_X_COF_32[11:0]	<= 12`h0;
	end
	else if (w_addr052c_wr) begin
		r_RC1_X_COF_33[11:0]	<= i_PWDATA[11:0];
		r_RC1_X_COF_32[11:0]	<= i_PWDATA[27:16];
	end
	else begin
		r_RC1_X_COF_33[11:0]	<= r_RC1_X_COF_33[11:0];
		r_RC1_X_COF_32[11:0]	<= r_RC1_X_COF_32[11:0];
	end
end

// output assign for SPA_RC1_X_COF_32_33_REG
assign o_RC1_X_COF_33[11:0]	= r_RC1_X_COF_33[11:0];
assign o_RC1_X_COF_32[11:0]	= r_RC1_X_COF_32[11:0];


// SPA_RC1_Y_COF_00_01_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_RC1_Y_COF_01[11:0]	<= 12`h0;
		r_RC1_Y_COF_00[11:0]	<= 12`h0;
	end
	else if (w_addr0530_wr) begin
		r_RC1_Y_COF_01[11:0]	<= i_PWDATA[11:0];
		r_RC1_Y_COF_00[11:0]	<= i_PWDATA[27:16];
	end
	else begin
		r_RC1_Y_COF_01[11:0]	<= r_RC1_Y_COF_01[11:0];
		r_RC1_Y_COF_00[11:0]	<= r_RC1_Y_COF_00[11:0];
	end
end

// output assign for SPA_RC1_Y_COF_00_01_REG
assign o_RC1_Y_COF_01[11:0]	= r_RC1_Y_COF_01[11:0];
assign o_RC1_Y_COF_00[11:0]	= r_RC1_Y_COF_00[11:0];


// SPA_RC1_Y_COF_02_03_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_RC1_Y_COF_03[11:0]	<= 12`h0;
		r_RC1_Y_COF_02[11:0]	<= 12`h0;
	end
	else if (w_addr0534_wr) begin
		r_RC1_Y_COF_03[11:0]	<= i_PWDATA[11:0];
		r_RC1_Y_COF_02[11:0]	<= i_PWDATA[27:16];
	end
	else begin
		r_RC1_Y_COF_03[11:0]	<= r_RC1_Y_COF_03[11:0];
		r_RC1_Y_COF_02[11:0]	<= r_RC1_Y_COF_02[11:0];
	end
end

// output assign for SPA_RC1_Y_COF_02_03_REG
assign o_RC1_Y_COF_03[11:0]	= r_RC1_Y_COF_03[11:0];
assign o_RC1_Y_COF_02[11:0]	= r_RC1_Y_COF_02[11:0];


// SPA_RC1_Y_COF_10_11_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_RC1_Y_COF_11[11:0]	<= 12`h0;
		r_RC1_Y_COF_10[11:0]	<= 12`h0;
	end
	else if (w_addr0538_wr) begin
		r_RC1_Y_COF_11[11:0]	<= i_PWDATA[11:0];
		r_RC1_Y_COF_10[11:0]	<= i_PWDATA[27:16];
	end
	else begin
		r_RC1_Y_COF_11[11:0]	<= r_RC1_Y_COF_11[11:0];
		r_RC1_Y_COF_10[11:0]	<= r_RC1_Y_COF_10[11:0];
	end
end

// output assign for SPA_RC1_Y_COF_10_11_REG
assign o_RC1_Y_COF_11[11:0]	= r_RC1_Y_COF_11[11:0];
assign o_RC1_Y_COF_10[11:0]	= r_RC1_Y_COF_10[11:0];


// SPA_RC1_Y_COF_12_13_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_RC1_Y_COF_13[11:0]	<= 12`h0;
		r_RC1_Y_COF_12[11:0]	<= 12`h0;
	end
	else if (w_addr053c_wr) begin
		r_RC1_Y_COF_13[11:0]	<= i_PWDATA[11:0];
		r_RC1_Y_COF_12[11:0]	<= i_PWDATA[27:16];
	end
	else begin
		r_RC1_Y_COF_13[11:0]	<= r_RC1_Y_COF_13[11:0];
		r_RC1_Y_COF_12[11:0]	<= r_RC1_Y_COF_12[11:0];
	end
end

// output assign for SPA_RC1_Y_COF_12_13_REG
assign o_RC1_Y_COF_13[11:0]	= r_RC1_Y_COF_13[11:0];
assign o_RC1_Y_COF_12[11:0]	= r_RC1_Y_COF_12[11:0];


// SPA_RC1_Y_COF_20_21_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_RC1_Y_COF_21[11:0]	<= 12`h0;
		r_RC1_Y_COF_20[11:0]	<= 12`h0;
	end
	else if (w_addr0540_wr) begin
		r_RC1_Y_COF_21[11:0]	<= i_PWDATA[11:0];
		r_RC1_Y_COF_20[11:0]	<= i_PWDATA[27:16];
	end
	else begin
		r_RC1_Y_COF_21[11:0]	<= r_RC1_Y_COF_21[11:0];
		r_RC1_Y_COF_20[11:0]	<= r_RC1_Y_COF_20[11:0];
	end
end

// output assign for SPA_RC1_Y_COF_20_21_REG
assign o_RC1_Y_COF_21[11:0]	= r_RC1_Y_COF_21[11:0];
assign o_RC1_Y_COF_20[11:0]	= r_RC1_Y_COF_20[11:0];


// SPA_RC1_Y_COF_22_23_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_RC1_Y_COF_23[11:0]	<= 12`h0;
		r_RC1_Y_COF_22[11:0]	<= 12`h0;
	end
	else if (w_addr0544_wr) begin
		r_RC1_Y_COF_23[11:0]	<= i_PWDATA[11:0];
		r_RC1_Y_COF_22[11:0]	<= i_PWDATA[27:16];
	end
	else begin
		r_RC1_Y_COF_23[11:0]	<= r_RC1_Y_COF_23[11:0];
		r_RC1_Y_COF_22[11:0]	<= r_RC1_Y_COF_22[11:0];
	end
end

// output assign for SPA_RC1_Y_COF_22_23_REG
assign o_RC1_Y_COF_23[11:0]	= r_RC1_Y_COF_23[11:0];
assign o_RC1_Y_COF_22[11:0]	= r_RC1_Y_COF_22[11:0];


// SPA_RC1_Y_COF_30_31_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_RC1_Y_COF_31[11:0]	<= 12`h0;
		r_RC1_Y_COF_30[11:0]	<= 12`h0;
	end
	else if (w_addr0548_wr) begin
		r_RC1_Y_COF_31[11:0]	<= i_PWDATA[11:0];
		r_RC1_Y_COF_30[11:0]	<= i_PWDATA[27:16];
	end
	else begin
		r_RC1_Y_COF_31[11:0]	<= r_RC1_Y_COF_31[11:0];
		r_RC1_Y_COF_30[11:0]	<= r_RC1_Y_COF_30[11:0];
	end
end

// output assign for SPA_RC1_Y_COF_30_31_REG
assign o_RC1_Y_COF_31[11:0]	= r_RC1_Y_COF_31[11:0];
assign o_RC1_Y_COF_30[11:0]	= r_RC1_Y_COF_30[11:0];


// SPA_RC1_Y_COF_32_33_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_RC1_Y_COF_33[11:0]	<= 12`h0;
		r_RC1_Y_COF_32[11:0]	<= 12`h0;
	end
	else if (w_addr054c_wr) begin
		r_RC1_Y_COF_33[11:0]	<= i_PWDATA[11:0];
		r_RC1_Y_COF_32[11:0]	<= i_PWDATA[27:16];
	end
	else begin
		r_RC1_Y_COF_33[11:0]	<= r_RC1_Y_COF_33[11:0];
		r_RC1_Y_COF_32[11:0]	<= r_RC1_Y_COF_32[11:0];
	end
end

// output assign for SPA_RC1_Y_COF_32_33_REG
assign o_RC1_Y_COF_33[11:0]	= r_RC1_Y_COF_33[11:0];
assign o_RC1_Y_COF_32[11:0]	= r_RC1_Y_COF_32[11:0];


// SPA_SEG1_CON_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_Enable_Y_text[0:0]	<= 1`h0;
	end
	else if (w_addr0580_wr) begin
		r_Enable_Y_text[0:0]	<= i_PWDATA[4:4];
	end
	else begin
		r_Enable_Y_text[0:0]	<= r_Enable_Y_text[0:0];
	end
end

// output assign for SPA_SEG1_CON_REG
assign o_Enable_Y_text[0:0]	= r_Enable_Y_text[0:0];


// SPA_SEG1_HVLINE_TH_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_HVline_level_th[7:0]	<= 8`hbe;
		r_HVline_minmaxdiff_th2[7:0]	<= 8`h3c;
		r_HVline_minmaxdiff_th1[7:0]	<= 8`h0a;
		r_HVline_diff_th[7:0]	<= 8`h14;
	end
	else if (w_addr0584_wr) begin
		r_HVline_level_th[7:0]	<= i_PWDATA[7:0];
		r_HVline_minmaxdiff_th2[7:0]	<= i_PWDATA[15:8];
		r_HVline_minmaxdiff_th1[7:0]	<= i_PWDATA[23:16];
		r_HVline_diff_th[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_HVline_level_th[7:0]	<= r_HVline_level_th[7:0];
		r_HVline_minmaxdiff_th2[7:0]	<= r_HVline_minmaxdiff_th2[7:0];
		r_HVline_minmaxdiff_th1[7:0]	<= r_HVline_minmaxdiff_th1[7:0];
		r_HVline_diff_th[7:0]	<= r_HVline_diff_th[7:0];
	end
end

// output assign for SPA_SEG1_HVLINE_TH_REG
assign o_HVline_level_th[7:0]	= r_HVline_level_th[7:0];
assign o_HVline_minmaxdiff_th2[7:0]	= r_HVline_minmaxdiff_th2[7:0];
assign o_HVline_minmaxdiff_th1[7:0]	= r_HVline_minmaxdiff_th1[7:0];
assign o_HVline_diff_th[7:0]	= r_HVline_diff_th[7:0];


// SPA_SEG1_EDGE_TH_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_Highfreq_th[7:0]	<= 8`h32;
		r_Lowfreq_th2[7:0]	<= 8`h14;
		r_Lowfreq_th[7:0]	<= 8`h32;
	end
	else if (w_addr0588_wr) begin
		r_Highfreq_th[7:0]	<= i_PWDATA[7:0];
		r_Lowfreq_th2[7:0]	<= i_PWDATA[15:8];
		r_Lowfreq_th[7:0]	<= i_PWDATA[23:16];
	end
	else begin
		r_Highfreq_th[7:0]	<= r_Highfreq_th[7:0];
		r_Lowfreq_th2[7:0]	<= r_Lowfreq_th2[7:0];
		r_Lowfreq_th[7:0]	<= r_Lowfreq_th[7:0];
	end
end

// output assign for SPA_SEG1_EDGE_TH_REG
assign o_Highfreq_th[7:0]	= r_Highfreq_th[7:0];
assign o_Lowfreq_th2[7:0]	= r_Lowfreq_th2[7:0];
assign o_Lowfreq_th[7:0]	= r_Lowfreq_th[7:0];


// SPA_SEG1_LINE_TH_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_Uni_edge_th[7:0]	<= 8`h1e;
		r_Uni_edge_th2[7:0]	<= 8`h50;
		r_Uni_lowfreq_th[7:0]	<= 8`h0a;
		r_Uni_highfreq_th[7:0]	<= 8`h14;
	end
	else if (w_addr058c_wr) begin
		r_Uni_edge_th[7:0]	<= i_PWDATA[7:0];
		r_Uni_edge_th2[7:0]	<= i_PWDATA[15:8];
		r_Uni_lowfreq_th[7:0]	<= i_PWDATA[23:16];
		r_Uni_highfreq_th[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_Uni_edge_th[7:0]	<= r_Uni_edge_th[7:0];
		r_Uni_edge_th2[7:0]	<= r_Uni_edge_th2[7:0];
		r_Uni_lowfreq_th[7:0]	<= r_Uni_lowfreq_th[7:0];
		r_Uni_highfreq_th[7:0]	<= r_Uni_highfreq_th[7:0];
	end
end

// output assign for SPA_SEG1_LINE_TH_REG
assign o_Uni_edge_th[7:0]	= r_Uni_edge_th[7:0];
assign o_Uni_edge_th2[7:0]	= r_Uni_edge_th2[7:0];
assign o_Uni_lowfreq_th[7:0]	= r_Uni_lowfreq_th[7:0];
assign o_Uni_highfreq_th[7:0]	= r_Uni_highfreq_th[7:0];


// SPA_SEG1_ZC_TH_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_ZC_scaling_shift[2:0]	<= 3`h5;
		r_ZC_edge_th[7:0]	<= 8`h0a;
		r_White_th[7:0]	<= 8`hd2;
	end
	else if (w_addr0590_wr) begin
		r_ZC_scaling_shift[2:0]	<= i_PWDATA[2:0];
		r_ZC_edge_th[7:0]	<= i_PWDATA[15:8];
		r_White_th[7:0]	<= i_PWDATA[23:16];
	end
	else begin
		r_ZC_scaling_shift[2:0]	<= r_ZC_scaling_shift[2:0];
		r_ZC_edge_th[7:0]	<= r_ZC_edge_th[7:0];
		r_White_th[7:0]	<= r_White_th[7:0];
	end
end

// output assign for SPA_SEG1_ZC_TH_REG
assign o_ZC_scaling_shift[2:0]	= r_ZC_scaling_shift[2:0];
assign o_ZC_edge_th[7:0]	= r_ZC_edge_th[7:0];
assign o_White_th[7:0]	= r_White_th[7:0];


// SPA_SCC_CON_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_SCC_LATTICE_STEP[0:0]	<= 1`h0;
		r_SCC_FLOATING_MODE[1:0]	<= 2`h1;
	end
	else if (w_addr05c0_wr) begin
		r_SCC_LATTICE_STEP[0:0]	<= i_PWDATA[0:0];
		r_SCC_FLOATING_MODE[1:0]	<= i_PWDATA[5:4];
	end
	else begin
		r_SCC_LATTICE_STEP[0:0]	<= r_SCC_LATTICE_STEP[0:0];
		r_SCC_FLOATING_MODE[1:0]	<= r_SCC_FLOATING_MODE[1:0];
	end
end

// output assign for SPA_SCC_CON_REG
assign o_SCC_LATTICE_STEP[0:0]	= r_SCC_LATTICE_STEP[0:0];
assign o_SCC_FLOATING_MODE[1:0]	= r_SCC_FLOATING_MODE[1:0];


// SPA_SEG2_CON_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_Enable_FAR_9x9[0:0]	<= 1`h0;
		r_Enable_uniformtext[0:0]	<= 1`h0;
		r_Enable_contoneImage[0:0]	<= 1`h0;
	end
	else if (w_addr0600_wr) begin
		r_Enable_FAR_9x9[0:0]	<= i_PWDATA[0:0];
		r_Enable_uniformtext[0:0]	<= i_PWDATA[1:1];
		r_Enable_contoneImage[0:0]	<= i_PWDATA[4:4];
	end
	else begin
		r_Enable_FAR_9x9[0:0]	<= r_Enable_FAR_9x9[0:0];
		r_Enable_uniformtext[0:0]	<= r_Enable_uniformtext[0:0];
		r_Enable_contoneImage[0:0]	<= r_Enable_contoneImage[0:0];
	end
end

// output assign for SPA_SEG2_CON_REG
assign o_Enable_FAR_9x9[0:0]	= r_Enable_FAR_9x9[0:0];
assign o_Enable_uniformtext[0:0]	= r_Enable_uniformtext[0:0];
assign o_Enable_contoneImage[0:0]	= r_Enable_contoneImage[0:0];


// SPA_SEG2_PARAM1_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_edgecount_th[6:0]	<= 7`h3;
		r_text_index[1:0]	<= 2`h2;
		r_FG_level_th[7:0]	<= 8`h96;
	end
	else if (w_addr0604_wr) begin
		r_edgecount_th[6:0]	<= i_PWDATA[6:0];
		r_text_index[1:0]	<= i_PWDATA[9:8];
		r_FG_level_th[7:0]	<= i_PWDATA[23:16];
	end
	else begin
		r_edgecount_th[6:0]	<= r_edgecount_th[6:0];
		r_text_index[1:0]	<= r_text_index[1:0];
		r_FG_level_th[7:0]	<= r_FG_level_th[7:0];
	end
end

// output assign for SPA_SEG2_PARAM1_REG
assign o_edgecount_th[6:0]	= r_edgecount_th[6:0];
assign o_text_index[1:0]	= r_text_index[1:0];
assign o_FG_level_th[7:0]	= r_FG_level_th[7:0];


// SPA_SEG2_PARAM2_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_zccount_th[6:0]	<= 7`h3;
		r_uniformlinecount_th[6:0]	<= 7`h3;
		r_halftonecount_th[6:0]	<= 7`h3;
		r_bgcnt_th[6:0]	<= 7`h3;
	end
	else if (w_addr0608_wr) begin
		r_zccount_th[6:0]	<= i_PWDATA[6:0];
		r_uniformlinecount_th[6:0]	<= i_PWDATA[14:8];
		r_halftonecount_th[6:0]	<= i_PWDATA[22:16];
		r_bgcnt_th[6:0]	<= i_PWDATA[30:24];
	end
	else begin
		r_zccount_th[6:0]	<= r_zccount_th[6:0];
		r_uniformlinecount_th[6:0]	<= r_uniformlinecount_th[6:0];
		r_halftonecount_th[6:0]	<= r_halftonecount_th[6:0];
		r_bgcnt_th[6:0]	<= r_bgcnt_th[6:0];
	end
end

// output assign for SPA_SEG2_PARAM2_REG
assign o_zccount_th[6:0]	= r_zccount_th[6:0];
assign o_uniformlinecount_th[6:0]	= r_uniformlinecount_th[6:0];
assign o_halftonecount_th[6:0]	= r_halftonecount_th[6:0];
assign o_bgcnt_th[6:0]	= r_bgcnt_th[6:0];


// SPA_SEG2_FAR_CHROMA_PARAM_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_FAR_chroma_th2_shiftcoef[3:0]	<= 4`h3;
		r_FAR_chroma_th[7:0]	<= 8`ha;
	end
	else if (w_addr060c_wr) begin
		r_FAR_chroma_th2_shiftcoef[3:0]	<= i_PWDATA[3:0];
		r_FAR_chroma_th[7:0]	<= i_PWDATA[15:8];
	end
	else begin
		r_FAR_chroma_th2_shiftcoef[3:0]	<= r_FAR_chroma_th2_shiftcoef[3:0];
		r_FAR_chroma_th[7:0]	<= r_FAR_chroma_th[7:0];
	end
end

// output assign for SPA_SEG2_FAR_CHROMA_PARAM_REG
assign o_FAR_chroma_th2_shiftcoef[3:0]	= r_FAR_chroma_th2_shiftcoef[3:0];
assign o_FAR_chroma_th[7:0]	= r_FAR_chroma_th[7:0];


// SPA_SEG2_FAR_Y_PARAM_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_FAR_Y_th3_shiftcoef2[3:0]	<= 4`h3;
		r_FAR_Y_th2_shiftcoef1[3:0]	<= 4`h6;
		r_FAR_Y_th[7:0]	<= 8`haa;
	end
	else if (w_addr0610_wr) begin
		r_FAR_Y_th3_shiftcoef2[3:0]	<= i_PWDATA[3:0];
		r_FAR_Y_th2_shiftcoef1[3:0]	<= i_PWDATA[7:4];
		r_FAR_Y_th[7:0]	<= i_PWDATA[15:8];
	end
	else begin
		r_FAR_Y_th3_shiftcoef2[3:0]	<= r_FAR_Y_th3_shiftcoef2[3:0];
		r_FAR_Y_th2_shiftcoef1[3:0]	<= r_FAR_Y_th2_shiftcoef1[3:0];
		r_FAR_Y_th[7:0]	<= r_FAR_Y_th[7:0];
	end
end

// output assign for SPA_SEG2_FAR_Y_PARAM_REG
assign o_FAR_Y_th3_shiftcoef2[3:0]	= r_FAR_Y_th3_shiftcoef2[3:0];
assign o_FAR_Y_th2_shiftcoef1[3:0]	= r_FAR_Y_th2_shiftcoef1[3:0];
assign o_FAR_Y_th[7:0]	= r_FAR_Y_th[7:0];


// SPA_SEG2_NEUT_CHROMA_PARAM_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_Neut_chroma_th2_shiftcoef[3:0]	<= 4`h3;
		r_Neut_chroma_th[7:0]	<= 8`h7;
	end
	else if (w_addr0614_wr) begin
		r_Neut_chroma_th2_shiftcoef[3:0]	<= i_PWDATA[3:0];
		r_Neut_chroma_th[7:0]	<= i_PWDATA[15:8];
	end
	else begin
		r_Neut_chroma_th2_shiftcoef[3:0]	<= r_Neut_chroma_th2_shiftcoef[3:0];
		r_Neut_chroma_th[7:0]	<= r_Neut_chroma_th[7:0];
	end
end

// output assign for SPA_SEG2_NEUT_CHROMA_PARAM_REG
assign o_Neut_chroma_th2_shiftcoef[3:0]	= r_Neut_chroma_th2_shiftcoef[3:0];
assign o_Neut_chroma_th[7:0]	= r_Neut_chroma_th[7:0];


// SPA_PAGE_EN_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_PAGE_EN[0:0]	<= 1`h0;
	end
	else if (w_addr07c0_wr) begin
		r_PAGE_EN[0:0]	<= i_PWDATA[0:0];
	end
	else begin
		r_PAGE_EN[0:0]	<= r_PAGE_EN[0:0];
	end
end

// output assign for SPA_PAGE_EN_REG
assign o_PAGE_EN[0:0]	= r_PAGE_EN[0:0];


// SPA_BLOCK_SIZE_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_BLOCK_SIZE_H[6:0]	<= 7`h9;
		r_BLOCK_SIZE_W[5:0]	<= 6`h4;
	end
	else if (w_addr07c4_wr) begin
		r_BLOCK_SIZE_H[6:0]	<= i_PWDATA[6:0];
		r_BLOCK_SIZE_W[5:0]	<= i_PWDATA[13:8];
	end
	else begin
		r_BLOCK_SIZE_H[6:0]	<= r_BLOCK_SIZE_H[6:0];
		r_BLOCK_SIZE_W[5:0]	<= r_BLOCK_SIZE_W[5:0];
	end
end

// output assign for SPA_BLOCK_SIZE_REG
assign o_BLOCK_SIZE_H[6:0]	= r_BLOCK_SIZE_H[6:0];
assign o_BLOCK_SIZE_W[5:0]	= r_BLOCK_SIZE_W[5:0];


// SPA_AREA_SIZE_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_AREA_SIZE_H[13:0]	<= 14`h3E8;
		r_AREA_SIZE_W[13:0]	<= 14`h3E8;
	end
	else if (w_addr07c8_wr) begin
		r_AREA_SIZE_H[13:0]	<= i_PWDATA[13:0];
		r_AREA_SIZE_W[13:0]	<= i_PWDATA[29:16];
	end
	else begin
		r_AREA_SIZE_H[13:0]	<= r_AREA_SIZE_H[13:0];
		r_AREA_SIZE_W[13:0]	<= r_AREA_SIZE_W[13:0];
	end
end

// output assign for SPA_AREA_SIZE_REG
assign o_AREA_SIZE_H[13:0]	= r_AREA_SIZE_H[13:0];
assign o_AREA_SIZE_W[13:0]	= r_AREA_SIZE_W[13:0];


// SPA_CHAR_LENGTH_THICK_V_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_CHAR_THICK_MAX_V[7:0]	<= 8`h50;
		r_CHAR_THICK_MIN_V[7:0]	<= 8`h7;
		r_CHAR_LENGTH_MIN_V[7:0]	<= 8`h3C;
	end
	else if (w_addr07cc_wr) begin
		r_CHAR_THICK_MAX_V[7:0]	<= i_PWDATA[7:0];
		r_CHAR_THICK_MIN_V[7:0]	<= i_PWDATA[15:8];
		r_CHAR_LENGTH_MIN_V[7:0]	<= i_PWDATA[23:16];
	end
	else begin
		r_CHAR_THICK_MAX_V[7:0]	<= r_CHAR_THICK_MAX_V[7:0];
		r_CHAR_THICK_MIN_V[7:0]	<= r_CHAR_THICK_MIN_V[7:0];
		r_CHAR_LENGTH_MIN_V[7:0]	<= r_CHAR_LENGTH_MIN_V[7:0];
	end
end

// output assign for SPA_CHAR_LENGTH_THICK_V_REG
assign o_CHAR_THICK_MAX_V[7:0]	= r_CHAR_THICK_MAX_V[7:0];
assign o_CHAR_THICK_MIN_V[7:0]	= r_CHAR_THICK_MIN_V[7:0];
assign o_CHAR_LENGTH_MIN_V[7:0]	= r_CHAR_LENGTH_MIN_V[7:0];


// SPA_CHAR_LENGTH_THICK_H_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_CHAR_THICK_MAX_H[7:0]	<= 8`h50;
		r_CHAR_THICK_MIN_H[7:0]	<= 8`h7;
		r_CHAR_LENGTH_MIN_H[7:0]	<= 8`h3C;
	end
	else if (w_addr07d0_wr) begin
		r_CHAR_THICK_MAX_H[7:0]	<= i_PWDATA[7:0];
		r_CHAR_THICK_MIN_H[7:0]	<= i_PWDATA[15:8];
		r_CHAR_LENGTH_MIN_H[7:0]	<= i_PWDATA[23:16];
	end
	else begin
		r_CHAR_THICK_MAX_H[7:0]	<= r_CHAR_THICK_MAX_H[7:0];
		r_CHAR_THICK_MIN_H[7:0]	<= r_CHAR_THICK_MIN_H[7:0];
		r_CHAR_LENGTH_MIN_H[7:0]	<= r_CHAR_LENGTH_MIN_H[7:0];
	end
end

// output assign for SPA_CHAR_LENGTH_THICK_H_REG
assign o_CHAR_THICK_MAX_H[7:0]	= r_CHAR_THICK_MAX_H[7:0];
assign o_CHAR_THICK_MIN_H[7:0]	= r_CHAR_THICK_MIN_H[7:0];
assign o_CHAR_LENGTH_MIN_H[7:0]	= r_CHAR_LENGTH_MIN_H[7:0];


// SPA_DIFF_CHANGE_V_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_CHANGE_CNT_TH_V[6:0]	<= 7`h50;
		r_CHANGE_RATIO_TH_V[6:0]	<= 7`h7;
		r_DIFF_SHIFT2_V[3:0]	<= 4`h4;
		r_DIFF_SHIFT1_V[3:0]	<= 4`h1;
	end
	else if (w_addr07d4_wr) begin
		r_CHANGE_CNT_TH_V[6:0]	<= i_PWDATA[6:0];
		r_CHANGE_RATIO_TH_V[6:0]	<= i_PWDATA[14:8];
		r_DIFF_SHIFT2_V[3:0]	<= i_PWDATA[19:16];
		r_DIFF_SHIFT1_V[3:0]	<= i_PWDATA[27:24];
	end
	else begin
		r_CHANGE_CNT_TH_V[6:0]	<= r_CHANGE_CNT_TH_V[6:0];
		r_CHANGE_RATIO_TH_V[6:0]	<= r_CHANGE_RATIO_TH_V[6:0];
		r_DIFF_SHIFT2_V[3:0]	<= r_DIFF_SHIFT2_V[3:0];
		r_DIFF_SHIFT1_V[3:0]	<= r_DIFF_SHIFT1_V[3:0];
	end
end

// output assign for SPA_DIFF_CHANGE_V_REG
assign o_CHANGE_CNT_TH_V[6:0]	= r_CHANGE_CNT_TH_V[6:0];
assign o_CHANGE_RATIO_TH_V[6:0]	= r_CHANGE_RATIO_TH_V[6:0];
assign o_DIFF_SHIFT2_V[3:0]	= r_DIFF_SHIFT2_V[3:0];
assign o_DIFF_SHIFT1_V[3:0]	= r_DIFF_SHIFT1_V[3:0];


// SPA_DIFF_CHANGE_H_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_CHANGE_CNT_TH_H[6:0]	<= 7`h50;
		r_CHANGE_RATIO_TH_H[6:0]	<= 7`h7;
		r_DIFF_SHIFT2_H[3:0]	<= 4`h4;
		r_DIFF_SHIFT1_H[3:0]	<= 4`h1;
	end
	else if (w_addr07d8_wr) begin
		r_CHANGE_CNT_TH_H[6:0]	<= i_PWDATA[6:0];
		r_CHANGE_RATIO_TH_H[6:0]	<= i_PWDATA[14:8];
		r_DIFF_SHIFT2_H[3:0]	<= i_PWDATA[19:16];
		r_DIFF_SHIFT1_H[3:0]	<= i_PWDATA[27:24];
	end
	else begin
		r_CHANGE_CNT_TH_H[6:0]	<= r_CHANGE_CNT_TH_H[6:0];
		r_CHANGE_RATIO_TH_H[6:0]	<= r_CHANGE_RATIO_TH_H[6:0];
		r_DIFF_SHIFT2_H[3:0]	<= r_DIFF_SHIFT2_H[3:0];
		r_DIFF_SHIFT1_H[3:0]	<= r_DIFF_SHIFT1_H[3:0];
	end
end

// output assign for SPA_DIFF_CHANGE_H_REG
assign o_CHANGE_CNT_TH_H[6:0]	= r_CHANGE_CNT_TH_H[6:0];
assign o_CHANGE_RATIO_TH_H[6:0]	= r_CHANGE_RATIO_TH_H[6:0];
assign o_DIFF_SHIFT2_H[3:0]	= r_DIFF_SHIFT2_H[3:0];
assign o_DIFF_SHIFT1_H[3:0]	= r_DIFF_SHIFT1_H[3:0];


// SPA_DIR_TH1_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_DIR_MAX_LOW_TH[7:0]	<= 8`h14;
		r_DIR_TH[7:0]	<= 8`h5;
		r_DIR_MAX_TH[7:0]	<= 8`h6;
		r_DIR_MIN_TH[7:0]	<= 8`h6;
	end
	else if (w_addr07dc_wr) begin
		r_DIR_MAX_LOW_TH[7:0]	<= i_PWDATA[7:0];
		r_DIR_TH[7:0]	<= i_PWDATA[15:8];
		r_DIR_MAX_TH[7:0]	<= i_PWDATA[23:16];
		r_DIR_MIN_TH[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_DIR_MAX_LOW_TH[7:0]	<= r_DIR_MAX_LOW_TH[7:0];
		r_DIR_TH[7:0]	<= r_DIR_TH[7:0];
		r_DIR_MAX_TH[7:0]	<= r_DIR_MAX_TH[7:0];
		r_DIR_MIN_TH[7:0]	<= r_DIR_MIN_TH[7:0];
	end
end

// output assign for SPA_DIR_TH1_REG
assign o_DIR_MAX_LOW_TH[7:0]	= r_DIR_MAX_LOW_TH[7:0];
assign o_DIR_TH[7:0]	= r_DIR_TH[7:0];
assign o_DIR_MAX_TH[7:0]	= r_DIR_MAX_TH[7:0];
assign o_DIR_MIN_TH[7:0]	= r_DIR_MIN_TH[7:0];


// SPA_DIR_TH2_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_DIR_DIFF_TH3[7:0]	<= 8`hA;
		r_DIR_DIFF_TH2[7:0]	<= 8`h7;
		r_DIR_DIFF_TH1[7:0]	<= 8`h5;
		r_DIR_MAX_HIGH_TH[7:0]	<= 8`h28;
	end
	else if (w_addr07e0_wr) begin
		r_DIR_DIFF_TH3[7:0]	<= i_PWDATA[7:0];
		r_DIR_DIFF_TH2[7:0]	<= i_PWDATA[15:8];
		r_DIR_DIFF_TH1[7:0]	<= i_PWDATA[23:16];
		r_DIR_MAX_HIGH_TH[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_DIR_DIFF_TH3[7:0]	<= r_DIR_DIFF_TH3[7:0];
		r_DIR_DIFF_TH2[7:0]	<= r_DIR_DIFF_TH2[7:0];
		r_DIR_DIFF_TH1[7:0]	<= r_DIR_DIFF_TH1[7:0];
		r_DIR_MAX_HIGH_TH[7:0]	<= r_DIR_MAX_HIGH_TH[7:0];
	end
end

// output assign for SPA_DIR_TH2_REG
assign o_DIR_DIFF_TH3[7:0]	= r_DIR_DIFF_TH3[7:0];
assign o_DIR_DIFF_TH2[7:0]	= r_DIR_DIFF_TH2[7:0];
assign o_DIR_DIFF_TH1[7:0]	= r_DIR_DIFF_TH1[7:0];
assign o_DIR_MAX_HIGH_TH[7:0]	= r_DIR_MAX_HIGH_TH[7:0];


// SPA_OUT_AREA_OFFSET1_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_OUT_AREA_OFFSET_W[10:0]	<= 11`h400;
		r_OUT_AREA_OFFSET_H[10:0]	<= 11`h400;
	end
	else if (w_addr07e4_wr) begin
		r_OUT_AREA_OFFSET_W[10:0]	<= i_PWDATA[10:0];
		r_OUT_AREA_OFFSET_H[10:0]	<= i_PWDATA[26:16];
	end
	else begin
		r_OUT_AREA_OFFSET_W[10:0]	<= r_OUT_AREA_OFFSET_W[10:0];
		r_OUT_AREA_OFFSET_H[10:0]	<= r_OUT_AREA_OFFSET_H[10:0];
	end
end

// output assign for SPA_OUT_AREA_OFFSET1_REG
assign o_OUT_AREA_OFFSET_W[10:0]	= r_OUT_AREA_OFFSET_W[10:0];
assign o_OUT_AREA_OFFSET_H[10:0]	= r_OUT_AREA_OFFSET_H[10:0];


// SPA_OUT_AREA_OFFSET2_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_OUT_AREA_OFFSET[10:0]	<= 11`h400;
	end
	else if (w_addr07e8_wr) begin
		r_OUT_AREA_OFFSET[10:0]	<= i_PWDATA[10:0];
	end
	else begin
		r_OUT_AREA_OFFSET[10:0]	<= r_OUT_AREA_OFFSET[10:0];
	end
end

// output assign for SPA_OUT_AREA_OFFSET2_REG
assign o_OUT_AREA_OFFSET[10:0]	= r_OUT_AREA_OFFSET[10:0];


// SPA_LINE_SPACE_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_LINE_SPACE_V[7:0]	<= 8`h6;
		r_LINE_SPACE_H[7:0]	<= 8`h6;
	end
	else if (w_addr07ec_wr) begin
		r_LINE_SPACE_V[7:0]	<= i_PWDATA[7:0];
		r_LINE_SPACE_H[7:0]	<= i_PWDATA[15:8];
	end
	else begin
		r_LINE_SPACE_V[7:0]	<= r_LINE_SPACE_V[7:0];
		r_LINE_SPACE_H[7:0]	<= r_LINE_SPACE_H[7:0];
	end
end

// output assign for SPA_LINE_SPACE_REG
assign o_LINE_SPACE_V[7:0]	= r_LINE_SPACE_V[7:0];
assign o_LINE_SPACE_H[7:0]	= r_LINE_SPACE_H[7:0];


// SPA_TEXT_FLAG_REG register

// output assign for SPA_TEXT_FLAG_REG
assign o_TEXT_FLAG1[0:0]	= 1'h0 /* add logic */ ;
assign o_TEXT_FLAG2[0:0]	= 1'h0 /* add logic */ ;
assign o_TEXT_FLAG3[0:0]	= 1'h0 /* add logic */ ;


// SPA_TEXT_AREA1_W_REG register

// output assign for SPA_TEXT_AREA1_W_REG
assign o_TEXT_AREA1_EN_W[13:0]	= 14'h0 /* add logic */ ;
assign o_TEXT_AREA1_ST_W[13:0]	= 14'h0 /* add logic */ ;


// SPA_TEXT_AREA1_H_REG register

// output assign for SPA_TEXT_AREA1_H_REG
assign o_TEXT_AREA1_EN_H[13:0]	= 14'h0 /* add logic */ ;
assign o_TEXT_AREA1_ST_H[13:0]	= 14'h0 /* add logic */ ;


// SPA_TEXT_AREA2_W_REG register

// output assign for SPA_TEXT_AREA2_W_REG
assign o_TEXT_AREA2_EN_W[13:0]	= 14'h0 /* add logic */ ;
assign o_TEXT_AREA2_ST_W[13:0]	= 14'h0 /* add logic */ ;


// SPA_TEXT_AREA2_H_REG register

// output assign for SPA_TEXT_AREA2_H_REG
assign o_TEXT_AREA2_EN_H[13:0]	= 14'h0 /* add logic */ ;
assign o_TEXT_AREA2_ST_H[13:0]	= 14'h0 /* add logic */ ;


// SPA_TEXT_AREA3_W_REG register

// output assign for SPA_TEXT_AREA3_W_REG
assign o_TEXT_AREA3_EN_W[13:0]	= 14'h0 /* add logic */ ;
assign o_TEXT_AREA3_ST_W[13:0]	= 14'h0 /* add logic */ ;


// SPA_TEXT_AREA3_H_REG register

// output assign for SPA_TEXT_AREA3_H_REG
assign o_TEXT_AREA3_EN_H[13:0]	= 14'h0 /* add logic */ ;
assign o_TEXT_AREA3_ST_H[13:0]	= 14'h0 /* add logic */ ;


// SPA_ABS_PRE_SCAN_LINE_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_ABS_PRE_SCAN_LINE[13:0]	<= 14`h78;
	end
	else if (w_addr0840_wr) begin
		r_ABS_PRE_SCAN_LINE[13:0]	<= i_PWDATA[13:0];
	end
	else begin
		r_ABS_PRE_SCAN_LINE[13:0]	<= r_ABS_PRE_SCAN_LINE[13:0];
	end
end

// output assign for SPA_ABS_PRE_SCAN_LINE_REG
assign o_ABS_PRE_SCAN_LINE[13:0]	= r_ABS_PRE_SCAN_LINE[13:0];


// SPA_ABS_PRE_SCAN_IWIN_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_ABS_IWIN_END[13:0]	<= 14`hfa0;
		r_ABS_IWIN_START[13:0]	<= 14`h3e8;
	end
	else if (w_addr0844_wr) begin
		r_ABS_IWIN_END[13:0]	<= i_PWDATA[13:0];
		r_ABS_IWIN_START[13:0]	<= i_PWDATA[29:16];
	end
	else begin
		r_ABS_IWIN_END[13:0]	<= r_ABS_IWIN_END[13:0];
		r_ABS_IWIN_START[13:0]	<= r_ABS_IWIN_START[13:0];
	end
end

// output assign for SPA_ABS_PRE_SCAN_IWIN_REG
assign o_ABS_IWIN_END[13:0]	= r_ABS_IWIN_END[13:0];
assign o_ABS_IWIN_START[13:0]	= r_ABS_IWIN_START[13:0];


// SPA_ABS_TH_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_ABS_WHITE_TH[7:0]	<= 8`hff;
		r_ABS_BLACK_TH[7:0]	<= 8`h80;
		r_ABS_NOISE_REM[0:0]	<= 1`h1;
	end
	else if (w_addr0848_wr) begin
		r_ABS_WHITE_TH[7:0]	<= i_PWDATA[7:0];
		r_ABS_BLACK_TH[7:0]	<= i_PWDATA[15:8];
		r_ABS_NOISE_REM[0:0]	<= i_PWDATA[16:16];
	end
	else begin
		r_ABS_WHITE_TH[7:0]	<= r_ABS_WHITE_TH[7:0];
		r_ABS_BLACK_TH[7:0]	<= r_ABS_BLACK_TH[7:0];
		r_ABS_NOISE_REM[0:0]	<= r_ABS_NOISE_REM[0:0];
	end
end

// output assign for SPA_ABS_TH_REG
assign o_ABS_WHITE_TH[7:0]	= r_ABS_WHITE_TH[7:0];
assign o_ABS_BLACK_TH[7:0]	= r_ABS_BLACK_TH[7:0];
assign o_ABS_NOISE_REM[0:0]	= r_ABS_NOISE_REM[0:0];


// SPA_ABS_VALID_PERCENTAGE_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_ABS_VALID_PERCENTAGE[6:0]	<= 7`h21;
	end
	else if (w_addr084c_wr) begin
		r_ABS_VALID_PERCENTAGE[6:0]	<= i_PWDATA[6:0];
	end
	else begin
		r_ABS_VALID_PERCENTAGE[6:0]	<= r_ABS_VALID_PERCENTAGE[6:0];
	end
end

// output assign for SPA_ABS_VALID_PERCENTAGE_REG
assign o_ABS_VALID_PERCENTAGE[6:0]	= r_ABS_VALID_PERCENTAGE[6:0];


// SPA_ABS_BK_STD_TH_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_ABS_BK_STD_TH[7:0]	<= 8`h32;
	end
	else if (w_addr0850_wr) begin
		r_ABS_BK_STD_TH[7:0]	<= i_PWDATA[7:0];
	end
	else begin
		r_ABS_BK_STD_TH[7:0]	<= r_ABS_BK_STD_TH[7:0];
	end
end

// output assign for SPA_ABS_BK_STD_TH_REG
assign o_ABS_BK_STD_TH[7:0]	= r_ABS_BK_STD_TH[7:0];


// SPA_ABS_SIGMA_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_ABS_PERCENTAGE[6:0]	<= 7`h44;
		r_ABS_DETECT_SIGMA[5:0]	<= 6`h4;
		r_ABS_CONFID_SIGMA[5:0]	<= 6`h2;
	end
	else if (w_addr0854_wr) begin
		r_ABS_PERCENTAGE[6:0]	<= i_PWDATA[6:0];
		r_ABS_DETECT_SIGMA[5:0]	<= i_PWDATA[13:8];
		r_ABS_CONFID_SIGMA[5:0]	<= i_PWDATA[21:16];
	end
	else begin
		r_ABS_PERCENTAGE[6:0]	<= r_ABS_PERCENTAGE[6:0];
		r_ABS_DETECT_SIGMA[5:0]	<= r_ABS_DETECT_SIGMA[5:0];
		r_ABS_CONFID_SIGMA[5:0]	<= r_ABS_CONFID_SIGMA[5:0];
	end
end

// output assign for SPA_ABS_SIGMA_REG
assign o_ABS_PERCENTAGE[6:0]	= r_ABS_PERCENTAGE[6:0];
assign o_ABS_DETECT_SIGMA[5:0]	= r_ABS_DETECT_SIGMA[5:0];
assign o_ABS_CONFID_SIGMA[5:0]	= r_ABS_CONFID_SIGMA[5:0];


// SPA_ABS_BG_BACKUP_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_ABS_BG_BACKUP_EN[0:0]	<= 1`h1;
		r_ABS_BG_BACKUP_TH[7:0]	<= 8`h2d;
	end
	else if (w_addr0858_wr) begin
		r_ABS_BG_BACKUP_EN[0:0]	<= i_PWDATA[0:0];
		r_ABS_BG_BACKUP_TH[7:0]	<= i_PWDATA[11:4];
	end
	else begin
		r_ABS_BG_BACKUP_EN[0:0]	<= r_ABS_BG_BACKUP_EN[0:0];
		r_ABS_BG_BACKUP_TH[7:0]	<= r_ABS_BG_BACKUP_TH[7:0];
	end
end

// output assign for SPA_ABS_BG_BACKUP_REG
assign o_ABS_BG_BACKUP_EN[0:0]	= r_ABS_BG_BACKUP_EN[0:0];
assign o_ABS_BG_BACKUP_TH[7:0]	= r_ABS_BG_BACKUP_TH[7:0];


// SPA_ABS_COLOR_EXCEPTION_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_ABS_COLOR_EXCEPTION[0:0]	<= 1`h1;
		r_ABS_COLOR_TH2[7:0]	<= 8`h94;
		r_ABS_COLOR_TH1[7:0]	<= 8`h6c;
	end
	else if (w_addr085c_wr) begin
		r_ABS_COLOR_EXCEPTION[0:0]	<= i_PWDATA[0:0];
		r_ABS_COLOR_TH2[7:0]	<= i_PWDATA[15:8];
		r_ABS_COLOR_TH1[7:0]	<= i_PWDATA[23:16];
	end
	else begin
		r_ABS_COLOR_EXCEPTION[0:0]	<= r_ABS_COLOR_EXCEPTION[0:0];
		r_ABS_COLOR_TH2[7:0]	<= r_ABS_COLOR_TH2[7:0];
		r_ABS_COLOR_TH1[7:0]	<= r_ABS_COLOR_TH1[7:0];
	end
end

// output assign for SPA_ABS_COLOR_EXCEPTION_REG
assign o_ABS_COLOR_EXCEPTION[0:0]	= r_ABS_COLOR_EXCEPTION[0:0];
assign o_ABS_COLOR_TH2[7:0]	= r_ABS_COLOR_TH2[7:0];
assign o_ABS_COLOR_TH1[7:0]	= r_ABS_COLOR_TH1[7:0];


// SPA_ABS_TOP_BG_LEVEL_REG register

// output assign for SPA_ABS_TOP_BG_LEVEL_REG
assign o_ABS_TOP_BG_LEVEL[7:0]	= 8'h0 /* add logic */ ;
assign o_ABS_MAX_CB[7:0]	= 8'h0 /* add logic */ ;
assign o_ABS_MAX_CR[7:0]	= 8'h0 /* add logic */ ;


// SPA_ABS_TOP_PEAK_CONFIDENCE_REG register

// output assign for SPA_ABS_TOP_PEAK_CONFIDENCE_REG
assign o_ABS_TOP_PEAK_CONFIDENCE[6:0]	= 7'h0 /* add logic */ ;
assign o_ABS_SUCCESS[0:0]	= 1'h0 /* add logic */ ;


// SPA_ABS_PRE_SCAN_START_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_ABS_PRE_SCAN_START[13:0]	<= 14`h78;
	end
	else if (w_addr0868_wr) begin
		r_ABS_PRE_SCAN_START[13:0]	<= i_PWDATA[13:0];
	end
	else begin
		r_ABS_PRE_SCAN_START[13:0]	<= r_ABS_PRE_SCAN_START[13:0];
	end
end

// output assign for SPA_ABS_PRE_SCAN_START_REG
assign o_ABS_PRE_SCAN_START[13:0]	= r_ABS_PRE_SCAN_START[13:0];


// SPA_MAD_PRE_SCAN_LINE_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_MAD_PRE_SCAN_LINE[13:0]	<= 14`h78;
	end
	else if (w_addr0880_wr) begin
		r_MAD_PRE_SCAN_LINE[13:0]	<= i_PWDATA[13:0];
	end
	else begin
		r_MAD_PRE_SCAN_LINE[13:0]	<= r_MAD_PRE_SCAN_LINE[13:0];
	end
end

// output assign for SPA_MAD_PRE_SCAN_LINE_REG
assign o_MAD_PRE_SCAN_LINE[13:0]	= r_MAD_PRE_SCAN_LINE[13:0];


// SPA_MAD_PRE_SCAN_IWIN_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_MAD_IWIN_END[13:0]	<= 14`hfa0;
		r_MAD_IWIN_START[13:0]	<= 14`h3e8;
	end
	else if (w_addr0884_wr) begin
		r_MAD_IWIN_END[13:0]	<= i_PWDATA[13:0];
		r_MAD_IWIN_START[13:0]	<= i_PWDATA[29:16];
	end
	else begin
		r_MAD_IWIN_END[13:0]	<= r_MAD_IWIN_END[13:0];
		r_MAD_IWIN_START[13:0]	<= r_MAD_IWIN_START[13:0];
	end
end

// output assign for SPA_MAD_PRE_SCAN_IWIN_REG
assign o_MAD_IWIN_END[13:0]	= r_MAD_IWIN_END[13:0];
assign o_MAD_IWIN_START[13:0]	= r_MAD_IWIN_START[13:0];


// SPA_MAD_TH_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_MAD_WHITE_TH[7:0]	<= 8`hff;
		r_MAD_BLACK_TH[7:0]	<= 8`h80;
		r_MAD_NOISE_REM[0:0]	<= 1`h1;
	end
	else if (w_addr0888_wr) begin
		r_MAD_WHITE_TH[7:0]	<= i_PWDATA[7:0];
		r_MAD_BLACK_TH[7:0]	<= i_PWDATA[15:8];
		r_MAD_NOISE_REM[0:0]	<= i_PWDATA[16:16];
	end
	else begin
		r_MAD_WHITE_TH[7:0]	<= r_MAD_WHITE_TH[7:0];
		r_MAD_BLACK_TH[7:0]	<= r_MAD_BLACK_TH[7:0];
		r_MAD_NOISE_REM[0:0]	<= r_MAD_NOISE_REM[0:0];
	end
end

// output assign for SPA_MAD_TH_REG
assign o_MAD_WHITE_TH[7:0]	= r_MAD_WHITE_TH[7:0];
assign o_MAD_BLACK_TH[7:0]	= r_MAD_BLACK_TH[7:0];
assign o_MAD_NOISE_REM[0:0]	= r_MAD_NOISE_REM[0:0];


// SPA_MAD_VALID_PERCENTAGE_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_MAD_VALID_PERCENTAGE[6:0]	<= 7`h21;
	end
	else if (w_addr088c_wr) begin
		r_MAD_VALID_PERCENTAGE[6:0]	<= i_PWDATA[6:0];
	end
	else begin
		r_MAD_VALID_PERCENTAGE[6:0]	<= r_MAD_VALID_PERCENTAGE[6:0];
	end
end

// output assign for SPA_MAD_VALID_PERCENTAGE_REG
assign o_MAD_VALID_PERCENTAGE[6:0]	= r_MAD_VALID_PERCENTAGE[6:0];


// SPA_MAD_BK_STD_TH_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_MAD_BK_STD_TH[7:0]	<= 8`h32;
	end
	else if (w_addr0890_wr) begin
		r_MAD_BK_STD_TH[7:0]	<= i_PWDATA[7:0];
	end
	else begin
		r_MAD_BK_STD_TH[7:0]	<= r_MAD_BK_STD_TH[7:0];
	end
end

// output assign for SPA_MAD_BK_STD_TH_REG
assign o_MAD_BK_STD_TH[7:0]	= r_MAD_BK_STD_TH[7:0];


// SPA_MAD_SIGMA_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_MAD_PERCENTAGE[6:0]	<= 7`h44;
		r_MAD_DETECT_SIGMA[5:0]	<= 6`h4;
		r_MAD_CONFID_SIGMA[5:0]	<= 6`h2;
	end
	else if (w_addr0894_wr) begin
		r_MAD_PERCENTAGE[6:0]	<= i_PWDATA[6:0];
		r_MAD_DETECT_SIGMA[5:0]	<= i_PWDATA[13:8];
		r_MAD_CONFID_SIGMA[5:0]	<= i_PWDATA[21:16];
	end
	else begin
		r_MAD_PERCENTAGE[6:0]	<= r_MAD_PERCENTAGE[6:0];
		r_MAD_DETECT_SIGMA[5:0]	<= r_MAD_DETECT_SIGMA[5:0];
		r_MAD_CONFID_SIGMA[5:0]	<= r_MAD_CONFID_SIGMA[5:0];
	end
end

// output assign for SPA_MAD_SIGMA_REG
assign o_MAD_PERCENTAGE[6:0]	= r_MAD_PERCENTAGE[6:0];
assign o_MAD_DETECT_SIGMA[5:0]	= r_MAD_DETECT_SIGMA[5:0];
assign o_MAD_CONFID_SIGMA[5:0]	= r_MAD_CONFID_SIGMA[5:0];


// SPA_MAD_BG_BACKUP_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_MAD_BG_BACKUP_EN[0:0]	<= 1`h1;
		r_MAD_BG_BACKUP_TH[7:0]	<= 8`h2d;
	end
	else if (w_addr0898_wr) begin
		r_MAD_BG_BACKUP_EN[0:0]	<= i_PWDATA[0:0];
		r_MAD_BG_BACKUP_TH[7:0]	<= i_PWDATA[11:4];
	end
	else begin
		r_MAD_BG_BACKUP_EN[0:0]	<= r_MAD_BG_BACKUP_EN[0:0];
		r_MAD_BG_BACKUP_TH[7:0]	<= r_MAD_BG_BACKUP_TH[7:0];
	end
end

// output assign for SPA_MAD_BG_BACKUP_REG
assign o_MAD_BG_BACKUP_EN[0:0]	= r_MAD_BG_BACKUP_EN[0:0];
assign o_MAD_BG_BACKUP_TH[7:0]	= r_MAD_BG_BACKUP_TH[7:0];


// SPA_MAD_COLOR_EXCEPTION_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_MAD_COLOR_EXCEPTION[0:0]	<= 1`h1;
		r_MAD_COLOR_TH2[7:0]	<= 8`h94;
		r_MAD_COLOR_TH1[7:0]	<= 8`h6c;
	end
	else if (w_addr089c_wr) begin
		r_MAD_COLOR_EXCEPTION[0:0]	<= i_PWDATA[0:0];
		r_MAD_COLOR_TH2[7:0]	<= i_PWDATA[15:8];
		r_MAD_COLOR_TH1[7:0]	<= i_PWDATA[23:16];
	end
	else begin
		r_MAD_COLOR_EXCEPTION[0:0]	<= r_MAD_COLOR_EXCEPTION[0:0];
		r_MAD_COLOR_TH2[7:0]	<= r_MAD_COLOR_TH2[7:0];
		r_MAD_COLOR_TH1[7:0]	<= r_MAD_COLOR_TH1[7:0];
	end
end

// output assign for SPA_MAD_COLOR_EXCEPTION_REG
assign o_MAD_COLOR_EXCEPTION[0:0]	= r_MAD_COLOR_EXCEPTION[0:0];
assign o_MAD_COLOR_TH2[7:0]	= r_MAD_COLOR_TH2[7:0];
assign o_MAD_COLOR_TH1[7:0]	= r_MAD_COLOR_TH1[7:0];


// SPA_MAD_TOP_BG_LEVEL_REG register

// output assign for SPA_MAD_TOP_BG_LEVEL_REG
assign o_MAD_TOP_BG_LEVEL[7:0]	= 8'h0 /* add logic */ ;
assign o_MAD_MAX_CB[7:0]	= 8'h0 /* add logic */ ;
assign o_MAD_MAX_CR[7:0]	= 8'h0 /* add logic */ ;


// SPA_MAD_TOP_PEAK_CONFIDENCE_REG register

// output assign for SPA_MAD_TOP_PEAK_CONFIDENCE_REG
assign o_MAD_TOP_PEAK_CONFIDENCE[6:0]	= 7'h0 /* add logic */ ;
assign o_MAD_SUCCESS[0:0]	= 1'h0 /* add logic */ ;


// SPA_MAD_PRE_SCAN_START_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_MAD_PRE_SCAN_START[13:0]	<= 14`h78;
	end
	else if (w_addr08a8_wr) begin
		r_MAD_PRE_SCAN_START[13:0]	<= i_PWDATA[13:0];
	end
	else begin
		r_MAD_PRE_SCAN_START[13:0]	<= r_MAD_PRE_SCAN_START[13:0];
	end
end

// output assign for SPA_MAD_PRE_SCAN_START_REG
assign o_MAD_PRE_SCAN_START[13:0]	= r_MAD_PRE_SCAN_START[13:0];


// SPA_NEWABSD_SCAN_RANGE_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_ABS_PRE_SCAN_LINE[13:0]	<= 14`h2710;
		r_ABS_PRE_SCAN_START[13:0]	<= 14`h0;
	end
	else if (w_addr08c0_wr) begin
		r_ABS_PRE_SCAN_LINE[13:0]	<= i_PWDATA[13:0];
		r_ABS_PRE_SCAN_START[13:0]	<= i_PWDATA[29:16];
	end
	else begin
		r_ABS_PRE_SCAN_LINE[13:0]	<= r_ABS_PRE_SCAN_LINE[13:0];
		r_ABS_PRE_SCAN_START[13:0]	<= r_ABS_PRE_SCAN_START[13:0];
	end
end

// output assign for SPA_NEWABSD_SCAN_RANGE_REG
assign o_ABS_PRE_SCAN_LINE[13:0]	= r_ABS_PRE_SCAN_LINE[13:0];
assign o_ABS_PRE_SCAN_START[13:0]	= r_ABS_PRE_SCAN_START[13:0];


// SPA_NEWABSD_PRE_SCAN_IWIN_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_ABS_IWIN_END[13:0]	<= 14`h2710;
		r_ABS_IWIN_START[13:0]	<= 14`h00;
	end
	else if (w_addr08c4_wr) begin
		r_ABS_IWIN_END[13:0]	<= i_PWDATA[13:0];
		r_ABS_IWIN_START[13:0]	<= i_PWDATA[29:16];
	end
	else begin
		r_ABS_IWIN_END[13:0]	<= r_ABS_IWIN_END[13:0];
		r_ABS_IWIN_START[13:0]	<= r_ABS_IWIN_START[13:0];
	end
end

// output assign for SPA_NEWABSD_PRE_SCAN_IWIN_REG
assign o_ABS_IWIN_END[13:0]	= r_ABS_IWIN_END[13:0];
assign o_ABS_IWIN_START[13:0]	= r_ABS_IWIN_START[13:0];


// SPA_NEWABSD_CHOMA_TH_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_COLOR_RIDGE_TH[7:0]	<= 8`h03;
		r_GRAY_RIDGE_TH[7:0]	<= 8`h03;
		r_CHROMA_TH[7:0]	<= 8`h0a;
	end
	else if (w_addr08c8_wr) begin
		r_COLOR_RIDGE_TH[7:0]	<= i_PWDATA[7:0];
		r_GRAY_RIDGE_TH[7:0]	<= i_PWDATA[15:8];
		r_CHROMA_TH[7:0]	<= i_PWDATA[23:16];
	end
	else begin
		r_COLOR_RIDGE_TH[7:0]	<= r_COLOR_RIDGE_TH[7:0];
		r_GRAY_RIDGE_TH[7:0]	<= r_GRAY_RIDGE_TH[7:0];
		r_CHROMA_TH[7:0]	<= r_CHROMA_TH[7:0];
	end
end

// output assign for SPA_NEWABSD_CHOMA_TH_REG
assign o_COLOR_RIDGE_TH[7:0]	= r_COLOR_RIDGE_TH[7:0];
assign o_GRAY_RIDGE_TH[7:0]	= r_GRAY_RIDGE_TH[7:0];
assign o_CHROMA_TH[7:0]	= r_CHROMA_TH[7:0];


// SPA_NEWABSD_LIMIT_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_RIGHT_LIMIT[7:0]	<= 8`hFF;
		r_LEFT_LIMIT[7:0]	<= 8`h80;
	end
	else if (w_addr08cc_wr) begin
		r_RIGHT_LIMIT[7:0]	<= i_PWDATA[7:0];
		r_LEFT_LIMIT[7:0]	<= i_PWDATA[15:8];
	end
	else begin
		r_RIGHT_LIMIT[7:0]	<= r_RIGHT_LIMIT[7:0];
		r_LEFT_LIMIT[7:0]	<= r_LEFT_LIMIT[7:0];
	end
end

// output assign for SPA_NEWABSD_LIMIT_REG
assign o_RIGHT_LIMIT[7:0]	= r_RIGHT_LIMIT[7:0];
assign o_LEFT_LIMIT[7:0]	= r_LEFT_LIMIT[7:0];


// SPA_NEWABSD_HISTO_PEAK_REG register

// output assign for SPA_NEWABSD_HISTO_PEAK_REG
assign o_HISTO_COLOR_PEAK[7:0]	= 8'h0 /* add logic */ ;
assign o_HISTO_GRAY_PEAK[7:0]	= 8'h0 /* add logic */ ;


// SPA_NEWABSD_HISTO_LEFT_REG register

// output assign for SPA_NEWABSD_HISTO_LEFT_REG
assign o_HISTO_COLOR_LEFT[7:0]	= 8'h0 /* add logic */ ;
assign o_HISTO_GRAY_LEFT[7:0]	= 8'h0 /* add logic */ ;


// SPA_NEWABSD_HISTO_RIGHT_REG register

// output assign for SPA_NEWABSD_HISTO_RIGHT_REG
assign o_HISTO_COLOR_RIGHT[7:0]	= 8'h0 /* add logic */ ;
assign o_HISTO_GRAY_RIGHT[7:0]	= 8'h0 /* add logic */ ;


// SPA_NEWABSD_RESULT_REG register

// output assign for SPA_NEWABSD_RESULT_REG
assign o_PAPER_COLOR_FLAG[0:0]	= 1'h0 /* add logic */ ;
assign o_MEM_READ_STAT[3:0]	= 4'h0 /* add logic */ ;


// SPA_CLA_CON1_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_HLCOUNT_MAXTH1[7:0]	<= 8`h0;
		r_HLCOUNT_MAXTH2[7:0]	<= 8`h0;
		r_HLCOUNT_DIFFTH1[7:0]	<= 8`h0;
		r_HLCOUNT_DIFFTH2[7:0]	<= 8`h0;
	end
	else if (w_addr0900_wr) begin
		r_HLCOUNT_MAXTH1[7:0]	<= i_PWDATA[7:0];
		r_HLCOUNT_MAXTH2[7:0]	<= i_PWDATA[15:8];
		r_HLCOUNT_DIFFTH1[7:0]	<= i_PWDATA[23:16];
		r_HLCOUNT_DIFFTH2[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_HLCOUNT_MAXTH1[7:0]	<= r_HLCOUNT_MAXTH1[7:0];
		r_HLCOUNT_MAXTH2[7:0]	<= r_HLCOUNT_MAXTH2[7:0];
		r_HLCOUNT_DIFFTH1[7:0]	<= r_HLCOUNT_DIFFTH1[7:0];
		r_HLCOUNT_DIFFTH2[7:0]	<= r_HLCOUNT_DIFFTH2[7:0];
	end
end

// output assign for SPA_CLA_CON1_REG
assign o_HLCOUNT_MAXTH1[7:0]	= r_HLCOUNT_MAXTH1[7:0];
assign o_HLCOUNT_MAXTH2[7:0]	= r_HLCOUNT_MAXTH2[7:0];
assign o_HLCOUNT_DIFFTH1[7:0]	= r_HLCOUNT_DIFFTH1[7:0];
assign o_HLCOUNT_DIFFTH2[7:0]	= r_HLCOUNT_DIFFTH2[7:0];


// SPA_CLA_CON2_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_HLGRAY_DIFFTH[7:0]	<= 8`h0;
		r_ContentsSizeTh[10:0]	<= 11`h0;
	end
	else if (w_addr0904_wr) begin
		r_HLGRAY_DIFFTH[7:0]	<= i_PWDATA[7:0];
		r_ContentsSizeTh[10:0]	<= i_PWDATA[18:8];
	end
	else begin
		r_HLGRAY_DIFFTH[7:0]	<= r_HLGRAY_DIFFTH[7:0];
		r_ContentsSizeTh[10:0]	<= r_ContentsSizeTh[10:0];
	end
end

// output assign for SPA_CLA_CON2_REG
assign o_HLGRAY_DIFFTH[7:0]	= r_HLGRAY_DIFFTH[7:0];
assign o_ContentsSizeTh[10:0]	= r_ContentsSizeTh[10:0];


// SPA_TOTAL_BIN_CNT_REG register

// output assign for SPA_TOTAL_BIN_CNT_REG
assign o_TOTAL_BIN_CNT[31:0]	= 32'h0 /* add logic */ ;


// SPA_HL_RANGE2_REG register

// output assign for SPA_HL_RANGE2_REG
assign o_HL_RANGE2[31:0]	= 32'h0 /* add logic */ ;


// SPA_HL_COLOR2_REG register

// output assign for SPA_HL_COLOR2_REG
assign o_HL_COLOR2[31:0]	= 32'h0 /* add logic */ ;


// SPA_BTEXT_CNT_REG register

// output assign for SPA_BTEXT_CNT_REG
assign o_BTEXT_CNT[31:0]	= 32'h0 /* add logic */ ;


// SPA_TEXT_CNT_REG register

// output assign for SPA_TEXT_CNT_REG
assign o_TEXT_CNT[31:0]	= 32'h0 /* add logic */ ;


// SPA_HT_CNT_REG register

// output assign for SPA_HT_CNT_REG
assign o_HT_CNT[31:0]	= 32'h0 /* add logic */ ;


// SPA_EDGE_CNT_REG register

// output assign for SPA_EDGE_CNT_REG
assign o_EDGE_CNT[31:0]	= 32'h0 /* add logic */ ;


// SPA_WHITE_CNT_REG register

// output assign for SPA_WHITE_CNT_REG
assign o_WHITE_CNT[31:0]	= 32'h0 /* add logic */ ;


// SPA_CONTONE_CNT_REG register

// output assign for SPA_CONTONE_CNT_REG
assign o_CONTONE_CNT[31:0]	= 32'h0 /* add logic */ ;


// SPA_WHITE_WO_TEXT_CNT_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		//r_WHITE_WO_TEXT_CNT[31:0]	<= 32`h0; // read-only
	end
	else if (w_addr092c_wr) begin
		//r_WHITE_WO_TEXT_CNT[31:0]	<= i_PWDATA[31:0]; // read-only
	end
	else begin
		//r_WHITE_WO_TEXT_CNT[31:0]	<= r_WHITE_WO_TEXT_CNT[31:0]; // read-only
	end
end

// output assign for SPA_WHITE_WO_TEXT_CNT_REG
assign o_WHITE_WO_TEXT_CNT[31:0]	= 32'h0 /* add logic */ ;


// SPA_WHITE_WO_HT_TEXT_CNT_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		//r_WHITE_WO_HT_TEXT_CNT[31:0]	<= 32`h0; // read-only
	end
	else if (w_addr0930_wr) begin
		//r_WHITE_WO_HT_TEXT_CNT[31:0]	<= i_PWDATA[31:0]; // read-only
	end
	else begin
		//r_WHITE_WO_HT_TEXT_CNT[31:0]	<= r_WHITE_WO_HT_TEXT_CNT[31:0]; // read-only
	end
end

// output assign for SPA_WHITE_WO_HT_TEXT_CNT_REG
assign o_WHITE_WO_HT_TEXT_CNT[31:0]	= 32'h0 /* add logic */ ;


// SPA_CONTENT_SIZE_REG register

// output assign for SPA_CONTENT_SIZE_REG
assign o_ContentSizeW[13:0]	= 14'h0 /* add logic */ ;
assign o_ContentSizeH[13:0]	= 14'h0 /* add logic */ ;


// SPA_MARGIN1_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_BOTTOM_MARGIN[15:0]	<= 16`h0;
		r_TOP_MARGIN[15:0]	<= 16`h0;
	end
	else if (w_addr0980_wr) begin
		r_BOTTOM_MARGIN[15:0]	<= i_PWDATA[15:0];
		r_TOP_MARGIN[15:0]	<= i_PWDATA[31:16];
	end
	else begin
		r_BOTTOM_MARGIN[15:0]	<= r_BOTTOM_MARGIN[15:0];
		r_TOP_MARGIN[15:0]	<= r_TOP_MARGIN[15:0];
	end
end

// output assign for SPA_MARGIN1_REG
assign o_BOTTOM_MARGIN[15:0]	= r_BOTTOM_MARGIN[15:0];
assign o_TOP_MARGIN[15:0]	= r_TOP_MARGIN[15:0];


// SPA_MARGIN2_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_RIGHT_MARGIN[15:0]	<= 16`h0;
		r_LEFT_MARGIN[15:0]	<= 16`h0;
	end
	else if (w_addr0984_wr) begin
		r_RIGHT_MARGIN[15:0]	<= i_PWDATA[15:0];
		r_LEFT_MARGIN[15:0]	<= i_PWDATA[31:16];
	end
	else begin
		r_RIGHT_MARGIN[15:0]	<= r_RIGHT_MARGIN[15:0];
		r_LEFT_MARGIN[15:0]	<= r_LEFT_MARGIN[15:0];
	end
end

// output assign for SPA_MARGIN2_REG
assign o_RIGHT_MARGIN[15:0]	= r_RIGHT_MARGIN[15:0];
assign o_LEFT_MARGIN[15:0]	= r_LEFT_MARGIN[15:0];


// SPA_TH1_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_HIGH_TH_MAX1[9:0]	<= 10`h1;
		r_LOW_TH_MIN1[9:0]	<= 10`h1;
	end
	else if (w_addr0988_wr) begin
		r_HIGH_TH_MAX1[9:0]	<= i_PWDATA[9:0];
		r_LOW_TH_MIN1[9:0]	<= i_PWDATA[25:16];
	end
	else begin
		r_HIGH_TH_MAX1[9:0]	<= r_HIGH_TH_MAX1[9:0];
		r_LOW_TH_MIN1[9:0]	<= r_LOW_TH_MIN1[9:0];
	end
end

// output assign for SPA_TH1_REG
assign o_HIGH_TH_MAX1[9:0]	= r_HIGH_TH_MAX1[9:0];
assign o_LOW_TH_MIN1[9:0]	= r_LOW_TH_MIN1[9:0];


// SPA_TH2_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_HIGH_TH_MAX2[9:0]	<= 10`h1;
		r_LOW_TH_MIN2[9:0]	<= 10`h1;
	end
	else if (w_addr098c_wr) begin
		r_HIGH_TH_MAX2[9:0]	<= i_PWDATA[9:0];
		r_LOW_TH_MIN2[9:0]	<= i_PWDATA[25:16];
	end
	else begin
		r_HIGH_TH_MAX2[9:0]	<= r_HIGH_TH_MAX2[9:0];
		r_LOW_TH_MIN2[9:0]	<= r_LOW_TH_MIN2[9:0];
	end
end

// output assign for SPA_TH2_REG
assign o_HIGH_TH_MAX2[9:0]	= r_HIGH_TH_MAX2[9:0];
assign o_LOW_TH_MIN2[9:0]	= r_LOW_TH_MIN2[9:0];


// SPA_HLIGHT_SEL_EN_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_HLIGHT_SEL_EN[0:0]	<= 1`h0;
	end
	else if (w_addr0990_wr) begin
		r_HLIGHT_SEL_EN[0:0]	<= i_PWDATA[0:0];
	end
	else begin
		r_HLIGHT_SEL_EN[0:0]	<= r_HLIGHT_SEL_EN[0:0];
	end
end

// output assign for SPA_HLIGHT_SEL_EN_REG
assign o_HLIGHT_SEL_EN[0:0]	= r_HLIGHT_SEL_EN[0:0];


// SPA_AVG_TH_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_AVG_TH[7:0]	<= 8`h0;
	end
	else if (w_addr0994_wr) begin
		r_AVG_TH[7:0]	<= i_PWDATA[7:0];
	end
	else begin
		r_AVG_TH[7:0]	<= r_AVG_TH[7:0];
	end
end

// output assign for SPA_AVG_TH_REG
assign o_AVG_TH[7:0]	= r_AVG_TH[7:0];


// SPA_HISTO_WIN_VAL_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_HISTCR_WIN_VAL_HIGH[7:0]	<= 8`h0;
		r_HISTCR_WIN_VAL_LOW[7:0]	<= 8`h0;
		r_HISTCB_WIN_VAL_HIGH[7:0]	<= 8`h0;
		r_HISTCB_WIN_VAL_LOW[7:0]	<= 8`h0;
	end
	else if (w_addr0998_wr) begin
		r_HISTCR_WIN_VAL_HIGH[7:0]	<= i_PWDATA[7:0];
		r_HISTCR_WIN_VAL_LOW[7:0]	<= i_PWDATA[15:8];
		r_HISTCB_WIN_VAL_HIGH[7:0]	<= i_PWDATA[23:16];
		r_HISTCB_WIN_VAL_LOW[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_HISTCR_WIN_VAL_HIGH[7:0]	<= r_HISTCR_WIN_VAL_HIGH[7:0];
		r_HISTCR_WIN_VAL_LOW[7:0]	<= r_HISTCR_WIN_VAL_LOW[7:0];
		r_HISTCB_WIN_VAL_HIGH[7:0]	<= r_HISTCB_WIN_VAL_HIGH[7:0];
		r_HISTCB_WIN_VAL_LOW[7:0]	<= r_HISTCB_WIN_VAL_LOW[7:0];
	end
end

// output assign for SPA_HISTO_WIN_VAL_REG
assign o_HISTCR_WIN_VAL_HIGH[7:0]	= r_HISTCR_WIN_VAL_HIGH[7:0];
assign o_HISTCR_WIN_VAL_LOW[7:0]	= r_HISTCR_WIN_VAL_LOW[7:0];
assign o_HISTCB_WIN_VAL_HIGH[7:0]	= r_HISTCB_WIN_VAL_HIGH[7:0];
assign o_HISTCB_WIN_VAL_LOW[7:0]	= r_HISTCB_WIN_VAL_LOW[7:0];


// SPA_RATIO_TH_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_RATIO_TH_CR[9:0]	<= 10`h1;
		r_RATIO_TH_CB[9:0]	<= 10`h1;
	end
	else if (w_addr099c_wr) begin
		r_RATIO_TH_CR[9:0]	<= i_PWDATA[9:0];
		r_RATIO_TH_CB[9:0]	<= i_PWDATA[25:16];
	end
	else begin
		r_RATIO_TH_CR[9:0]	<= r_RATIO_TH_CR[9:0];
		r_RATIO_TH_CB[9:0]	<= r_RATIO_TH_CB[9:0];
	end
end

// output assign for SPA_RATIO_TH_REG
assign o_RATIO_TH_CR[9:0]	= r_RATIO_TH_CR[9:0];
assign o_RATIO_TH_CB[9:0]	= r_RATIO_TH_CB[9:0];


// SPA_LIMIT_TH_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_LIMIT_TH_MAX[7:0]	<= 8`h0;
		r_LIMIT_TH_MIN[7:0]	<= 8`h0;
	end
	else if (w_addr09a0_wr) begin
		r_LIMIT_TH_MAX[7:0]	<= i_PWDATA[7:0];
		r_LIMIT_TH_MIN[7:0]	<= i_PWDATA[15:8];
	end
	else begin
		r_LIMIT_TH_MAX[7:0]	<= r_LIMIT_TH_MAX[7:0];
		r_LIMIT_TH_MIN[7:0]	<= r_LIMIT_TH_MIN[7:0];
	end
end

// output assign for SPA_LIMIT_TH_REG
assign o_LIMIT_TH_MAX[7:0]	= r_LIMIT_TH_MAX[7:0];
assign o_LIMIT_TH_MIN[7:0]	= r_LIMIT_TH_MIN[7:0];


// SPA_BRIGHT_STRETCH_OFFSET_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_STRETCH_OFFSET[7:0]	<= 8`h0;
		r_BRIGHT_TH[7:0]	<= 8`h0;
		r_BRIGHT_EN[0:0]	<= 1`h0;
	end
	else if (w_addr09a4_wr) begin
		r_STRETCH_OFFSET[7:0]	<= i_PWDATA[7:0];
		r_BRIGHT_TH[7:0]	<= i_PWDATA[15:8];
		r_BRIGHT_EN[0:0]	<= i_PWDATA[16:16];
	end
	else begin
		r_STRETCH_OFFSET[7:0]	<= r_STRETCH_OFFSET[7:0];
		r_BRIGHT_TH[7:0]	<= r_BRIGHT_TH[7:0];
		r_BRIGHT_EN[0:0]	<= r_BRIGHT_EN[0:0];
	end
end

// output assign for SPA_BRIGHT_STRETCH_OFFSET_REG
assign o_STRETCH_OFFSET[7:0]	= r_STRETCH_OFFSET[7:0];
assign o_BRIGHT_TH[7:0]	= r_BRIGHT_TH[7:0];
assign o_BRIGHT_EN[0:0]	= r_BRIGHT_EN[0:0];


// SPA_ACB_TH1_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_ACB_GRAY_RIDGE[5:0]	<= 6`h0;
		r_ACB_PEAK_RATIO_TH[9:0]	<= 10`h1;
	end
	else if (w_addr09a8_wr) begin
		r_ACB_GRAY_RIDGE[5:0]	<= i_PWDATA[5:0];
		r_ACB_PEAK_RATIO_TH[9:0]	<= i_PWDATA[17:8];
	end
	else begin
		r_ACB_GRAY_RIDGE[5:0]	<= r_ACB_GRAY_RIDGE[5:0];
		r_ACB_PEAK_RATIO_TH[9:0]	<= r_ACB_PEAK_RATIO_TH[9:0];
	end
end

// output assign for SPA_ACB_TH1_REG
assign o_ACB_GRAY_RIDGE[5:0]	= r_ACB_GRAY_RIDGE[5:0];
assign o_ACB_PEAK_RATIO_TH[9:0]	= r_ACB_PEAK_RATIO_TH[9:0];


// SPA_ACB_TH2_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_ACB_RIGHT_LIMIT[7:0]	<= 8`h0;
		r_ACB_LEFT_LIMIT[7:0]	<= 8`h0;
	end
	else if (w_addr09ac_wr) begin
		r_ACB_RIGHT_LIMIT[7:0]	<= i_PWDATA[7:0];
		r_ACB_LEFT_LIMIT[7:0]	<= i_PWDATA[15:8];
	end
	else begin
		r_ACB_RIGHT_LIMIT[7:0]	<= r_ACB_RIGHT_LIMIT[7:0];
		r_ACB_LEFT_LIMIT[7:0]	<= r_ACB_LEFT_LIMIT[7:0];
	end
end

// output assign for SPA_ACB_TH2_REG
assign o_ACB_RIGHT_LIMIT[7:0]	= r_ACB_RIGHT_LIMIT[7:0];
assign o_ACB_LEFT_LIMIT[7:0]	= r_ACB_LEFT_LIMIT[7:0];


// SPA_OBJECT_TH_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_OBJ_AREA_TH[3:0]	<= 4`h0;
		r_OBJ_INDEX_TH[7:0]	<= 8`h0;
	end
	else if (w_addr09b0_wr) begin
		r_OBJ_AREA_TH[3:0]	<= i_PWDATA[3:0];
		r_OBJ_INDEX_TH[7:0]	<= i_PWDATA[15:8];
	end
	else begin
		r_OBJ_AREA_TH[3:0]	<= r_OBJ_AREA_TH[3:0];
		r_OBJ_INDEX_TH[7:0]	<= r_OBJ_INDEX_TH[7:0];
	end
end

// output assign for SPA_OBJECT_TH_REG
assign o_OBJ_AREA_TH[3:0]	= r_OBJ_AREA_TH[3:0];
assign o_OBJ_INDEX_TH[7:0]	= r_OBJ_INDEX_TH[7:0];


// SPA_ACBD_RESULT1_REG register

// output assign for SPA_ACBD_RESULT1_REG
assign o_BRIGHT_OFFSET[7:0]	= 8'h0 /* add logic */ ;
assign o_FINAL_MAX[7:0]	= 8'h0 /* add logic */ ;
assign o_FINAL_MIN[7:0]	= 8'h0 /* add logic */ ;


// SPA_ACBD_RESULT2_REG register

// output assign for SPA_ACBD_RESULT2_REG
assign o_PEAK_ID[7:0]	= 8'h0 /* add logic */ ;
assign o_ANKER_POINT[7:0]	= 8'h0 /* add logic */ ;
assign o_MEM_READ_STAT[3:0]	= 4'h0 /* add logic */ ;


// SPA_ACBD_ACSREFON_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_ACS_REF_ON[0:0]	<= 1`h0;
	end
	else if (w_addr09bc_wr) begin
		r_ACS_REF_ON[0:0]	<= i_PWDATA[0:0];
	end
	else begin
		r_ACS_REF_ON[0:0]	<= r_ACS_REF_ON[0:0];
	end
end

// output assign for SPA_ACBD_ACSREFON_REG
assign o_ACS_REF_ON[0:0]	= r_ACS_REF_ON[0:0];


// SPA_ACS_CON_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_ACS_SATAUTO_EN[0:0]	<= 1`h0;
		r_ACS_HALFAUTO_EN[0:0]	<= 1`h0;
		r_ACS_AUTO_EN[0:0]	<= 1`h0;
		r_ACS_MARK_EN[0:0]	<= 1`h0;
		r_ACS_HISTO_EN[0:0]	<= 1`h1;
		r_ACS_RANGE_REAL_IMAGE[0:0]	<= 1`h0;
		r_ACS_BLOCK_SIZE_X[7:0]	<= 8`h0;
		r_ACS_BLOCK_SIZE_Y[7:0]	<= 8`h0;
		r_ACS_WHITE_TH[7:0]	<= 8`hE6;
	end
	else if (w_addr09c0_wr) begin
		r_ACS_SATAUTO_EN[0:0]	<= i_PWDATA[0:0];
		r_ACS_HALFAUTO_EN[0:0]	<= i_PWDATA[1:1];
		r_ACS_AUTO_EN[0:0]	<= i_PWDATA[2:2];
		r_ACS_MARK_EN[0:0]	<= i_PWDATA[3:3];
		r_ACS_HISTO_EN[0:0]	<= i_PWDATA[4:4];
		r_ACS_RANGE_REAL_IMAGE[0:0]	<= i_PWDATA[7:7];
		r_ACS_BLOCK_SIZE_X[7:0]	<= i_PWDATA[15:8];
		r_ACS_BLOCK_SIZE_Y[7:0]	<= i_PWDATA[23:16];
		r_ACS_WHITE_TH[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_ACS_SATAUTO_EN[0:0]	<= r_ACS_SATAUTO_EN[0:0];
		r_ACS_HALFAUTO_EN[0:0]	<= r_ACS_HALFAUTO_EN[0:0];
		r_ACS_AUTO_EN[0:0]	<= r_ACS_AUTO_EN[0:0];
		r_ACS_MARK_EN[0:0]	<= r_ACS_MARK_EN[0:0];
		r_ACS_HISTO_EN[0:0]	<= r_ACS_HISTO_EN[0:0];
		r_ACS_RANGE_REAL_IMAGE[0:0]	<= r_ACS_RANGE_REAL_IMAGE[0:0];
		r_ACS_BLOCK_SIZE_X[7:0]	<= r_ACS_BLOCK_SIZE_X[7:0];
		r_ACS_BLOCK_SIZE_Y[7:0]	<= r_ACS_BLOCK_SIZE_Y[7:0];
		r_ACS_WHITE_TH[7:0]	<= r_ACS_WHITE_TH[7:0];
	end
end

// output assign for SPA_ACS_CON_REG
assign o_ACS_SATAUTO_EN[0:0]	= r_ACS_SATAUTO_EN[0:0];
assign o_ACS_HALFAUTO_EN[0:0]	= r_ACS_HALFAUTO_EN[0:0];
assign o_ACS_AUTO_EN[0:0]	= r_ACS_AUTO_EN[0:0];
assign o_ACS_MARK_EN[0:0]	= r_ACS_MARK_EN[0:0];
assign o_ACS_HISTO_EN[0:0]	= r_ACS_HISTO_EN[0:0];
assign o_ACS_RANGE_REAL_IMAGE[0:0]	= r_ACS_RANGE_REAL_IMAGE[0:0];
assign o_ACS_BLOCK_SIZE_X[7:0]	= r_ACS_BLOCK_SIZE_X[7:0];
assign o_ACS_BLOCK_SIZE_Y[7:0]	= r_ACS_BLOCK_SIZE_Y[7:0];
assign o_ACS_WHITE_TH[7:0]	= r_ACS_WHITE_TH[7:0];


// SPA_ACS_MARK_POS_UPPER_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_ACS_MARK_UPPER[16:0]	<= 17`h0;
	end
	else if (w_addr09c4_wr) begin
		r_ACS_MARK_UPPER[16:0]	<= i_PWDATA[16:0];
	end
	else begin
		r_ACS_MARK_UPPER[16:0]	<= r_ACS_MARK_UPPER[16:0];
	end
end

// output assign for SPA_ACS_MARK_POS_UPPER_REG
assign o_ACS_MARK_UPPER[16:0]	= r_ACS_MARK_UPPER[16:0];


// SPA_ACS_MARK_POS_LOWER_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_ACS_MARK_LOWER[16:0]	<= 17`h1ffff;
	end
	else if (w_addr09c8_wr) begin
		r_ACS_MARK_LOWER[16:0]	<= i_PWDATA[16:0];
	end
	else begin
		r_ACS_MARK_LOWER[16:0]	<= r_ACS_MARK_LOWER[16:0];
	end
end

// output assign for SPA_ACS_MARK_POS_LOWER_REG
assign o_ACS_MARK_LOWER[16:0]	= r_ACS_MARK_LOWER[16:0];


// SPA_ACS_MARK_POS_LEFT_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_ACS_MARK_LEFT[16:0]	<= 17`h0;
	end
	else if (w_addr09cc_wr) begin
		r_ACS_MARK_LEFT[16:0]	<= i_PWDATA[16:0];
	end
	else begin
		r_ACS_MARK_LEFT[16:0]	<= r_ACS_MARK_LEFT[16:0];
	end
end

// output assign for SPA_ACS_MARK_POS_LEFT_REG
assign o_ACS_MARK_LEFT[16:0]	= r_ACS_MARK_LEFT[16:0];


// SPA_ACS_MARK_POS_RIGHT_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_ACS_MARK_RIGHT[16:0]	<= 17`h1ffff;
	end
	else if (w_addr09d0_wr) begin
		r_ACS_MARK_RIGHT[16:0]	<= i_PWDATA[16:0];
	end
	else begin
		r_ACS_MARK_RIGHT[16:0]	<= r_ACS_MARK_RIGHT[16:0];
	end
end

// output assign for SPA_ACS_MARK_POS_RIGHT_REG
assign o_ACS_MARK_RIGHT[16:0]	= r_ACS_MARK_RIGHT[16:0];


// SPA_ACS_SATURATION_TH_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_ACS_SATURATION_BLOCK_TH[7:0]	<= 8`h0;
		r_ACS_SATURATION_PXL_TH[7:0]	<= 8`h0;
	end
	else if (w_addr09d4_wr) begin
		r_ACS_SATURATION_BLOCK_TH[7:0]	<= i_PWDATA[7:0];
		r_ACS_SATURATION_PXL_TH[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_ACS_SATURATION_BLOCK_TH[7:0]	<= r_ACS_SATURATION_BLOCK_TH[7:0];
		r_ACS_SATURATION_PXL_TH[7:0]	<= r_ACS_SATURATION_PXL_TH[7:0];
	end
end

// output assign for SPA_ACS_SATURATION_TH_REG
assign o_ACS_SATURATION_BLOCK_TH[7:0]	= r_ACS_SATURATION_BLOCK_TH[7:0];
assign o_ACS_SATURATION_PXL_TH[7:0]	= r_ACS_SATURATION_PXL_TH[7:0];


// SPA_ACS_HT_TH_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_ACS_PUREHALFTONE_CNT[14:0]	<= 15`h0;
		r_ACS_HALFTONE_CNT[14:0]	<= 15`h0;
	end
	else if (w_addr09d8_wr) begin
		r_ACS_PUREHALFTONE_CNT[14:0]	<= i_PWDATA[14:0];
		r_ACS_HALFTONE_CNT[14:0]	<= i_PWDATA[30:16];
	end
	else begin
		r_ACS_PUREHALFTONE_CNT[14:0]	<= r_ACS_PUREHALFTONE_CNT[14:0];
		r_ACS_HALFTONE_CNT[14:0]	<= r_ACS_HALFTONE_CNT[14:0];
	end
end

// output assign for SPA_ACS_HT_TH_REG
assign o_ACS_PUREHALFTONE_CNT[14:0]	= r_ACS_PUREHALFTONE_CNT[14:0];
assign o_ACS_HALFTONE_CNT[14:0]	= r_ACS_HALFTONE_CNT[14:0];


// SPA_ACS_CBMAX1_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_ACS_CB_MAX_03[7:0]	<= 8`h0;
		r_ACS_CB_MAX_02[7:0]	<= 8`h0;
		r_ACS_CB_MAX_01[7:0]	<= 8`h0;
		r_ACS_CB_MAX_00[7:0]	<= 8`h0;
	end
	else if (w_addr09dc_wr) begin
		r_ACS_CB_MAX_03[7:0]	<= i_PWDATA[7:0];
		r_ACS_CB_MAX_02[7:0]	<= i_PWDATA[15:8];
		r_ACS_CB_MAX_01[7:0]	<= i_PWDATA[23:16];
		r_ACS_CB_MAX_00[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_ACS_CB_MAX_03[7:0]	<= r_ACS_CB_MAX_03[7:0];
		r_ACS_CB_MAX_02[7:0]	<= r_ACS_CB_MAX_02[7:0];
		r_ACS_CB_MAX_01[7:0]	<= r_ACS_CB_MAX_01[7:0];
		r_ACS_CB_MAX_00[7:0]	<= r_ACS_CB_MAX_00[7:0];
	end
end

// output assign for SPA_ACS_CBMAX1_REG
assign o_ACS_CB_MAX_03[7:0]	= r_ACS_CB_MAX_03[7:0];
assign o_ACS_CB_MAX_02[7:0]	= r_ACS_CB_MAX_02[7:0];
assign o_ACS_CB_MAX_01[7:0]	= r_ACS_CB_MAX_01[7:0];
assign o_ACS_CB_MAX_00[7:0]	= r_ACS_CB_MAX_00[7:0];


// SPA_ACS_CBMAX2_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_ACS_CB_MAX_07[7:0]	<= 8`h0;
		r_ACS_CB_MAX_06[7:0]	<= 8`h0;
		r_ACS_CB_MAX_05[7:0]	<= 8`h0;
		r_ACS_CB_MAX_04[7:0]	<= 8`h0;
	end
	else if (w_addr09e0_wr) begin
		r_ACS_CB_MAX_07[7:0]	<= i_PWDATA[7:0];
		r_ACS_CB_MAX_06[7:0]	<= i_PWDATA[15:8];
		r_ACS_CB_MAX_05[7:0]	<= i_PWDATA[23:16];
		r_ACS_CB_MAX_04[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_ACS_CB_MAX_07[7:0]	<= r_ACS_CB_MAX_07[7:0];
		r_ACS_CB_MAX_06[7:0]	<= r_ACS_CB_MAX_06[7:0];
		r_ACS_CB_MAX_05[7:0]	<= r_ACS_CB_MAX_05[7:0];
		r_ACS_CB_MAX_04[7:0]	<= r_ACS_CB_MAX_04[7:0];
	end
end

// output assign for SPA_ACS_CBMAX2_REG
assign o_ACS_CB_MAX_07[7:0]	= r_ACS_CB_MAX_07[7:0];
assign o_ACS_CB_MAX_06[7:0]	= r_ACS_CB_MAX_06[7:0];
assign o_ACS_CB_MAX_05[7:0]	= r_ACS_CB_MAX_05[7:0];
assign o_ACS_CB_MAX_04[7:0]	= r_ACS_CB_MAX_04[7:0];


// SPA_ACS_CBMAX3_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_ACS_CB_MAX_11[7:0]	<= 8`h0;
		r_ACS_CB_MAX_10[7:0]	<= 8`h0;
		r_ACS_CB_MAX_09[7:0]	<= 8`h0;
		r_ACS_CB_MAX_08[7:0]	<= 8`h0;
	end
	else if (w_addr09e4_wr) begin
		r_ACS_CB_MAX_11[7:0]	<= i_PWDATA[7:0];
		r_ACS_CB_MAX_10[7:0]	<= i_PWDATA[15:8];
		r_ACS_CB_MAX_09[7:0]	<= i_PWDATA[23:16];
		r_ACS_CB_MAX_08[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_ACS_CB_MAX_11[7:0]	<= r_ACS_CB_MAX_11[7:0];
		r_ACS_CB_MAX_10[7:0]	<= r_ACS_CB_MAX_10[7:0];
		r_ACS_CB_MAX_09[7:0]	<= r_ACS_CB_MAX_09[7:0];
		r_ACS_CB_MAX_08[7:0]	<= r_ACS_CB_MAX_08[7:0];
	end
end

// output assign for SPA_ACS_CBMAX3_REG
assign o_ACS_CB_MAX_11[7:0]	= r_ACS_CB_MAX_11[7:0];
assign o_ACS_CB_MAX_10[7:0]	= r_ACS_CB_MAX_10[7:0];
assign o_ACS_CB_MAX_09[7:0]	= r_ACS_CB_MAX_09[7:0];
assign o_ACS_CB_MAX_08[7:0]	= r_ACS_CB_MAX_08[7:0];


// SPA_ACS_CBMAX4_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_ACS_CB_MAX_15[7:0]	<= 8`h0;
		r_ACS_CB_MAX_14[7:0]	<= 8`h0;
		r_ACS_CB_MAX_13[7:0]	<= 8`h0;
		r_ACS_CB_MAX_12[7:0]	<= 8`h0;
	end
	else if (w_addr09e8_wr) begin
		r_ACS_CB_MAX_15[7:0]	<= i_PWDATA[7:0];
		r_ACS_CB_MAX_14[7:0]	<= i_PWDATA[15:8];
		r_ACS_CB_MAX_13[7:0]	<= i_PWDATA[23:16];
		r_ACS_CB_MAX_12[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_ACS_CB_MAX_15[7:0]	<= r_ACS_CB_MAX_15[7:0];
		r_ACS_CB_MAX_14[7:0]	<= r_ACS_CB_MAX_14[7:0];
		r_ACS_CB_MAX_13[7:0]	<= r_ACS_CB_MAX_13[7:0];
		r_ACS_CB_MAX_12[7:0]	<= r_ACS_CB_MAX_12[7:0];
	end
end

// output assign for SPA_ACS_CBMAX4_REG
assign o_ACS_CB_MAX_15[7:0]	= r_ACS_CB_MAX_15[7:0];
assign o_ACS_CB_MAX_14[7:0]	= r_ACS_CB_MAX_14[7:0];
assign o_ACS_CB_MAX_13[7:0]	= r_ACS_CB_MAX_13[7:0];
assign o_ACS_CB_MAX_12[7:0]	= r_ACS_CB_MAX_12[7:0];


// SPA_ACS_CBMIN1_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_ACS_CB_MIN_03[7:0]	<= 8`h0;
		r_ACS_CB_MIN_02[7:0]	<= 8`h0;
		r_ACS_CB_MIN_01[7:0]	<= 8`h0;
		r_ACS_CB_MIN_00[7:0]	<= 8`h0;
	end
	else if (w_addr09ec_wr) begin
		r_ACS_CB_MIN_03[7:0]	<= i_PWDATA[7:0];
		r_ACS_CB_MIN_02[7:0]	<= i_PWDATA[15:8];
		r_ACS_CB_MIN_01[7:0]	<= i_PWDATA[23:16];
		r_ACS_CB_MIN_00[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_ACS_CB_MIN_03[7:0]	<= r_ACS_CB_MIN_03[7:0];
		r_ACS_CB_MIN_02[7:0]	<= r_ACS_CB_MIN_02[7:0];
		r_ACS_CB_MIN_01[7:0]	<= r_ACS_CB_MIN_01[7:0];
		r_ACS_CB_MIN_00[7:0]	<= r_ACS_CB_MIN_00[7:0];
	end
end

// output assign for SPA_ACS_CBMIN1_REG
assign o_ACS_CB_MIN_03[7:0]	= r_ACS_CB_MIN_03[7:0];
assign o_ACS_CB_MIN_02[7:0]	= r_ACS_CB_MIN_02[7:0];
assign o_ACS_CB_MIN_01[7:0]	= r_ACS_CB_MIN_01[7:0];
assign o_ACS_CB_MIN_00[7:0]	= r_ACS_CB_MIN_00[7:0];


// SPA_ACS_CBMIN2_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_ACS_CB_MIN_07[7:0]	<= 8`h0;
		r_ACS_CB_MIN_06[7:0]	<= 8`h0;
		r_ACS_CB_MIN_05[7:0]	<= 8`h0;
		r_ACS_CB_MIN_04[7:0]	<= 8`h0;
	end
	else if (w_addr09f0_wr) begin
		r_ACS_CB_MIN_07[7:0]	<= i_PWDATA[7:0];
		r_ACS_CB_MIN_06[7:0]	<= i_PWDATA[15:8];
		r_ACS_CB_MIN_05[7:0]	<= i_PWDATA[23:16];
		r_ACS_CB_MIN_04[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_ACS_CB_MIN_07[7:0]	<= r_ACS_CB_MIN_07[7:0];
		r_ACS_CB_MIN_06[7:0]	<= r_ACS_CB_MIN_06[7:0];
		r_ACS_CB_MIN_05[7:0]	<= r_ACS_CB_MIN_05[7:0];
		r_ACS_CB_MIN_04[7:0]	<= r_ACS_CB_MIN_04[7:0];
	end
end

// output assign for SPA_ACS_CBMIN2_REG
assign o_ACS_CB_MIN_07[7:0]	= r_ACS_CB_MIN_07[7:0];
assign o_ACS_CB_MIN_06[7:0]	= r_ACS_CB_MIN_06[7:0];
assign o_ACS_CB_MIN_05[7:0]	= r_ACS_CB_MIN_05[7:0];
assign o_ACS_CB_MIN_04[7:0]	= r_ACS_CB_MIN_04[7:0];


// SPA_ACS_CBMIN3_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_ACS_CB_MIN_11[7:0]	<= 8`h0;
		r_ACS_CB_MIN_10[7:0]	<= 8`h0;
		r_ACS_CB_MIN_09[7:0]	<= 8`h0;
		r_ACS_CB_MIN_08[7:0]	<= 8`h0;
	end
	else if (w_addr09f4_wr) begin
		r_ACS_CB_MIN_11[7:0]	<= i_PWDATA[7:0];
		r_ACS_CB_MIN_10[7:0]	<= i_PWDATA[15:8];
		r_ACS_CB_MIN_09[7:0]	<= i_PWDATA[23:16];
		r_ACS_CB_MIN_08[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_ACS_CB_MIN_11[7:0]	<= r_ACS_CB_MIN_11[7:0];
		r_ACS_CB_MIN_10[7:0]	<= r_ACS_CB_MIN_10[7:0];
		r_ACS_CB_MIN_09[7:0]	<= r_ACS_CB_MIN_09[7:0];
		r_ACS_CB_MIN_08[7:0]	<= r_ACS_CB_MIN_08[7:0];
	end
end

// output assign for SPA_ACS_CBMIN3_REG
assign o_ACS_CB_MIN_11[7:0]	= r_ACS_CB_MIN_11[7:0];
assign o_ACS_CB_MIN_10[7:0]	= r_ACS_CB_MIN_10[7:0];
assign o_ACS_CB_MIN_09[7:0]	= r_ACS_CB_MIN_09[7:0];
assign o_ACS_CB_MIN_08[7:0]	= r_ACS_CB_MIN_08[7:0];


// SPA_ACS_CBMIN4_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_ACS_CB_MIN_15[7:0]	<= 8`h0;
		r_ACS_CB_MIN_14[7:0]	<= 8`h0;
		r_ACS_CB_MIN_13[7:0]	<= 8`h0;
		r_ACS_CB_MIN_12[7:0]	<= 8`h0;
	end
	else if (w_addr09f8_wr) begin
		r_ACS_CB_MIN_15[7:0]	<= i_PWDATA[7:0];
		r_ACS_CB_MIN_14[7:0]	<= i_PWDATA[15:8];
		r_ACS_CB_MIN_13[7:0]	<= i_PWDATA[23:16];
		r_ACS_CB_MIN_12[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_ACS_CB_MIN_15[7:0]	<= r_ACS_CB_MIN_15[7:0];
		r_ACS_CB_MIN_14[7:0]	<= r_ACS_CB_MIN_14[7:0];
		r_ACS_CB_MIN_13[7:0]	<= r_ACS_CB_MIN_13[7:0];
		r_ACS_CB_MIN_12[7:0]	<= r_ACS_CB_MIN_12[7:0];
	end
end

// output assign for SPA_ACS_CBMIN4_REG
assign o_ACS_CB_MIN_15[7:0]	= r_ACS_CB_MIN_15[7:0];
assign o_ACS_CB_MIN_14[7:0]	= r_ACS_CB_MIN_14[7:0];
assign o_ACS_CB_MIN_13[7:0]	= r_ACS_CB_MIN_13[7:0];
assign o_ACS_CB_MIN_12[7:0]	= r_ACS_CB_MIN_12[7:0];


// SPA_ACS_CRMAX1_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_ACS_CR_MAX_03[7:0]	<= 8`h0;
		r_ACS_CR_MAX_02[7:0]	<= 8`h0;
		r_ACS_CR_MAX_01[7:0]	<= 8`h0;
		r_ACS_CR_MAX_00[7:0]	<= 8`h0;
	end
	else if (w_addr09fc_wr) begin
		r_ACS_CR_MAX_03[7:0]	<= i_PWDATA[7:0];
		r_ACS_CR_MAX_02[7:0]	<= i_PWDATA[15:8];
		r_ACS_CR_MAX_01[7:0]	<= i_PWDATA[23:16];
		r_ACS_CR_MAX_00[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_ACS_CR_MAX_03[7:0]	<= r_ACS_CR_MAX_03[7:0];
		r_ACS_CR_MAX_02[7:0]	<= r_ACS_CR_MAX_02[7:0];
		r_ACS_CR_MAX_01[7:0]	<= r_ACS_CR_MAX_01[7:0];
		r_ACS_CR_MAX_00[7:0]	<= r_ACS_CR_MAX_00[7:0];
	end
end

// output assign for SPA_ACS_CRMAX1_REG
assign o_ACS_CR_MAX_03[7:0]	= r_ACS_CR_MAX_03[7:0];
assign o_ACS_CR_MAX_02[7:0]	= r_ACS_CR_MAX_02[7:0];
assign o_ACS_CR_MAX_01[7:0]	= r_ACS_CR_MAX_01[7:0];
assign o_ACS_CR_MAX_00[7:0]	= r_ACS_CR_MAX_00[7:0];


// SPA_ACS_CRMAX2_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_ACS_CR_MAX_07[7:0]	<= 8`h0;
		r_ACS_CR_MAX_06[7:0]	<= 8`h0;
		r_ACS_CR_MAX_05[7:0]	<= 8`h0;
		r_ACS_CR_MAX_04[7:0]	<= 8`h0;
	end
	else if (w_addr0a00_wr) begin
		r_ACS_CR_MAX_07[7:0]	<= i_PWDATA[7:0];
		r_ACS_CR_MAX_06[7:0]	<= i_PWDATA[15:8];
		r_ACS_CR_MAX_05[7:0]	<= i_PWDATA[23:16];
		r_ACS_CR_MAX_04[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_ACS_CR_MAX_07[7:0]	<= r_ACS_CR_MAX_07[7:0];
		r_ACS_CR_MAX_06[7:0]	<= r_ACS_CR_MAX_06[7:0];
		r_ACS_CR_MAX_05[7:0]	<= r_ACS_CR_MAX_05[7:0];
		r_ACS_CR_MAX_04[7:0]	<= r_ACS_CR_MAX_04[7:0];
	end
end

// output assign for SPA_ACS_CRMAX2_REG
assign o_ACS_CR_MAX_07[7:0]	= r_ACS_CR_MAX_07[7:0];
assign o_ACS_CR_MAX_06[7:0]	= r_ACS_CR_MAX_06[7:0];
assign o_ACS_CR_MAX_05[7:0]	= r_ACS_CR_MAX_05[7:0];
assign o_ACS_CR_MAX_04[7:0]	= r_ACS_CR_MAX_04[7:0];


// SPA_ACS_CRMAX3_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_ACS_CR_MAX_11[7:0]	<= 8`h0;
		r_ACS_CR_MAX_10[7:0]	<= 8`h0;
		r_ACS_CR_MAX_09[7:0]	<= 8`h0;
		r_ACS_CR_MAX_08[7:0]	<= 8`h0;
	end
	else if (w_addr0a04_wr) begin
		r_ACS_CR_MAX_11[7:0]	<= i_PWDATA[7:0];
		r_ACS_CR_MAX_10[7:0]	<= i_PWDATA[15:8];
		r_ACS_CR_MAX_09[7:0]	<= i_PWDATA[23:16];
		r_ACS_CR_MAX_08[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_ACS_CR_MAX_11[7:0]	<= r_ACS_CR_MAX_11[7:0];
		r_ACS_CR_MAX_10[7:0]	<= r_ACS_CR_MAX_10[7:0];
		r_ACS_CR_MAX_09[7:0]	<= r_ACS_CR_MAX_09[7:0];
		r_ACS_CR_MAX_08[7:0]	<= r_ACS_CR_MAX_08[7:0];
	end
end

// output assign for SPA_ACS_CRMAX3_REG
assign o_ACS_CR_MAX_11[7:0]	= r_ACS_CR_MAX_11[7:0];
assign o_ACS_CR_MAX_10[7:0]	= r_ACS_CR_MAX_10[7:0];
assign o_ACS_CR_MAX_09[7:0]	= r_ACS_CR_MAX_09[7:0];
assign o_ACS_CR_MAX_08[7:0]	= r_ACS_CR_MAX_08[7:0];


// SPA_ACS_CRMAX4_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_ACS_CR_MAX_15[7:0]	<= 8`h0;
		r_ACS_CR_MAX_14[7:0]	<= 8`h0;
		r_ACS_CR_MAX_13[7:0]	<= 8`h0;
		r_ACS_CR_MAX_12[7:0]	<= 8`h0;
	end
	else if (w_addr0a08_wr) begin
		r_ACS_CR_MAX_15[7:0]	<= i_PWDATA[7:0];
		r_ACS_CR_MAX_14[7:0]	<= i_PWDATA[15:8];
		r_ACS_CR_MAX_13[7:0]	<= i_PWDATA[23:16];
		r_ACS_CR_MAX_12[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_ACS_CR_MAX_15[7:0]	<= r_ACS_CR_MAX_15[7:0];
		r_ACS_CR_MAX_14[7:0]	<= r_ACS_CR_MAX_14[7:0];
		r_ACS_CR_MAX_13[7:0]	<= r_ACS_CR_MAX_13[7:0];
		r_ACS_CR_MAX_12[7:0]	<= r_ACS_CR_MAX_12[7:0];
	end
end

// output assign for SPA_ACS_CRMAX4_REG
assign o_ACS_CR_MAX_15[7:0]	= r_ACS_CR_MAX_15[7:0];
assign o_ACS_CR_MAX_14[7:0]	= r_ACS_CR_MAX_14[7:0];
assign o_ACS_CR_MAX_13[7:0]	= r_ACS_CR_MAX_13[7:0];
assign o_ACS_CR_MAX_12[7:0]	= r_ACS_CR_MAX_12[7:0];


// SPA_ACS_CRMIN1_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_ACS_CR_MIN_03[7:0]	<= 8`h0;
		r_ACS_CR_MIN_02[7:0]	<= 8`h0;
		r_ACS_CR_MIN_01[7:0]	<= 8`h0;
		r_ACS_CR_MIN_00[7:0]	<= 8`h0;
	end
	else if (w_addr0a0c_wr) begin
		r_ACS_CR_MIN_03[7:0]	<= i_PWDATA[7:0];
		r_ACS_CR_MIN_02[7:0]	<= i_PWDATA[15:8];
		r_ACS_CR_MIN_01[7:0]	<= i_PWDATA[23:16];
		r_ACS_CR_MIN_00[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_ACS_CR_MIN_03[7:0]	<= r_ACS_CR_MIN_03[7:0];
		r_ACS_CR_MIN_02[7:0]	<= r_ACS_CR_MIN_02[7:0];
		r_ACS_CR_MIN_01[7:0]	<= r_ACS_CR_MIN_01[7:0];
		r_ACS_CR_MIN_00[7:0]	<= r_ACS_CR_MIN_00[7:0];
	end
end

// output assign for SPA_ACS_CRMIN1_REG
assign o_ACS_CR_MIN_03[7:0]	= r_ACS_CR_MIN_03[7:0];
assign o_ACS_CR_MIN_02[7:0]	= r_ACS_CR_MIN_02[7:0];
assign o_ACS_CR_MIN_01[7:0]	= r_ACS_CR_MIN_01[7:0];
assign o_ACS_CR_MIN_00[7:0]	= r_ACS_CR_MIN_00[7:0];


// SPA_ACS_CRMIN2_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_ACS_CR_MIN_07[7:0]	<= 8`h0;
		r_ACS_CR_MIN_06[7:0]	<= 8`h0;
		r_ACS_CR_MIN_05[7:0]	<= 8`h0;
		r_ACS_CR_MIN_04[7:0]	<= 8`h0;
	end
	else if (w_addr0a10_wr) begin
		r_ACS_CR_MIN_07[7:0]	<= i_PWDATA[7:0];
		r_ACS_CR_MIN_06[7:0]	<= i_PWDATA[15:8];
		r_ACS_CR_MIN_05[7:0]	<= i_PWDATA[23:16];
		r_ACS_CR_MIN_04[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_ACS_CR_MIN_07[7:0]	<= r_ACS_CR_MIN_07[7:0];
		r_ACS_CR_MIN_06[7:0]	<= r_ACS_CR_MIN_06[7:0];
		r_ACS_CR_MIN_05[7:0]	<= r_ACS_CR_MIN_05[7:0];
		r_ACS_CR_MIN_04[7:0]	<= r_ACS_CR_MIN_04[7:0];
	end
end

// output assign for SPA_ACS_CRMIN2_REG
assign o_ACS_CR_MIN_07[7:0]	= r_ACS_CR_MIN_07[7:0];
assign o_ACS_CR_MIN_06[7:0]	= r_ACS_CR_MIN_06[7:0];
assign o_ACS_CR_MIN_05[7:0]	= r_ACS_CR_MIN_05[7:0];
assign o_ACS_CR_MIN_04[7:0]	= r_ACS_CR_MIN_04[7:0];


// SPA_ACS_CRMIN3_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_ACS_CR_MIN_11[7:0]	<= 8`h0;
		r_ACS_CR_MIN_10[7:0]	<= 8`h0;
		r_ACS_CR_MIN_09[7:0]	<= 8`h0;
		r_ACS_CR_MIN_08[7:0]	<= 8`h0;
	end
	else if (w_addr0a14_wr) begin
		r_ACS_CR_MIN_11[7:0]	<= i_PWDATA[7:0];
		r_ACS_CR_MIN_10[7:0]	<= i_PWDATA[15:8];
		r_ACS_CR_MIN_09[7:0]	<= i_PWDATA[23:16];
		r_ACS_CR_MIN_08[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_ACS_CR_MIN_11[7:0]	<= r_ACS_CR_MIN_11[7:0];
		r_ACS_CR_MIN_10[7:0]	<= r_ACS_CR_MIN_10[7:0];
		r_ACS_CR_MIN_09[7:0]	<= r_ACS_CR_MIN_09[7:0];
		r_ACS_CR_MIN_08[7:0]	<= r_ACS_CR_MIN_08[7:0];
	end
end

// output assign for SPA_ACS_CRMIN3_REG
assign o_ACS_CR_MIN_11[7:0]	= r_ACS_CR_MIN_11[7:0];
assign o_ACS_CR_MIN_10[7:0]	= r_ACS_CR_MIN_10[7:0];
assign o_ACS_CR_MIN_09[7:0]	= r_ACS_CR_MIN_09[7:0];
assign o_ACS_CR_MIN_08[7:0]	= r_ACS_CR_MIN_08[7:0];


// SPA_ACS_CRMIN4_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_ACS_CR_MIN_15[7:0]	<= 8`h0;
		r_ACS_CR_MIN_14[7:0]	<= 8`h0;
		r_ACS_CR_MIN_13[7:0]	<= 8`h0;
		r_ACS_CR_MIN_12[7:0]	<= 8`h0;
	end
	else if (w_addr0a18_wr) begin
		r_ACS_CR_MIN_15[7:0]	<= i_PWDATA[7:0];
		r_ACS_CR_MIN_14[7:0]	<= i_PWDATA[15:8];
		r_ACS_CR_MIN_13[7:0]	<= i_PWDATA[23:16];
		r_ACS_CR_MIN_12[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_ACS_CR_MIN_15[7:0]	<= r_ACS_CR_MIN_15[7:0];
		r_ACS_CR_MIN_14[7:0]	<= r_ACS_CR_MIN_14[7:0];
		r_ACS_CR_MIN_13[7:0]	<= r_ACS_CR_MIN_13[7:0];
		r_ACS_CR_MIN_12[7:0]	<= r_ACS_CR_MIN_12[7:0];
	end
end

// output assign for SPA_ACS_CRMIN4_REG
assign o_ACS_CR_MIN_15[7:0]	= r_ACS_CR_MIN_15[7:0];
assign o_ACS_CR_MIN_14[7:0]	= r_ACS_CR_MIN_14[7:0];
assign o_ACS_CR_MIN_13[7:0]	= r_ACS_CR_MIN_13[7:0];
assign o_ACS_CR_MIN_12[7:0]	= r_ACS_CR_MIN_12[7:0];


// SPA_ACS_CBMAXH1_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_ACS_CB_MAXH_03[7:0]	<= 8`h0;
		r_ACS_CB_MAXH_02[7:0]	<= 8`h0;
		r_ACS_CB_MAXH_01[7:0]	<= 8`h0;
		r_ACS_CB_MAXH_00[7:0]	<= 8`h0;
	end
	else if (w_addr0a1c_wr) begin
		r_ACS_CB_MAXH_03[7:0]	<= i_PWDATA[7:0];
		r_ACS_CB_MAXH_02[7:0]	<= i_PWDATA[15:8];
		r_ACS_CB_MAXH_01[7:0]	<= i_PWDATA[23:16];
		r_ACS_CB_MAXH_00[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_ACS_CB_MAXH_03[7:0]	<= r_ACS_CB_MAXH_03[7:0];
		r_ACS_CB_MAXH_02[7:0]	<= r_ACS_CB_MAXH_02[7:0];
		r_ACS_CB_MAXH_01[7:0]	<= r_ACS_CB_MAXH_01[7:0];
		r_ACS_CB_MAXH_00[7:0]	<= r_ACS_CB_MAXH_00[7:0];
	end
end

// output assign for SPA_ACS_CBMAXH1_REG
assign o_ACS_CB_MAXH_03[7:0]	= r_ACS_CB_MAXH_03[7:0];
assign o_ACS_CB_MAXH_02[7:0]	= r_ACS_CB_MAXH_02[7:0];
assign o_ACS_CB_MAXH_01[7:0]	= r_ACS_CB_MAXH_01[7:0];
assign o_ACS_CB_MAXH_00[7:0]	= r_ACS_CB_MAXH_00[7:0];


// SPA_ACS_CBMAXH2_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_ACS_CB_MAXH_07[7:0]	<= 8`h0;
		r_ACS_CB_MAXH_06[7:0]	<= 8`h0;
		r_ACS_CB_MAXH_05[7:0]	<= 8`h0;
		r_ACS_CB_MAXH_04[7:0]	<= 8`h0;
	end
	else if (w_addr0a20_wr) begin
		r_ACS_CB_MAXH_07[7:0]	<= i_PWDATA[7:0];
		r_ACS_CB_MAXH_06[7:0]	<= i_PWDATA[15:8];
		r_ACS_CB_MAXH_05[7:0]	<= i_PWDATA[23:16];
		r_ACS_CB_MAXH_04[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_ACS_CB_MAXH_07[7:0]	<= r_ACS_CB_MAXH_07[7:0];
		r_ACS_CB_MAXH_06[7:0]	<= r_ACS_CB_MAXH_06[7:0];
		r_ACS_CB_MAXH_05[7:0]	<= r_ACS_CB_MAXH_05[7:0];
		r_ACS_CB_MAXH_04[7:0]	<= r_ACS_CB_MAXH_04[7:0];
	end
end

// output assign for SPA_ACS_CBMAXH2_REG
assign o_ACS_CB_MAXH_07[7:0]	= r_ACS_CB_MAXH_07[7:0];
assign o_ACS_CB_MAXH_06[7:0]	= r_ACS_CB_MAXH_06[7:0];
assign o_ACS_CB_MAXH_05[7:0]	= r_ACS_CB_MAXH_05[7:0];
assign o_ACS_CB_MAXH_04[7:0]	= r_ACS_CB_MAXH_04[7:0];


// SPA_ACS_CBMAXH3_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_ACS_CB_MAXH_11[7:0]	<= 8`h0;
		r_ACS_CB_MAXH_10[7:0]	<= 8`h0;
		r_ACS_CB_MAXH_09[7:0]	<= 8`h0;
		r_ACS_CB_MAXH_08[7:0]	<= 8`h0;
	end
	else if (w_addr0a24_wr) begin
		r_ACS_CB_MAXH_11[7:0]	<= i_PWDATA[7:0];
		r_ACS_CB_MAXH_10[7:0]	<= i_PWDATA[15:8];
		r_ACS_CB_MAXH_09[7:0]	<= i_PWDATA[23:16];
		r_ACS_CB_MAXH_08[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_ACS_CB_MAXH_11[7:0]	<= r_ACS_CB_MAXH_11[7:0];
		r_ACS_CB_MAXH_10[7:0]	<= r_ACS_CB_MAXH_10[7:0];
		r_ACS_CB_MAXH_09[7:0]	<= r_ACS_CB_MAXH_09[7:0];
		r_ACS_CB_MAXH_08[7:0]	<= r_ACS_CB_MAXH_08[7:0];
	end
end

// output assign for SPA_ACS_CBMAXH3_REG
assign o_ACS_CB_MAXH_11[7:0]	= r_ACS_CB_MAXH_11[7:0];
assign o_ACS_CB_MAXH_10[7:0]	= r_ACS_CB_MAXH_10[7:0];
assign o_ACS_CB_MAXH_09[7:0]	= r_ACS_CB_MAXH_09[7:0];
assign o_ACS_CB_MAXH_08[7:0]	= r_ACS_CB_MAXH_08[7:0];


// SPA_ACS_CBMAXH4_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_ACS_CB_MAXH_15[7:0]	<= 8`h0;
		r_ACS_CB_MAXH_14[7:0]	<= 8`h0;
		r_ACS_CB_MAXH_13[7:0]	<= 8`h0;
		r_ACS_CB_MAXH_12[7:0]	<= 8`h0;
	end
	else if (w_addr0a28_wr) begin
		r_ACS_CB_MAXH_15[7:0]	<= i_PWDATA[7:0];
		r_ACS_CB_MAXH_14[7:0]	<= i_PWDATA[15:8];
		r_ACS_CB_MAXH_13[7:0]	<= i_PWDATA[23:16];
		r_ACS_CB_MAXH_12[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_ACS_CB_MAXH_15[7:0]	<= r_ACS_CB_MAXH_15[7:0];
		r_ACS_CB_MAXH_14[7:0]	<= r_ACS_CB_MAXH_14[7:0];
		r_ACS_CB_MAXH_13[7:0]	<= r_ACS_CB_MAXH_13[7:0];
		r_ACS_CB_MAXH_12[7:0]	<= r_ACS_CB_MAXH_12[7:0];
	end
end

// output assign for SPA_ACS_CBMAXH4_REG
assign o_ACS_CB_MAXH_15[7:0]	= r_ACS_CB_MAXH_15[7:0];
assign o_ACS_CB_MAXH_14[7:0]	= r_ACS_CB_MAXH_14[7:0];
assign o_ACS_CB_MAXH_13[7:0]	= r_ACS_CB_MAXH_13[7:0];
assign o_ACS_CB_MAXH_12[7:0]	= r_ACS_CB_MAXH_12[7:0];


// SPA_ACS_CBMINH1_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_ACS_CB_MINH_03[7:0]	<= 8`h0;
		r_ACS_CB_MINH_02[7:0]	<= 8`h0;
		r_ACS_CB_MINH_01[7:0]	<= 8`h0;
		r_ACS_CB_MINH_00[7:0]	<= 8`h0;
	end
	else if (w_addr0a2c_wr) begin
		r_ACS_CB_MINH_03[7:0]	<= i_PWDATA[7:0];
		r_ACS_CB_MINH_02[7:0]	<= i_PWDATA[15:8];
		r_ACS_CB_MINH_01[7:0]	<= i_PWDATA[23:16];
		r_ACS_CB_MINH_00[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_ACS_CB_MINH_03[7:0]	<= r_ACS_CB_MINH_03[7:0];
		r_ACS_CB_MINH_02[7:0]	<= r_ACS_CB_MINH_02[7:0];
		r_ACS_CB_MINH_01[7:0]	<= r_ACS_CB_MINH_01[7:0];
		r_ACS_CB_MINH_00[7:0]	<= r_ACS_CB_MINH_00[7:0];
	end
end

// output assign for SPA_ACS_CBMINH1_REG
assign o_ACS_CB_MINH_03[7:0]	= r_ACS_CB_MINH_03[7:0];
assign o_ACS_CB_MINH_02[7:0]	= r_ACS_CB_MINH_02[7:0];
assign o_ACS_CB_MINH_01[7:0]	= r_ACS_CB_MINH_01[7:0];
assign o_ACS_CB_MINH_00[7:0]	= r_ACS_CB_MINH_00[7:0];


// SPA_ACS_CBMINH2_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_ACS_CB_MINH_07[7:0]	<= 8`h0;
		r_ACS_CB_MINH_06[7:0]	<= 8`h0;
		r_ACS_CB_MINH_05[7:0]	<= 8`h0;
		r_ACS_CB_MINH_04[7:0]	<= 8`h0;
	end
	else if (w_addr0a30_wr) begin
		r_ACS_CB_MINH_07[7:0]	<= i_PWDATA[7:0];
		r_ACS_CB_MINH_06[7:0]	<= i_PWDATA[15:8];
		r_ACS_CB_MINH_05[7:0]	<= i_PWDATA[23:16];
		r_ACS_CB_MINH_04[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_ACS_CB_MINH_07[7:0]	<= r_ACS_CB_MINH_07[7:0];
		r_ACS_CB_MINH_06[7:0]	<= r_ACS_CB_MINH_06[7:0];
		r_ACS_CB_MINH_05[7:0]	<= r_ACS_CB_MINH_05[7:0];
		r_ACS_CB_MINH_04[7:0]	<= r_ACS_CB_MINH_04[7:0];
	end
end

// output assign for SPA_ACS_CBMINH2_REG
assign o_ACS_CB_MINH_07[7:0]	= r_ACS_CB_MINH_07[7:0];
assign o_ACS_CB_MINH_06[7:0]	= r_ACS_CB_MINH_06[7:0];
assign o_ACS_CB_MINH_05[7:0]	= r_ACS_CB_MINH_05[7:0];
assign o_ACS_CB_MINH_04[7:0]	= r_ACS_CB_MINH_04[7:0];


// SPA_ACS_CBMINH3_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_ACS_CB_MINH_11[7:0]	<= 8`h0;
		r_ACS_CB_MINH_10[7:0]	<= 8`h0;
		r_ACS_CB_MINH_09[7:0]	<= 8`h0;
		r_ACS_CB_MINH_08[7:0]	<= 8`h0;
	end
	else if (w_addr0a34_wr) begin
		r_ACS_CB_MINH_11[7:0]	<= i_PWDATA[7:0];
		r_ACS_CB_MINH_10[7:0]	<= i_PWDATA[15:8];
		r_ACS_CB_MINH_09[7:0]	<= i_PWDATA[23:16];
		r_ACS_CB_MINH_08[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_ACS_CB_MINH_11[7:0]	<= r_ACS_CB_MINH_11[7:0];
		r_ACS_CB_MINH_10[7:0]	<= r_ACS_CB_MINH_10[7:0];
		r_ACS_CB_MINH_09[7:0]	<= r_ACS_CB_MINH_09[7:0];
		r_ACS_CB_MINH_08[7:0]	<= r_ACS_CB_MINH_08[7:0];
	end
end

// output assign for SPA_ACS_CBMINH3_REG
assign o_ACS_CB_MINH_11[7:0]	= r_ACS_CB_MINH_11[7:0];
assign o_ACS_CB_MINH_10[7:0]	= r_ACS_CB_MINH_10[7:0];
assign o_ACS_CB_MINH_09[7:0]	= r_ACS_CB_MINH_09[7:0];
assign o_ACS_CB_MINH_08[7:0]	= r_ACS_CB_MINH_08[7:0];


// SPA_ACS_CBMINH4_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_ACS_CB_MINH_15[7:0]	<= 8`h0;
		r_ACS_CB_MINH_14[7:0]	<= 8`h0;
		r_ACS_CB_MINH_13[7:0]	<= 8`h0;
		r_ACS_CB_MINH_12[7:0]	<= 8`h0;
	end
	else if (w_addr0a38_wr) begin
		r_ACS_CB_MINH_15[7:0]	<= i_PWDATA[7:0];
		r_ACS_CB_MINH_14[7:0]	<= i_PWDATA[15:8];
		r_ACS_CB_MINH_13[7:0]	<= i_PWDATA[23:16];
		r_ACS_CB_MINH_12[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_ACS_CB_MINH_15[7:0]	<= r_ACS_CB_MINH_15[7:0];
		r_ACS_CB_MINH_14[7:0]	<= r_ACS_CB_MINH_14[7:0];
		r_ACS_CB_MINH_13[7:0]	<= r_ACS_CB_MINH_13[7:0];
		r_ACS_CB_MINH_12[7:0]	<= r_ACS_CB_MINH_12[7:0];
	end
end

// output assign for SPA_ACS_CBMINH4_REG
assign o_ACS_CB_MINH_15[7:0]	= r_ACS_CB_MINH_15[7:0];
assign o_ACS_CB_MINH_14[7:0]	= r_ACS_CB_MINH_14[7:0];
assign o_ACS_CB_MINH_13[7:0]	= r_ACS_CB_MINH_13[7:0];
assign o_ACS_CB_MINH_12[7:0]	= r_ACS_CB_MINH_12[7:0];


// SPA_ACS_CRMAXH1_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_ACS_CR_MAXH_03[7:0]	<= 8`h0;
		r_ACS_CR_MAXH_02[7:0]	<= 8`h0;
		r_ACS_CR_MAXH_01[7:0]	<= 8`h0;
		r_ACS_CR_MAXH_00[7:0]	<= 8`h0;
	end
	else if (w_addr0a3c_wr) begin
		r_ACS_CR_MAXH_03[7:0]	<= i_PWDATA[7:0];
		r_ACS_CR_MAXH_02[7:0]	<= i_PWDATA[15:8];
		r_ACS_CR_MAXH_01[7:0]	<= i_PWDATA[23:16];
		r_ACS_CR_MAXH_00[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_ACS_CR_MAXH_03[7:0]	<= r_ACS_CR_MAXH_03[7:0];
		r_ACS_CR_MAXH_02[7:0]	<= r_ACS_CR_MAXH_02[7:0];
		r_ACS_CR_MAXH_01[7:0]	<= r_ACS_CR_MAXH_01[7:0];
		r_ACS_CR_MAXH_00[7:0]	<= r_ACS_CR_MAXH_00[7:0];
	end
end

// output assign for SPA_ACS_CRMAXH1_REG
assign o_ACS_CR_MAXH_03[7:0]	= r_ACS_CR_MAXH_03[7:0];
assign o_ACS_CR_MAXH_02[7:0]	= r_ACS_CR_MAXH_02[7:0];
assign o_ACS_CR_MAXH_01[7:0]	= r_ACS_CR_MAXH_01[7:0];
assign o_ACS_CR_MAXH_00[7:0]	= r_ACS_CR_MAXH_00[7:0];


// SPA_ACS_CRMAXH2_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_ACS_CR_MAXH_07[7:0]	<= 8`h0;
		r_ACS_CR_MAXH_06[7:0]	<= 8`h0;
		r_ACS_CR_MAXH_05[7:0]	<= 8`h0;
		r_ACS_CR_MAXH_04[7:0]	<= 8`h0;
	end
	else if (w_addr0a40_wr) begin
		r_ACS_CR_MAXH_07[7:0]	<= i_PWDATA[7:0];
		r_ACS_CR_MAXH_06[7:0]	<= i_PWDATA[15:8];
		r_ACS_CR_MAXH_05[7:0]	<= i_PWDATA[23:16];
		r_ACS_CR_MAXH_04[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_ACS_CR_MAXH_07[7:0]	<= r_ACS_CR_MAXH_07[7:0];
		r_ACS_CR_MAXH_06[7:0]	<= r_ACS_CR_MAXH_06[7:0];
		r_ACS_CR_MAXH_05[7:0]	<= r_ACS_CR_MAXH_05[7:0];
		r_ACS_CR_MAXH_04[7:0]	<= r_ACS_CR_MAXH_04[7:0];
	end
end

// output assign for SPA_ACS_CRMAXH2_REG
assign o_ACS_CR_MAXH_07[7:0]	= r_ACS_CR_MAXH_07[7:0];
assign o_ACS_CR_MAXH_06[7:0]	= r_ACS_CR_MAXH_06[7:0];
assign o_ACS_CR_MAXH_05[7:0]	= r_ACS_CR_MAXH_05[7:0];
assign o_ACS_CR_MAXH_04[7:0]	= r_ACS_CR_MAXH_04[7:0];


// SPA_ACS_CRMAXH3_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_ACS_CR_MAXH_11[7:0]	<= 8`h0;
		r_ACS_CR_MAXH_10[7:0]	<= 8`h0;
		r_ACS_CR_MAXH_09[7:0]	<= 8`h0;
		r_ACS_CR_MAXH_08[7:0]	<= 8`h0;
	end
	else if (w_addr0a44_wr) begin
		r_ACS_CR_MAXH_11[7:0]	<= i_PWDATA[7:0];
		r_ACS_CR_MAXH_10[7:0]	<= i_PWDATA[15:8];
		r_ACS_CR_MAXH_09[7:0]	<= i_PWDATA[23:16];
		r_ACS_CR_MAXH_08[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_ACS_CR_MAXH_11[7:0]	<= r_ACS_CR_MAXH_11[7:0];
		r_ACS_CR_MAXH_10[7:0]	<= r_ACS_CR_MAXH_10[7:0];
		r_ACS_CR_MAXH_09[7:0]	<= r_ACS_CR_MAXH_09[7:0];
		r_ACS_CR_MAXH_08[7:0]	<= r_ACS_CR_MAXH_08[7:0];
	end
end

// output assign for SPA_ACS_CRMAXH3_REG
assign o_ACS_CR_MAXH_11[7:0]	= r_ACS_CR_MAXH_11[7:0];
assign o_ACS_CR_MAXH_10[7:0]	= r_ACS_CR_MAXH_10[7:0];
assign o_ACS_CR_MAXH_09[7:0]	= r_ACS_CR_MAXH_09[7:0];
assign o_ACS_CR_MAXH_08[7:0]	= r_ACS_CR_MAXH_08[7:0];


// SPA_ACS_CRMAXH4_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_ACS_CR_MAXH_15[7:0]	<= 8`h0;
		r_ACS_CR_MAXH_14[7:0]	<= 8`h0;
		r_ACS_CR_MAXH_13[7:0]	<= 8`h0;
		r_ACS_CR_MAXH_12[7:0]	<= 8`h0;
	end
	else if (w_addr0a48_wr) begin
		r_ACS_CR_MAXH_15[7:0]	<= i_PWDATA[7:0];
		r_ACS_CR_MAXH_14[7:0]	<= i_PWDATA[15:8];
		r_ACS_CR_MAXH_13[7:0]	<= i_PWDATA[23:16];
		r_ACS_CR_MAXH_12[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_ACS_CR_MAXH_15[7:0]	<= r_ACS_CR_MAXH_15[7:0];
		r_ACS_CR_MAXH_14[7:0]	<= r_ACS_CR_MAXH_14[7:0];
		r_ACS_CR_MAXH_13[7:0]	<= r_ACS_CR_MAXH_13[7:0];
		r_ACS_CR_MAXH_12[7:0]	<= r_ACS_CR_MAXH_12[7:0];
	end
end

// output assign for SPA_ACS_CRMAXH4_REG
assign o_ACS_CR_MAXH_15[7:0]	= r_ACS_CR_MAXH_15[7:0];
assign o_ACS_CR_MAXH_14[7:0]	= r_ACS_CR_MAXH_14[7:0];
assign o_ACS_CR_MAXH_13[7:0]	= r_ACS_CR_MAXH_13[7:0];
assign o_ACS_CR_MAXH_12[7:0]	= r_ACS_CR_MAXH_12[7:0];


// SPA_ACS_CRMINH1_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_ACS_CR_MINH_03[7:0]	<= 8`h0;
		r_ACS_CR_MINH_02[7:0]	<= 8`h0;
		r_ACS_CR_MINH_01[7:0]	<= 8`h0;
		r_ACS_CR_MINH_00[7:0]	<= 8`h0;
	end
	else if (w_addr0a4c_wr) begin
		r_ACS_CR_MINH_03[7:0]	<= i_PWDATA[7:0];
		r_ACS_CR_MINH_02[7:0]	<= i_PWDATA[15:8];
		r_ACS_CR_MINH_01[7:0]	<= i_PWDATA[23:16];
		r_ACS_CR_MINH_00[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_ACS_CR_MINH_03[7:0]	<= r_ACS_CR_MINH_03[7:0];
		r_ACS_CR_MINH_02[7:0]	<= r_ACS_CR_MINH_02[7:0];
		r_ACS_CR_MINH_01[7:0]	<= r_ACS_CR_MINH_01[7:0];
		r_ACS_CR_MINH_00[7:0]	<= r_ACS_CR_MINH_00[7:0];
	end
end

// output assign for SPA_ACS_CRMINH1_REG
assign o_ACS_CR_MINH_03[7:0]	= r_ACS_CR_MINH_03[7:0];
assign o_ACS_CR_MINH_02[7:0]	= r_ACS_CR_MINH_02[7:0];
assign o_ACS_CR_MINH_01[7:0]	= r_ACS_CR_MINH_01[7:0];
assign o_ACS_CR_MINH_00[7:0]	= r_ACS_CR_MINH_00[7:0];


// SPA_ACS_CRMINH2_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_ACS_CR_MINH_07[7:0]	<= 8`h0;
		r_ACS_CR_MINH_06[7:0]	<= 8`h0;
		r_ACS_CR_MINH_05[7:0]	<= 8`h0;
		r_ACS_CR_MINH_04[7:0]	<= 8`h0;
	end
	else if (w_addr0a50_wr) begin
		r_ACS_CR_MINH_07[7:0]	<= i_PWDATA[7:0];
		r_ACS_CR_MINH_06[7:0]	<= i_PWDATA[15:8];
		r_ACS_CR_MINH_05[7:0]	<= i_PWDATA[23:16];
		r_ACS_CR_MINH_04[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_ACS_CR_MINH_07[7:0]	<= r_ACS_CR_MINH_07[7:0];
		r_ACS_CR_MINH_06[7:0]	<= r_ACS_CR_MINH_06[7:0];
		r_ACS_CR_MINH_05[7:0]	<= r_ACS_CR_MINH_05[7:0];
		r_ACS_CR_MINH_04[7:0]	<= r_ACS_CR_MINH_04[7:0];
	end
end

// output assign for SPA_ACS_CRMINH2_REG
assign o_ACS_CR_MINH_07[7:0]	= r_ACS_CR_MINH_07[7:0];
assign o_ACS_CR_MINH_06[7:0]	= r_ACS_CR_MINH_06[7:0];
assign o_ACS_CR_MINH_05[7:0]	= r_ACS_CR_MINH_05[7:0];
assign o_ACS_CR_MINH_04[7:0]	= r_ACS_CR_MINH_04[7:0];


// SPA_ACS_CRMINH3_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_ACS_CR_MINH_11[7:0]	<= 8`h0;
		r_ACS_CR_MINH_10[7:0]	<= 8`h0;
		r_ACS_CR_MINH_09[7:0]	<= 8`h0;
		r_ACS_CR_MINH_08[7:0]	<= 8`h0;
	end
	else if (w_addr0a54_wr) begin
		r_ACS_CR_MINH_11[7:0]	<= i_PWDATA[7:0];
		r_ACS_CR_MINH_10[7:0]	<= i_PWDATA[15:8];
		r_ACS_CR_MINH_09[7:0]	<= i_PWDATA[23:16];
		r_ACS_CR_MINH_08[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_ACS_CR_MINH_11[7:0]	<= r_ACS_CR_MINH_11[7:0];
		r_ACS_CR_MINH_10[7:0]	<= r_ACS_CR_MINH_10[7:0];
		r_ACS_CR_MINH_09[7:0]	<= r_ACS_CR_MINH_09[7:0];
		r_ACS_CR_MINH_08[7:0]	<= r_ACS_CR_MINH_08[7:0];
	end
end

// output assign for SPA_ACS_CRMINH3_REG
assign o_ACS_CR_MINH_11[7:0]	= r_ACS_CR_MINH_11[7:0];
assign o_ACS_CR_MINH_10[7:0]	= r_ACS_CR_MINH_10[7:0];
assign o_ACS_CR_MINH_09[7:0]	= r_ACS_CR_MINH_09[7:0];
assign o_ACS_CR_MINH_08[7:0]	= r_ACS_CR_MINH_08[7:0];


// SPA_ACS_CRMINH4_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_ACS_CR_MINH_15[7:0]	<= 8`h0;
		r_ACS_CR_MINH_14[7:0]	<= 8`h0;
		r_ACS_CR_MINH_13[7:0]	<= 8`h0;
		r_ACS_CR_MINH_12[7:0]	<= 8`h0;
	end
	else if (w_addr0a58_wr) begin
		r_ACS_CR_MINH_15[7:0]	<= i_PWDATA[7:0];
		r_ACS_CR_MINH_14[7:0]	<= i_PWDATA[15:8];
		r_ACS_CR_MINH_13[7:0]	<= i_PWDATA[23:16];
		r_ACS_CR_MINH_12[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_ACS_CR_MINH_15[7:0]	<= r_ACS_CR_MINH_15[7:0];
		r_ACS_CR_MINH_14[7:0]	<= r_ACS_CR_MINH_14[7:0];
		r_ACS_CR_MINH_13[7:0]	<= r_ACS_CR_MINH_13[7:0];
		r_ACS_CR_MINH_12[7:0]	<= r_ACS_CR_MINH_12[7:0];
	end
end

// output assign for SPA_ACS_CRMINH4_REG
assign o_ACS_CR_MINH_15[7:0]	= r_ACS_CR_MINH_15[7:0];
assign o_ACS_CR_MINH_14[7:0]	= r_ACS_CR_MINH_14[7:0];
assign o_ACS_CR_MINH_13[7:0]	= r_ACS_CR_MINH_13[7:0];
assign o_ACS_CR_MINH_12[7:0]	= r_ACS_CR_MINH_12[7:0];


// SPA_ACS_VALUE_TH_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_ACS_VALUE_BLOCK_TH[7:0]	<= 8`h0;
		r_ACS_VALUE_PXL_TH[7:0]	<= 8`h0;
	end
	else if (w_addr0a5c_wr) begin
		r_ACS_VALUE_BLOCK_TH[7:0]	<= i_PWDATA[7:0];
		r_ACS_VALUE_PXL_TH[7:0]	<= i_PWDATA[15:8];
	end
	else begin
		r_ACS_VALUE_BLOCK_TH[7:0]	<= r_ACS_VALUE_BLOCK_TH[7:0];
		r_ACS_VALUE_PXL_TH[7:0]	<= r_ACS_VALUE_PXL_TH[7:0];
	end
end

// output assign for SPA_ACS_VALUE_TH_REG
assign o_ACS_VALUE_BLOCK_TH[7:0]	= r_ACS_VALUE_BLOCK_TH[7:0];
assign o_ACS_VALUE_PXL_TH[7:0]	= r_ACS_VALUE_PXL_TH[7:0];


// SPA_ACS_TBLK_PAGE_REG register

// output assign for SPA_ACS_TBLK_PAGE_REG
assign o_ACS_TBLK_PAGE[31:0]	= 32'h0 /* add logic */ ;


// SPA_ACS_TBLK_NPAGE_REG register

// output assign for SPA_ACS_TBLK_NPAGE_REG
assign o_ACS_TBLK_NPAGE[31:0]	= 32'h0 /* add logic */ ;


// SPA_ACS_CBLK_REG register

// output assign for SPA_ACS_CBLK_REG
assign o_ACS_CBLK[31:0]	= 32'h0 /* add logic */ ;


// SPA_ACS_SBLK_PAGE_REG register

// output assign for SPA_ACS_SBLK_PAGE_REG
assign o_ACS_SBLK_PAGE[31:0]	= 32'h0 /* add logic */ ;


// SPA_ACS_SPXL_BLK_PAGE_REG register

// output assign for SPA_ACS_SPXL_BLK_PAGE_REG
assign o_ACS_SPXL_BLK_PAGE[31:0]	= 32'h0 /* add logic */ ;


// SPA_ACS_SPXL_PAGE_REG register

// output assign for SPA_ACS_SPXL_PAGE_REG
assign o_ACS_SPXL_PAGE[31:0]	= 32'h0 /* add logic */ ;


// SPA_ACS_TEXT_PAGE_REG register

// output assign for SPA_ACS_TEXT_PAGE_REG
assign o_ACS_TEXT_PAGE[31:0]	= 32'h0 /* add logic */ ;


// SPA_ACS_HT_PAGE_REG register

// output assign for SPA_ACS_HT_PAGE_REG
assign o_ACS_HT_PAGE[31:0]	= 32'h0 /* add logic */ ;


// SPA_ACS_EDGE_PAGE_REG register

// output assign for SPA_ACS_EDGE_PAGE_REG
assign o_ACS_EDGE_PAGE[31:0]	= 32'h0 /* add logic */ ;


// SPA_AVG_HT_ACS00_REG register

// output assign for SPA_AVG_HT_ACS00_REG
assign o_AVG_HT_ACS00[31:0]	= 32'h0 /* add logic */ ;


// SPA_AVG_HT_ACS01_REG register

// output assign for SPA_AVG_HT_ACS01_REG
assign o_AVG_HT_ACS01[31:0]	= 32'h0 /* add logic */ ;


// SPA_AVG_HT_ACS02_REG register

// output assign for SPA_AVG_HT_ACS02_REG
assign o_AVG_HT_ACS02[31:0]	= 32'h0 /* add logic */ ;


// SPA_AVG_HT_ACS03_REG register

// output assign for SPA_AVG_HT_ACS03_REG
assign o_AVG_HT_ACS03[31:0]	= 32'h0 /* add logic */ ;


// SPA_AVG_HT_ACS04_REG register

// output assign for SPA_AVG_HT_ACS04_REG
assign o_AVG_HT_ACS04[31:0]	= 32'h0 /* add logic */ ;


// SPA_AVG_HT_ACS05_REG register

// output assign for SPA_AVG_HT_ACS05_REG
assign o_AVG_HT_ACS05[31:0]	= 32'h0 /* add logic */ ;


// SPA_AVG_HT_ACS06_REG register

// output assign for SPA_AVG_HT_ACS06_REG
assign o_AVG_HT_ACS06[31:0]	= 32'h0 /* add logic */ ;


// SPA_AVG_HT_ACS07_REG register

// output assign for SPA_AVG_HT_ACS07_REG
assign o_AVG_HT_ACS07[31:0]	= 32'h0 /* add logic */ ;


// SPA_AVG_HT_ACS08_REG register

// output assign for SPA_AVG_HT_ACS08_REG
assign o_AVG_HT_ACS08[31:0]	= 32'h0 /* add logic */ ;


// SPA_AVG_HT_ACS09_REG register

// output assign for SPA_AVG_HT_ACS09_REG
assign o_AVG_HT_ACS09[31:0]	= 32'h0 /* add logic */ ;


// SPA_AVG_HT_ACS10_REG register

// output assign for SPA_AVG_HT_ACS10_REG
assign o_AVG_HT_ACS10[31:0]	= 32'h0 /* add logic */ ;


// SPA_AVG_HT_ACS11_REG register

// output assign for SPA_AVG_HT_ACS11_REG
assign o_AVG_HT_ACS11[31:0]	= 32'h0 /* add logic */ ;


// SPA_AVG_HT_ACS12_REG register

// output assign for SPA_AVG_HT_ACS12_REG
assign o_AVG_HT_ACS12[31:0]	= 32'h0 /* add logic */ ;


// SPA_AVG_HT_ACS13_REG register

// output assign for SPA_AVG_HT_ACS13_REG
assign o_AVG_HT_ACS13[31:0]	= 32'h0 /* add logic */ ;


// SPA_AVG_HT_ACS14_REG register

// output assign for SPA_AVG_HT_ACS14_REG
assign o_AVG_HT_ACS14[31:0]	= 32'h0 /* add logic */ ;


// SPA_AVG_HT_ACS15_REG register

// output assign for SPA_AVG_HT_ACS15_REG
assign o_AVG_HT_ACS15[31:0]	= 32'h0 /* add logic */ ;


// SPA_AVG_NHT_ACS00_REG register

// output assign for SPA_AVG_NHT_ACS00_REG
assign o_AVG_NHT_ACS00[31:0]	= 32'h0 /* add logic */ ;


// SPA_AVG_NHT_ACS01_REG register

// output assign for SPA_AVG_NHT_ACS01_REG
assign o_AVG_NHT_ACS01[31:0]	= 32'h0 /* add logic */ ;


// SPA_AVG_NHT_ACS02_REG register

// output assign for SPA_AVG_NHT_ACS02_REG
assign o_AVG_NHT_ACS02[31:0]	= 32'h0 /* add logic */ ;


// SPA_AVG_NHT_ACS03_REG register

// output assign for SPA_AVG_NHT_ACS03_REG
assign o_AVG_NHT_ACS03[31:0]	= 32'h0 /* add logic */ ;


// SPA_AVG_NHT_ACS04_REG register

// output assign for SPA_AVG_NHT_ACS04_REG
assign o_AVG_NHT_ACS04[31:0]	= 32'h0 /* add logic */ ;


// SPA_AVG_NHT_ACS05_REG register

// output assign for SPA_AVG_NHT_ACS05_REG
assign o_AVG_NHT_ACS05[31:0]	= 32'h0 /* add logic */ ;


// SPA_AVG_NHT_ACS06_REG register

// output assign for SPA_AVG_NHT_ACS06_REG
assign o_AVG_NHT_ACS06[31:0]	= 32'h0 /* add logic */ ;


// SPA_AVG_NHT_ACS07_REG register

// output assign for SPA_AVG_NHT_ACS07_REG
assign o_AVG_NHT_ACS07[31:0]	= 32'h0 /* add logic */ ;


// SPA_AVG_NHT_ACS08_REG register

// output assign for SPA_AVG_NHT_ACS08_REG
assign o_AVG_NHT_ACS08[31:0]	= 32'h0 /* add logic */ ;


// SPA_AVG_NHT_ACS09_REG register

// output assign for SPA_AVG_NHT_ACS09_REG
assign o_AVG_NHT_ACS09[31:0]	= 32'h0 /* add logic */ ;


// SPA_AVG_NHT_ACS10_REG register

// output assign for SPA_AVG_NHT_ACS10_REG
assign o_AVG_NHT_ACS10[31:0]	= 32'h0 /* add logic */ ;


// SPA_AVG_NHT_ACS11_REG register

// output assign for SPA_AVG_NHT_ACS11_REG
assign o_AVG_NHT_ACS11[31:0]	= 32'h0 /* add logic */ ;


// SPA_AVG_NHT_ACS12_REG register

// output assign for SPA_AVG_NHT_ACS12_REG
assign o_AVG_NHT_ACS12[31:0]	= 32'h0 /* add logic */ ;


// SPA_AVG_NHT_ACS13_REG register

// output assign for SPA_AVG_NHT_ACS13_REG
assign o_AVG_NHT_ACS13[31:0]	= 32'h0 /* add logic */ ;


// SPA_AVG_NHT_ACS14_REG register

// output assign for SPA_AVG_NHT_ACS14_REG
assign o_AVG_NHT_ACS14[31:0]	= 32'h0 /* add logic */ ;


// SPA_AVG_NHT_ACS15_REG register

// output assign for SPA_AVG_NHT_ACS15_REG
assign o_AVG_NHT_ACS15[31:0]	= 32'h0 /* add logic */ ;


// SPA_ACS_SATURATION_TH2_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_ACS_SATURATION_PXL_CNT_TH[14:0]	<= 15`h0;
	end
	else if (w_addr0b08_wr) begin
		r_ACS_SATURATION_PXL_CNT_TH[14:0]	<= i_PWDATA[14:0];
	end
	else begin
		r_ACS_SATURATION_PXL_CNT_TH[14:0]	<= r_ACS_SATURATION_PXL_CNT_TH[14:0];
	end
end

// output assign for SPA_ACS_SATURATION_TH2_REG
assign o_ACS_SATURATION_PXL_CNT_TH[14:0]	= r_ACS_SATURATION_PXL_CNT_TH[14:0];


// SPA_ACS_VALID_RANGE_H_REG register

// output assign for SPA_ACS_VALID_RANGE_H_REG
assign o_VALID_BOTTOM[13:0]	= 14'h0 /* add logic */ ;
assign o_VALID_TOP[13:0]	= 14'h0 /* add logic */ ;


// SPA_ACS_VALID_RANGE_W_REG register

// output assign for SPA_ACS_VALID_RANGE_W_REG
assign o_VALID_RIGHT[13:0]	= 14'h0 /* add logic */ ;
assign o_VALID_LEFT[13:0]	= 14'h0 /* add logic */ ;


// SPA_ACS_V2_CON_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_ACS_V2_BLOCK_SIZE_X[7:0]	<= 8`h0;
		r_ACS_V2_BLOCK_SIZE_Y[7:0]	<= 8`h0;
		r_ACS_V2_WHITE_TH[7:0]	<= 8`hE6;
	end
	else if (w_addr0b14_wr) begin
		r_ACS_V2_BLOCK_SIZE_X[7:0]	<= i_PWDATA[15:8];
		r_ACS_V2_BLOCK_SIZE_Y[7:0]	<= i_PWDATA[23:16];
		r_ACS_V2_WHITE_TH[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_ACS_V2_BLOCK_SIZE_X[7:0]	<= r_ACS_V2_BLOCK_SIZE_X[7:0];
		r_ACS_V2_BLOCK_SIZE_Y[7:0]	<= r_ACS_V2_BLOCK_SIZE_Y[7:0];
		r_ACS_V2_WHITE_TH[7:0]	<= r_ACS_V2_WHITE_TH[7:0];
	end
end

// output assign for SPA_ACS_V2_CON_REG
assign o_ACS_V2_BLOCK_SIZE_X[7:0]	= r_ACS_V2_BLOCK_SIZE_X[7:0];
assign o_ACS_V2_BLOCK_SIZE_Y[7:0]	= r_ACS_V2_BLOCK_SIZE_Y[7:0];
assign o_ACS_V2_WHITE_TH[7:0]	= r_ACS_V2_WHITE_TH[7:0];


// SPA_ACS_V2_SATURATION_TH_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_ACS_V2_SATURATION_BLOCK_TH[7:0]	<= 8`h0;
		r_ACS_V2_SATURATION_PXL_TH[7:0]	<= 8`h0;
	end
	else if (w_addr0b18_wr) begin
		r_ACS_V2_SATURATION_BLOCK_TH[7:0]	<= i_PWDATA[7:0];
		r_ACS_V2_SATURATION_PXL_TH[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_ACS_V2_SATURATION_BLOCK_TH[7:0]	<= r_ACS_V2_SATURATION_BLOCK_TH[7:0];
		r_ACS_V2_SATURATION_PXL_TH[7:0]	<= r_ACS_V2_SATURATION_PXL_TH[7:0];
	end
end

// output assign for SPA_ACS_V2_SATURATION_TH_REG
assign o_ACS_V2_SATURATION_BLOCK_TH[7:0]	= r_ACS_V2_SATURATION_BLOCK_TH[7:0];
assign o_ACS_V2_SATURATION_PXL_TH[7:0]	= r_ACS_V2_SATURATION_PXL_TH[7:0];


// SPA_ACS_V2_SATURATION_TH2_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_ACS_V2_SATURATION_TH2[14:0]	<= 15`h0;
	end
	else if (w_addr0b1c_wr) begin
		r_ACS_V2_SATURATION_TH2[14:0]	<= i_PWDATA[14:0];
	end
	else begin
		r_ACS_V2_SATURATION_TH2[14:0]	<= r_ACS_V2_SATURATION_TH2[14:0];
	end
end

// output assign for SPA_ACS_V2_SATURATION_TH2_REG
assign o_ACS_V2_SATURATION_TH2[14:0]	= r_ACS_V2_SATURATION_TH2[14:0];


// SPA_ACS_V2_HT_TH_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_ACS_V2_PUREHALFTONE_CNT[14:0]	<= 15`h0;
		r_ACS_V2_HALFTONE_CNT[14:0]	<= 15`h0;
	end
	else if (w_addr0b20_wr) begin
		r_ACS_V2_PUREHALFTONE_CNT[14:0]	<= i_PWDATA[14:0];
		r_ACS_V2_HALFTONE_CNT[14:0]	<= i_PWDATA[30:16];
	end
	else begin
		r_ACS_V2_PUREHALFTONE_CNT[14:0]	<= r_ACS_V2_PUREHALFTONE_CNT[14:0];
		r_ACS_V2_HALFTONE_CNT[14:0]	<= r_ACS_V2_HALFTONE_CNT[14:0];
	end
end

// output assign for SPA_ACS_V2_HT_TH_REG
assign o_ACS_V2_PUREHALFTONE_CNT[14:0]	= r_ACS_V2_PUREHALFTONE_CNT[14:0];
assign o_ACS_V2_HALFTONE_CNT[14:0]	= r_ACS_V2_HALFTONE_CNT[14:0];


// SPA_ACS_V2_VALUE_TH_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_ACS_V2_VALUE_BLOCK_TH[7:0]	<= 8`h0;
		r_ACS_V2_VALUE_PXL_TH[7:0]	<= 8`h0;
	end
	else if (w_addr0b24_wr) begin
		r_ACS_V2_VALUE_BLOCK_TH[7:0]	<= i_PWDATA[7:0];
		r_ACS_V2_VALUE_PXL_TH[7:0]	<= i_PWDATA[15:8];
	end
	else begin
		r_ACS_V2_VALUE_BLOCK_TH[7:0]	<= r_ACS_V2_VALUE_BLOCK_TH[7:0];
		r_ACS_V2_VALUE_PXL_TH[7:0]	<= r_ACS_V2_VALUE_PXL_TH[7:0];
	end
end

// output assign for SPA_ACS_V2_VALUE_TH_REG
assign o_ACS_V2_VALUE_BLOCK_TH[7:0]	= r_ACS_V2_VALUE_BLOCK_TH[7:0];
assign o_ACS_V2_VALUE_PXL_TH[7:0]	= r_ACS_V2_VALUE_PXL_TH[7:0];


// SPA_ACS_V2_TBLK_PAGE_REG register

// output assign for SPA_ACS_V2_TBLK_PAGE_REG
assign o_ACS_V2_TBLK_PAGE[31:0]	= 32'h0 /* add logic */ ;


// SPA_ACS_V2_TBLK_NPAGE_REG register

// output assign for SPA_ACS_V2_TBLK_NPAGE_REG
assign o_ACS_V2_TBLK_NPAGE[31:0]	= 32'h0 /* add logic */ ;


// SPA_ACS_V2_CBLK_REG register

// output assign for SPA_ACS_V2_CBLK_REG
assign o_ACS_V2_CBLK[31:0]	= 32'h0 /* add logic */ ;


// SPA_ACS_V2_SBLK_PAGE_REG register

// output assign for SPA_ACS_V2_SBLK_PAGE_REG
assign o_ACS_V2_SBLK_PAGE[31:0]	= 32'h0 /* add logic */ ;


// SPA_ACS_V2_SPXL_BLK_PAGE_REG register

// output assign for SPA_ACS_V2_SPXL_BLK_PAGE_REG
assign o_ACS_V2_SPXL_BLK_PAGE[31:0]	= 32'h0 /* add logic */ ;


// SPA_ACS_V2_SPXL_PAGE_REG register

// output assign for SPA_ACS_V2_SPXL_PAGE_REG
assign o_ACS_V2_SPXL_PAGE[31:0]	= 32'h0 /* add logic */ ;


// SPA_BLANK_CON0_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_BLANK_AUTO_EN[0:0]	<= 1`h0;
		r_BLANK_MARK_EN[0:0]	<= 1`h0;
		r_BLANK_RANGE_REAL_IMAGE[0:0]	<= 1`h0;
		r_BLANK_BLOCK_SIZE_H[7:0]	<= 8`h0;
		r_BLANK_BLOCK_SIZE_V[7:0]	<= 8`h0;
	end
	else if (w_addr0b40_wr) begin
		r_BLANK_AUTO_EN[0:0]	<= i_PWDATA[2:2];
		r_BLANK_MARK_EN[0:0]	<= i_PWDATA[3:3];
		r_BLANK_RANGE_REAL_IMAGE[0:0]	<= i_PWDATA[7:7];
		r_BLANK_BLOCK_SIZE_H[7:0]	<= i_PWDATA[15:8];
		r_BLANK_BLOCK_SIZE_V[7:0]	<= i_PWDATA[23:16];
	end
	else begin
		r_BLANK_AUTO_EN[0:0]	<= r_BLANK_AUTO_EN[0:0];
		r_BLANK_MARK_EN[0:0]	<= r_BLANK_MARK_EN[0:0];
		r_BLANK_RANGE_REAL_IMAGE[0:0]	<= r_BLANK_RANGE_REAL_IMAGE[0:0];
		r_BLANK_BLOCK_SIZE_H[7:0]	<= r_BLANK_BLOCK_SIZE_H[7:0];
		r_BLANK_BLOCK_SIZE_V[7:0]	<= r_BLANK_BLOCK_SIZE_V[7:0];
	end
end

// output assign for SPA_BLANK_CON0_REG
assign o_BLANK_AUTO_EN[0:0]	= r_BLANK_AUTO_EN[0:0];
assign o_BLANK_MARK_EN[0:0]	= r_BLANK_MARK_EN[0:0];
assign o_BLANK_RANGE_REAL_IMAGE[0:0]	= r_BLANK_RANGE_REAL_IMAGE[0:0];
assign o_BLANK_BLOCK_SIZE_H[7:0]	= r_BLANK_BLOCK_SIZE_H[7:0];
assign o_BLANK_BLOCK_SIZE_V[7:0]	= r_BLANK_BLOCK_SIZE_V[7:0];


// SPA_BLANK_CON1_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_BLANK_DARKBLK_TH[7:0]	<= 8`h0;
		r_BLANK_CONT_PCT[7:0]	<= 8`h0;
	end
	else if (w_addr0b44_wr) begin
		r_BLANK_DARKBLK_TH[7:0]	<= i_PWDATA[7:0];
		r_BLANK_CONT_PCT[7:0]	<= i_PWDATA[15:8];
	end
	else begin
		r_BLANK_DARKBLK_TH[7:0]	<= r_BLANK_DARKBLK_TH[7:0];
		r_BLANK_CONT_PCT[7:0]	<= r_BLANK_CONT_PCT[7:0];
	end
end

// output assign for SPA_BLANK_CON1_REG
assign o_BLANK_DARKBLK_TH[7:0]	= r_BLANK_DARKBLK_TH[7:0];
assign o_BLANK_CONT_PCT[7:0]	= r_BLANK_CONT_PCT[7:0];


// SPA_BLANK_MARK_POS_UPPER_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_BLANK_MARK_UPPER[16:0]	<= 17`h0;
	end
	else if (w_addr0b48_wr) begin
		r_BLANK_MARK_UPPER[16:0]	<= i_PWDATA[16:0];
	end
	else begin
		r_BLANK_MARK_UPPER[16:0]	<= r_BLANK_MARK_UPPER[16:0];
	end
end

// output assign for SPA_BLANK_MARK_POS_UPPER_REG
assign o_BLANK_MARK_UPPER[16:0]	= r_BLANK_MARK_UPPER[16:0];


// SPA_BLANK_MARK_POS_LOWER_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_BLANK_MARK_LOWER[16:0]	<= 17`h1ffff;
	end
	else if (w_addr0b4c_wr) begin
		r_BLANK_MARK_LOWER[16:0]	<= i_PWDATA[16:0];
	end
	else begin
		r_BLANK_MARK_LOWER[16:0]	<= r_BLANK_MARK_LOWER[16:0];
	end
end

// output assign for SPA_BLANK_MARK_POS_LOWER_REG
assign o_BLANK_MARK_LOWER[16:0]	= r_BLANK_MARK_LOWER[16:0];


// SPA_BLANK_MARK_POS_LEFT_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_BLANK_MARK_LEFT[16:0]	<= 17`h0;
	end
	else if (w_addr0b50_wr) begin
		r_BLANK_MARK_LEFT[16:0]	<= i_PWDATA[16:0];
	end
	else begin
		r_BLANK_MARK_LEFT[16:0]	<= r_BLANK_MARK_LEFT[16:0];
	end
end

// output assign for SPA_BLANK_MARK_POS_LEFT_REG
assign o_BLANK_MARK_LEFT[16:0]	= r_BLANK_MARK_LEFT[16:0];


// SPA_BLANK_MARK_POS_RIGHT_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_BLANK_MARK_RIGHT[16:0]	<= 17`h1ffff;
	end
	else if (w_addr0b54_wr) begin
		r_BLANK_MARK_RIGHT[16:0]	<= i_PWDATA[16:0];
	end
	else begin
		r_BLANK_MARK_RIGHT[16:0]	<= r_BLANK_MARK_RIGHT[16:0];
	end
end

// output assign for SPA_BLANK_MARK_POS_RIGHT_REG
assign o_BLANK_MARK_RIGHT[16:0]	= r_BLANK_MARK_RIGHT[16:0];


// SPA_BLANK_COLOR_BLK_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_BLANK_COLORBLOCK_CR_THU[7:0]	<= 8`h0;
		r_BLANK_COLORBLOCK_CR_THL[7:0]	<= 8`h0;
		r_BLANK_COLORBLOCK_CB_THU[7:0]	<= 8`h0;
		r_BLANK_COLORBLOCK_CB_THL[7:0]	<= 8`h0;
	end
	else if (w_addr0b58_wr) begin
		r_BLANK_COLORBLOCK_CR_THU[7:0]	<= i_PWDATA[7:0];
		r_BLANK_COLORBLOCK_CR_THL[7:0]	<= i_PWDATA[15:8];
		r_BLANK_COLORBLOCK_CB_THU[7:0]	<= i_PWDATA[23:16];
		r_BLANK_COLORBLOCK_CB_THL[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_BLANK_COLORBLOCK_CR_THU[7:0]	<= r_BLANK_COLORBLOCK_CR_THU[7:0];
		r_BLANK_COLORBLOCK_CR_THL[7:0]	<= r_BLANK_COLORBLOCK_CR_THL[7:0];
		r_BLANK_COLORBLOCK_CB_THU[7:0]	<= r_BLANK_COLORBLOCK_CB_THU[7:0];
		r_BLANK_COLORBLOCK_CB_THL[7:0]	<= r_BLANK_COLORBLOCK_CB_THL[7:0];
	end
end

// output assign for SPA_BLANK_COLOR_BLK_REG
assign o_BLANK_COLORBLOCK_CR_THU[7:0]	= r_BLANK_COLORBLOCK_CR_THU[7:0];
assign o_BLANK_COLORBLOCK_CR_THL[7:0]	= r_BLANK_COLORBLOCK_CR_THL[7:0];
assign o_BLANK_COLORBLOCK_CB_THU[7:0]	= r_BLANK_COLORBLOCK_CB_THU[7:0];
assign o_BLANK_COLORBLOCK_CB_THL[7:0]	= r_BLANK_COLORBLOCK_CB_THL[7:0];


// SPA_BLANK_TOTALBLK_REG register

// output assign for SPA_BLANK_TOTALBLK_REG
assign o_BLANK_TBLK_PAGE[31:0]	= 32'h0 /* add logic */ ;


// SPA_BLANK_CONTBLK_REG register

// output assign for SPA_BLANK_CONTBLK_REG
assign o_BLANK_CONTBLK_PAGE[31:0]	= 32'h0 /* add logic */ ;


// SPA_BLANK_BLANKBLK_REG register

// output assign for SPA_BLANK_BLANKBLK_REG
assign o_BLANK_BLACKBLK_PAGE[31:0]	= 32'h0 /* add logic */ ;


// SPA_BLANK_DARKBLK_REG register

// output assign for SPA_BLANK_DARKBLK_REG
assign o_BLANK_DARKBLK[31:0]	= 32'h0 /* add logic */ ;


// SPA_BLANK_COLORBLK_REG register

// output assign for SPA_BLANK_COLORBLK_REG
assign o_BLANK_CBLK[31:0]	= 32'h0 /* add logic */ ;


// SPA_BLANK_Y_MIN_MAX_REG register

// output assign for SPA_BLANK_Y_MIN_MAX_REG
assign o_BLANK_U_MAX[7:0]	= 8'h0 /* add logic */ ;
assign o_BLANK_Y_MIN[7:0]	= 8'h0 /* add logic */ ;


// SPA_BLANK_CB_MIN_MAX_REG register

// output assign for SPA_BLANK_CB_MIN_MAX_REG
assign o_BLANK_CB_MAX[7:0]	= 8'h0 /* add logic */ ;
assign o_BLANK_CB_MIN[7:0]	= 8'h0 /* add logic */ ;


// SPA_BLANK_CR_MIN_MAX_REG register

// output assign for SPA_BLANK_CR_MIN_MAX_REG
assign o_BLANK_CR_MAX[7:0]	= 8'h0 /* add logic */ ;
assign o_BLANK_CR_MIN[7:0]	= 8'h0 /* add logic */ ;


// SPA_RC2_OUTIMG_WIDTH_HEIGHT_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_RC2_OUTIMG_HEIGHT[7:0]	<= 8`h40;
		r_RC2_OUTIMG_WIDTH[8:0]	<= 9`h80;
	end
	else if (w_addr0b80_wr) begin
		r_RC2_OUTIMG_HEIGHT[7:0]	<= i_PWDATA[7:0];
		r_RC2_OUTIMG_WIDTH[8:0]	<= i_PWDATA[24:16];
	end
	else begin
		r_RC2_OUTIMG_HEIGHT[7:0]	<= r_RC2_OUTIMG_HEIGHT[7:0];
		r_RC2_OUTIMG_WIDTH[8:0]	<= r_RC2_OUTIMG_WIDTH[8:0];
	end
end

// output assign for SPA_RC2_OUTIMG_WIDTH_HEIGHT_REG
assign o_RC2_OUTIMG_HEIGHT[7:0]	= r_RC2_OUTIMG_HEIGHT[7:0];
assign o_RC2_OUTIMG_WIDTH[8:0]	= r_RC2_OUTIMG_WIDTH[8:0];


// SPA_RC2_OVERLAP_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_RC2_OVERLAP[5:0]	<= 6`h8;
		r_RC2_MASK_IMG_BD[0:0]	<= 1`h0;
	end
	else if (w_addr0b84_wr) begin
		r_RC2_OVERLAP[5:0]	<= i_PWDATA[5:0];
		r_RC2_MASK_IMG_BD[0:0]	<= i_PWDATA[8:8];
	end
	else begin
		r_RC2_OVERLAP[5:0]	<= r_RC2_OVERLAP[5:0];
		r_RC2_MASK_IMG_BD[0:0]	<= r_RC2_MASK_IMG_BD[0:0];
	end
end

// output assign for SPA_RC2_OVERLAP_REG
assign o_RC2_OVERLAP[5:0]	= r_RC2_OVERLAP[5:0];
assign o_RC2_MASK_IMG_BD[0:0]	= r_RC2_MASK_IMG_BD[0:0];


// SPA_RC2_FRAC_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_RC2_H_FRAC[11:0]	<= 12`h0;
		r_RC2_V_FRAC[11:0]	<= 12`h0;
	end
	else if (w_addr0b88_wr) begin
		r_RC2_H_FRAC[11:0]	<= i_PWDATA[11:0];
		r_RC2_V_FRAC[11:0]	<= i_PWDATA[27:16];
	end
	else begin
		r_RC2_H_FRAC[11:0]	<= r_RC2_H_FRAC[11:0];
		r_RC2_V_FRAC[11:0]	<= r_RC2_V_FRAC[11:0];
	end
end

// output assign for SPA_RC2_FRAC_REG
assign o_RC2_H_FRAC[11:0]	= r_RC2_H_FRAC[11:0];
assign o_RC2_V_FRAC[11:0]	= r_RC2_V_FRAC[11:0];


// SPA_BDS_CON_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_MIRROR[0:0]	<= 1`h0;
		r_EDGE_TH[7:0]	<= 8`hA;
	end
	else if (w_addr0bc0_wr) begin
		r_MIRROR[0:0]	<= i_PWDATA[0:0];
		r_EDGE_TH[7:0]	<= i_PWDATA[23:16];
	end
	else begin
		r_MIRROR[0:0]	<= r_MIRROR[0:0];
		r_EDGE_TH[7:0]	<= r_EDGE_TH[7:0];
	end
end

// output assign for SPA_BDS_CON_REG
assign o_MIRROR[0:0]	= r_MIRROR[0:0];
assign o_EDGE_TH[7:0]	= r_EDGE_TH[7:0];


// SPA_BDS_EDGE1_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_EDGE_Y_LOW[7:0]	<= 8`h50;
		r_EDGE_Y_HIGH[7:0]	<= 8`hD2;
		r_EDGE_CNT_TH[7:0]	<= 8`h6;
	end
	else if (w_addr0bc4_wr) begin
		r_EDGE_Y_LOW[7:0]	<= i_PWDATA[7:0];
		r_EDGE_Y_HIGH[7:0]	<= i_PWDATA[15:8];
		r_EDGE_CNT_TH[7:0]	<= i_PWDATA[23:16];
	end
	else begin
		r_EDGE_Y_LOW[7:0]	<= r_EDGE_Y_LOW[7:0];
		r_EDGE_Y_HIGH[7:0]	<= r_EDGE_Y_HIGH[7:0];
		r_EDGE_CNT_TH[7:0]	<= r_EDGE_CNT_TH[7:0];
	end
end

// output assign for SPA_BDS_EDGE1_REG
assign o_EDGE_Y_LOW[7:0]	= r_EDGE_Y_LOW[7:0];
assign o_EDGE_Y_HIGH[7:0]	= r_EDGE_Y_HIGH[7:0];
assign o_EDGE_CNT_TH[7:0]	= r_EDGE_CNT_TH[7:0];


// SPA_BDS_EDGE2_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_EDGE_CR_LOW[7:0]	<= 8`h50;
		r_EDGE_CR_HIGH[7:0]	<= 8`hD2;
		r_EDGE_CB_LOW[7:0]	<= 8`h0A;
		r_EDGE_CB_HIGH[7:0]	<= 8`h8C;
	end
	else if (w_addr0bc8_wr) begin
		r_EDGE_CR_LOW[7:0]	<= i_PWDATA[7:0];
		r_EDGE_CR_HIGH[7:0]	<= i_PWDATA[15:8];
		r_EDGE_CB_LOW[7:0]	<= i_PWDATA[23:16];
		r_EDGE_CB_HIGH[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_EDGE_CR_LOW[7:0]	<= r_EDGE_CR_LOW[7:0];
		r_EDGE_CR_HIGH[7:0]	<= r_EDGE_CR_HIGH[7:0];
		r_EDGE_CB_LOW[7:0]	<= r_EDGE_CB_LOW[7:0];
		r_EDGE_CB_HIGH[7:0]	<= r_EDGE_CB_HIGH[7:0];
	end
end

// output assign for SPA_BDS_EDGE2_REG
assign o_EDGE_CR_LOW[7:0]	= r_EDGE_CR_LOW[7:0];
assign o_EDGE_CR_HIGH[7:0]	= r_EDGE_CR_HIGH[7:0];
assign o_EDGE_CB_LOW[7:0]	= r_EDGE_CB_LOW[7:0];
assign o_EDGE_CB_HIGH[7:0]	= r_EDGE_CB_HIGH[7:0];


// SPA_BDS_EURION1_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_EURion_Y_LOW[7:0]	<= 8`h50;
		r_EURion_Y_HIGH[7:0]	<= 8`hD2;
	end
	else if (w_addr0bcc_wr) begin
		r_EURion_Y_LOW[7:0]	<= i_PWDATA[7:0];
		r_EURion_Y_HIGH[7:0]	<= i_PWDATA[15:8];
	end
	else begin
		r_EURion_Y_LOW[7:0]	<= r_EURion_Y_LOW[7:0];
		r_EURion_Y_HIGH[7:0]	<= r_EURion_Y_HIGH[7:0];
	end
end

// output assign for SPA_BDS_EURION1_REG
assign o_EURion_Y_LOW[7:0]	= r_EURion_Y_LOW[7:0];
assign o_EURion_Y_HIGH[7:0]	= r_EURion_Y_HIGH[7:0];


// SPA_BDS_EURION2_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_EURion_CR_LOW[7:0]	<= 8`h50;
		r_EURion_CR_HIGH[7:0]	<= 8`hD2;
		r_EURion_CB_LOW[7:0]	<= 8`h0A;
		r_EURion_CB_HIGH[7:0]	<= 8`h8C;
	end
	else if (w_addr0bd0_wr) begin
		r_EURion_CR_LOW[7:0]	<= i_PWDATA[7:0];
		r_EURion_CR_HIGH[7:0]	<= i_PWDATA[15:8];
		r_EURion_CB_LOW[7:0]	<= i_PWDATA[23:16];
		r_EURion_CB_HIGH[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_EURion_CR_LOW[7:0]	<= r_EURion_CR_LOW[7:0];
		r_EURion_CR_HIGH[7:0]	<= r_EURion_CR_HIGH[7:0];
		r_EURion_CB_LOW[7:0]	<= r_EURion_CB_LOW[7:0];
		r_EURion_CB_HIGH[7:0]	<= r_EURion_CB_HIGH[7:0];
	end
end

// output assign for SPA_BDS_EURION2_REG
assign o_EURion_CR_LOW[7:0]	= r_EURion_CR_LOW[7:0];
assign o_EURion_CR_HIGH[7:0]	= r_EURion_CR_HIGH[7:0];
assign o_EURion_CB_LOW[7:0]	= r_EURion_CB_LOW[7:0];
assign o_EURion_CB_HIGH[7:0]	= r_EURion_CB_HIGH[7:0];


// SPA_BDS_OFFSET_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_OFFSET_BOTTOM[7:0]	<= 8`h0A;
		r_OFFSET_TOP[7:0]	<= 8`h0A;
		r_OFFSET_RIGHT[7:0]	<= 8`h0A;
		r_OFFSET_LEFT[7:0]	<= 8`h19;
	end
	else if (w_addr0bd4_wr) begin
		r_OFFSET_BOTTOM[7:0]	<= i_PWDATA[7:0];
		r_OFFSET_TOP[7:0]	<= i_PWDATA[15:8];
		r_OFFSET_RIGHT[7:0]	<= i_PWDATA[23:16];
		r_OFFSET_LEFT[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_OFFSET_BOTTOM[7:0]	<= r_OFFSET_BOTTOM[7:0];
		r_OFFSET_TOP[7:0]	<= r_OFFSET_TOP[7:0];
		r_OFFSET_RIGHT[7:0]	<= r_OFFSET_RIGHT[7:0];
		r_OFFSET_LEFT[7:0]	<= r_OFFSET_LEFT[7:0];
	end
end

// output assign for SPA_BDS_OFFSET_REG
assign o_OFFSET_BOTTOM[7:0]	= r_OFFSET_BOTTOM[7:0];
assign o_OFFSET_TOP[7:0]	= r_OFFSET_TOP[7:0];
assign o_OFFSET_RIGHT[7:0]	= r_OFFSET_RIGHT[7:0];
assign o_OFFSET_LEFT[7:0]	= r_OFFSET_LEFT[7:0];


// SPA_BDS_CONTENTS_REG register

// output assign for SPA_BDS_CONTENTS_REG
assign o_CONTENS_END[15:0]	= 16'h0 /* add logic */ ;
assign o_CONTENS_START[15:0]	= 16'h0 /* add logic */ ;


// SPA_SMAP_PARAM_B_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_SMAP_G_Range2[7:0]	<= 8`hFF;
		r_SMAP_G_Range1[7:0]	<= 8`hFA;
		r_SMAP_R_Range2[7:0]	<= 8`hFF;
		r_SMAP_R_Range1[7:0]	<= 8`hFA;
	end
	else if (w_addr0c84_wr) begin
		r_SMAP_G_Range2[7:0]	<= i_PWDATA[7:0];
		r_SMAP_G_Range1[7:0]	<= i_PWDATA[15:8];
		r_SMAP_R_Range2[7:0]	<= i_PWDATA[23:16];
		r_SMAP_R_Range1[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_SMAP_G_Range2[7:0]	<= r_SMAP_G_Range2[7:0];
		r_SMAP_G_Range1[7:0]	<= r_SMAP_G_Range1[7:0];
		r_SMAP_R_Range2[7:0]	<= r_SMAP_R_Range2[7:0];
		r_SMAP_R_Range1[7:0]	<= r_SMAP_R_Range1[7:0];
	end
end

// output assign for SPA_SMAP_PARAM_B_REG
assign o_SMAP_G_Range2[7:0]	= r_SMAP_G_Range2[7:0];
assign o_SMAP_G_Range1[7:0]	= r_SMAP_G_Range1[7:0];
assign o_SMAP_R_Range2[7:0]	= r_SMAP_R_Range2[7:0];
assign o_SMAP_R_Range1[7:0]	= r_SMAP_R_Range1[7:0];


// SPA_SMAP_PARAM_C_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_SMAP_Refine_Enable[0:0]	<= 1`h0;
		r_SMAP_BinTH3[3:0]	<= 4`h6;
		r_SMAP_BinTH2[3:0]	<= 4`h4;
		r_SMAP_BinTH1[3:0]	<= 4`h2;
		r_SMAP_B_Range2[7:0]	<= 8`hFA;
		r_SMAP_B_Range1[7:0]	<= 8`h0;
	end
	else if (w_addr0c88_wr) begin
		r_SMAP_Refine_Enable[0:0]	<= i_PWDATA[0:0];
		r_SMAP_BinTH3[3:0]	<= i_PWDATA[7:4];
		r_SMAP_BinTH2[3:0]	<= i_PWDATA[11:8];
		r_SMAP_BinTH1[3:0]	<= i_PWDATA[15:12];
		r_SMAP_B_Range2[7:0]	<= i_PWDATA[23:16];
		r_SMAP_B_Range1[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_SMAP_Refine_Enable[0:0]	<= r_SMAP_Refine_Enable[0:0];
		r_SMAP_BinTH3[3:0]	<= r_SMAP_BinTH3[3:0];
		r_SMAP_BinTH2[3:0]	<= r_SMAP_BinTH2[3:0];
		r_SMAP_BinTH1[3:0]	<= r_SMAP_BinTH1[3:0];
		r_SMAP_B_Range2[7:0]	<= r_SMAP_B_Range2[7:0];
		r_SMAP_B_Range1[7:0]	<= r_SMAP_B_Range1[7:0];
	end
end

// output assign for SPA_SMAP_PARAM_C_REG
assign o_SMAP_Refine_Enable[0:0]	= r_SMAP_Refine_Enable[0:0];
assign o_SMAP_BinTH3[3:0]	= r_SMAP_BinTH3[3:0];
assign o_SMAP_BinTH2[3:0]	= r_SMAP_BinTH2[3:0];
assign o_SMAP_BinTH1[3:0]	= r_SMAP_BinTH1[3:0];
assign o_SMAP_B_Range2[7:0]	= r_SMAP_B_Range2[7:0];
assign o_SMAP_B_Range1[7:0]	= r_SMAP_B_Range1[7:0];


// SPA_SMAP_ADAPT_CON_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_SMAP_ADAPT_EN[0:0]	<= 1`h0;
		r_SMAP_ADAPT_AVGDIV[5:0]	<= 6`h8;
	end
	else if (w_addr0c8c_wr) begin
		r_SMAP_ADAPT_EN[0:0]	<= i_PWDATA[0:0];
		r_SMAP_ADAPT_AVGDIV[5:0]	<= i_PWDATA[9:4];
	end
	else begin
		r_SMAP_ADAPT_EN[0:0]	<= r_SMAP_ADAPT_EN[0:0];
		r_SMAP_ADAPT_AVGDIV[5:0]	<= r_SMAP_ADAPT_AVGDIV[5:0];
	end
end

// output assign for SPA_SMAP_ADAPT_CON_REG
assign o_SMAP_ADAPT_EN[0:0]	= r_SMAP_ADAPT_EN[0:0];
assign o_SMAP_ADAPT_AVGDIV[5:0]	= r_SMAP_ADAPT_AVGDIV[5:0];


// SPA_SMAP_ADAPT_R_MAX0_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_SMAP_ADAPT_R_MAX00[7:0]	<= 8`h0;
		r_SMAP_ADAPT_R_MAX01[7:0]	<= 8`h8;
		r_SMAP_ADAPT_R_MAX02[7:0]	<= 8`h10;
		r_SMAP_ADAPT_R_MAX03[7:0]	<= 8`h18;
	end
	else if (w_addr0c90_wr) begin
		r_SMAP_ADAPT_R_MAX00[7:0]	<= i_PWDATA[7:0];
		r_SMAP_ADAPT_R_MAX01[7:0]	<= i_PWDATA[15:8];
		r_SMAP_ADAPT_R_MAX02[7:0]	<= i_PWDATA[23:16];
		r_SMAP_ADAPT_R_MAX03[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_SMAP_ADAPT_R_MAX00[7:0]	<= r_SMAP_ADAPT_R_MAX00[7:0];
		r_SMAP_ADAPT_R_MAX01[7:0]	<= r_SMAP_ADAPT_R_MAX01[7:0];
		r_SMAP_ADAPT_R_MAX02[7:0]	<= r_SMAP_ADAPT_R_MAX02[7:0];
		r_SMAP_ADAPT_R_MAX03[7:0]	<= r_SMAP_ADAPT_R_MAX03[7:0];
	end
end

// output assign for SPA_SMAP_ADAPT_R_MAX0_REG
assign o_SMAP_ADAPT_R_MAX00[7:0]	= r_SMAP_ADAPT_R_MAX00[7:0];
assign o_SMAP_ADAPT_R_MAX01[7:0]	= r_SMAP_ADAPT_R_MAX01[7:0];
assign o_SMAP_ADAPT_R_MAX02[7:0]	= r_SMAP_ADAPT_R_MAX02[7:0];
assign o_SMAP_ADAPT_R_MAX03[7:0]	= r_SMAP_ADAPT_R_MAX03[7:0];


// SPA_SMAP_ADAPT_R_MAX1_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_SMAP_ADAPT_R_MAX10[7:0]	<= 8`h1E;
		r_SMAP_ADAPT_R_MAX11[7:0]	<= 8`h23;
		r_SMAP_ADAPT_R_MAX12[7:0]	<= 8`h23;
		r_SMAP_ADAPT_R_MAX13[7:0]	<= 8`h28;
	end
	else if (w_addr0c94_wr) begin
		r_SMAP_ADAPT_R_MAX10[7:0]	<= i_PWDATA[7:0];
		r_SMAP_ADAPT_R_MAX11[7:0]	<= i_PWDATA[15:8];
		r_SMAP_ADAPT_R_MAX12[7:0]	<= i_PWDATA[23:16];
		r_SMAP_ADAPT_R_MAX13[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_SMAP_ADAPT_R_MAX10[7:0]	<= r_SMAP_ADAPT_R_MAX10[7:0];
		r_SMAP_ADAPT_R_MAX11[7:0]	<= r_SMAP_ADAPT_R_MAX11[7:0];
		r_SMAP_ADAPT_R_MAX12[7:0]	<= r_SMAP_ADAPT_R_MAX12[7:0];
		r_SMAP_ADAPT_R_MAX13[7:0]	<= r_SMAP_ADAPT_R_MAX13[7:0];
	end
end

// output assign for SPA_SMAP_ADAPT_R_MAX1_REG
assign o_SMAP_ADAPT_R_MAX10[7:0]	= r_SMAP_ADAPT_R_MAX10[7:0];
assign o_SMAP_ADAPT_R_MAX11[7:0]	= r_SMAP_ADAPT_R_MAX11[7:0];
assign o_SMAP_ADAPT_R_MAX12[7:0]	= r_SMAP_ADAPT_R_MAX12[7:0];
assign o_SMAP_ADAPT_R_MAX13[7:0]	= r_SMAP_ADAPT_R_MAX13[7:0];


// SPA_SMAP_ADAPT_R_MAX2_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_SMAP_ADAPT_R_MAX20[7:0]	<= 8`h28;
		r_SMAP_ADAPT_R_MAX21[7:0]	<= 8`h2D;
		r_SMAP_ADAPT_R_MAX22[7:0]	<= 8`h32;
		r_SMAP_ADAPT_R_MAX23[7:0]	<= 8`h37;
	end
	else if (w_addr0c98_wr) begin
		r_SMAP_ADAPT_R_MAX20[7:0]	<= i_PWDATA[7:0];
		r_SMAP_ADAPT_R_MAX21[7:0]	<= i_PWDATA[15:8];
		r_SMAP_ADAPT_R_MAX22[7:0]	<= i_PWDATA[23:16];
		r_SMAP_ADAPT_R_MAX23[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_SMAP_ADAPT_R_MAX20[7:0]	<= r_SMAP_ADAPT_R_MAX20[7:0];
		r_SMAP_ADAPT_R_MAX21[7:0]	<= r_SMAP_ADAPT_R_MAX21[7:0];
		r_SMAP_ADAPT_R_MAX22[7:0]	<= r_SMAP_ADAPT_R_MAX22[7:0];
		r_SMAP_ADAPT_R_MAX23[7:0]	<= r_SMAP_ADAPT_R_MAX23[7:0];
	end
end

// output assign for SPA_SMAP_ADAPT_R_MAX2_REG
assign o_SMAP_ADAPT_R_MAX20[7:0]	= r_SMAP_ADAPT_R_MAX20[7:0];
assign o_SMAP_ADAPT_R_MAX21[7:0]	= r_SMAP_ADAPT_R_MAX21[7:0];
assign o_SMAP_ADAPT_R_MAX22[7:0]	= r_SMAP_ADAPT_R_MAX22[7:0];
assign o_SMAP_ADAPT_R_MAX23[7:0]	= r_SMAP_ADAPT_R_MAX23[7:0];


// SPA_SMAP_ADAPT_R_MAX3_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_SMAP_ADAPT_R_MAX30[7:0]	<= 8`h41;
		r_SMAP_ADAPT_R_MAX31[7:0]	<= 8`h46;
		r_SMAP_ADAPT_R_MAX32[7:0]	<= 8`h4B;
		r_SMAP_ADAPT_R_MAX33[7:0]	<= 8`h50;
	end
	else if (w_addr0c9c_wr) begin
		r_SMAP_ADAPT_R_MAX30[7:0]	<= i_PWDATA[7:0];
		r_SMAP_ADAPT_R_MAX31[7:0]	<= i_PWDATA[15:8];
		r_SMAP_ADAPT_R_MAX32[7:0]	<= i_PWDATA[23:16];
		r_SMAP_ADAPT_R_MAX33[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_SMAP_ADAPT_R_MAX30[7:0]	<= r_SMAP_ADAPT_R_MAX30[7:0];
		r_SMAP_ADAPT_R_MAX31[7:0]	<= r_SMAP_ADAPT_R_MAX31[7:0];
		r_SMAP_ADAPT_R_MAX32[7:0]	<= r_SMAP_ADAPT_R_MAX32[7:0];
		r_SMAP_ADAPT_R_MAX33[7:0]	<= r_SMAP_ADAPT_R_MAX33[7:0];
	end
end

// output assign for SPA_SMAP_ADAPT_R_MAX3_REG
assign o_SMAP_ADAPT_R_MAX30[7:0]	= r_SMAP_ADAPT_R_MAX30[7:0];
assign o_SMAP_ADAPT_R_MAX31[7:0]	= r_SMAP_ADAPT_R_MAX31[7:0];
assign o_SMAP_ADAPT_R_MAX32[7:0]	= r_SMAP_ADAPT_R_MAX32[7:0];
assign o_SMAP_ADAPT_R_MAX33[7:0]	= r_SMAP_ADAPT_R_MAX33[7:0];


// SPA_SMAP_ADAPT_R_MAX4_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_SMAP_ADAPT_R_MAX40[7:0]	<= 8`h50;
		r_SMAP_ADAPT_R_MAX41[7:0]	<= 8`h55;
		r_SMAP_ADAPT_R_MAX42[7:0]	<= 8`h5A;
		r_SMAP_ADAPT_R_MAX43[7:0]	<= 8`h5A;
	end
	else if (w_addr0ca0_wr) begin
		r_SMAP_ADAPT_R_MAX40[7:0]	<= i_PWDATA[7:0];
		r_SMAP_ADAPT_R_MAX41[7:0]	<= i_PWDATA[15:8];
		r_SMAP_ADAPT_R_MAX42[7:0]	<= i_PWDATA[23:16];
		r_SMAP_ADAPT_R_MAX43[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_SMAP_ADAPT_R_MAX40[7:0]	<= r_SMAP_ADAPT_R_MAX40[7:0];
		r_SMAP_ADAPT_R_MAX41[7:0]	<= r_SMAP_ADAPT_R_MAX41[7:0];
		r_SMAP_ADAPT_R_MAX42[7:0]	<= r_SMAP_ADAPT_R_MAX42[7:0];
		r_SMAP_ADAPT_R_MAX43[7:0]	<= r_SMAP_ADAPT_R_MAX43[7:0];
	end
end

// output assign for SPA_SMAP_ADAPT_R_MAX4_REG
assign o_SMAP_ADAPT_R_MAX40[7:0]	= r_SMAP_ADAPT_R_MAX40[7:0];
assign o_SMAP_ADAPT_R_MAX41[7:0]	= r_SMAP_ADAPT_R_MAX41[7:0];
assign o_SMAP_ADAPT_R_MAX42[7:0]	= r_SMAP_ADAPT_R_MAX42[7:0];
assign o_SMAP_ADAPT_R_MAX43[7:0]	= r_SMAP_ADAPT_R_MAX43[7:0];


// SPA_SMAP_ADAPT_R_MAX5_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_SMAP_ADAPT_R_MAX50[7:0]	<= 8`h64;
		r_SMAP_ADAPT_R_MAX51[7:0]	<= 8`h64;
		r_SMAP_ADAPT_R_MAX52[7:0]	<= 8`h64;
		r_SMAP_ADAPT_R_MAX53[7:0]	<= 8`h6E;
	end
	else if (w_addr0ca4_wr) begin
		r_SMAP_ADAPT_R_MAX50[7:0]	<= i_PWDATA[7:0];
		r_SMAP_ADAPT_R_MAX51[7:0]	<= i_PWDATA[15:8];
		r_SMAP_ADAPT_R_MAX52[7:0]	<= i_PWDATA[23:16];
		r_SMAP_ADAPT_R_MAX53[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_SMAP_ADAPT_R_MAX50[7:0]	<= r_SMAP_ADAPT_R_MAX50[7:0];
		r_SMAP_ADAPT_R_MAX51[7:0]	<= r_SMAP_ADAPT_R_MAX51[7:0];
		r_SMAP_ADAPT_R_MAX52[7:0]	<= r_SMAP_ADAPT_R_MAX52[7:0];
		r_SMAP_ADAPT_R_MAX53[7:0]	<= r_SMAP_ADAPT_R_MAX53[7:0];
	end
end

// output assign for SPA_SMAP_ADAPT_R_MAX5_REG
assign o_SMAP_ADAPT_R_MAX50[7:0]	= r_SMAP_ADAPT_R_MAX50[7:0];
assign o_SMAP_ADAPT_R_MAX51[7:0]	= r_SMAP_ADAPT_R_MAX51[7:0];
assign o_SMAP_ADAPT_R_MAX52[7:0]	= r_SMAP_ADAPT_R_MAX52[7:0];
assign o_SMAP_ADAPT_R_MAX53[7:0]	= r_SMAP_ADAPT_R_MAX53[7:0];


// SPA_SMAP_ADAPT_R_MAX6_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_SMAP_ADAPT_R_MAX60[7:0]	<= 8`h6E;
		r_SMAP_ADAPT_R_MAX61[7:0]	<= 8`h78;
		r_SMAP_ADAPT_R_MAX62[7:0]	<= 8`h78;
		r_SMAP_ADAPT_R_MAX63[7:0]	<= 8`h82;
	end
	else if (w_addr0ca8_wr) begin
		r_SMAP_ADAPT_R_MAX60[7:0]	<= i_PWDATA[7:0];
		r_SMAP_ADAPT_R_MAX61[7:0]	<= i_PWDATA[15:8];
		r_SMAP_ADAPT_R_MAX62[7:0]	<= i_PWDATA[23:16];
		r_SMAP_ADAPT_R_MAX63[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_SMAP_ADAPT_R_MAX60[7:0]	<= r_SMAP_ADAPT_R_MAX60[7:0];
		r_SMAP_ADAPT_R_MAX61[7:0]	<= r_SMAP_ADAPT_R_MAX61[7:0];
		r_SMAP_ADAPT_R_MAX62[7:0]	<= r_SMAP_ADAPT_R_MAX62[7:0];
		r_SMAP_ADAPT_R_MAX63[7:0]	<= r_SMAP_ADAPT_R_MAX63[7:0];
	end
end

// output assign for SPA_SMAP_ADAPT_R_MAX6_REG
assign o_SMAP_ADAPT_R_MAX60[7:0]	= r_SMAP_ADAPT_R_MAX60[7:0];
assign o_SMAP_ADAPT_R_MAX61[7:0]	= r_SMAP_ADAPT_R_MAX61[7:0];
assign o_SMAP_ADAPT_R_MAX62[7:0]	= r_SMAP_ADAPT_R_MAX62[7:0];
assign o_SMAP_ADAPT_R_MAX63[7:0]	= r_SMAP_ADAPT_R_MAX63[7:0];


// SPA_SMAP_ADAPT_R_MAX7_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_SMAP_ADAPT_R_MAX70[7:0]	<= 8`h8C;
		r_SMAP_ADAPT_R_MAX71[7:0]	<= 8`h8C;
		r_SMAP_ADAPT_R_MAX72[7:0]	<= 8`h8C;
		r_SMAP_ADAPT_R_MAX73[7:0]	<= 8`h8C;
	end
	else if (w_addr0cac_wr) begin
		r_SMAP_ADAPT_R_MAX70[7:0]	<= i_PWDATA[7:0];
		r_SMAP_ADAPT_R_MAX71[7:0]	<= i_PWDATA[15:8];
		r_SMAP_ADAPT_R_MAX72[7:0]	<= i_PWDATA[23:16];
		r_SMAP_ADAPT_R_MAX73[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_SMAP_ADAPT_R_MAX70[7:0]	<= r_SMAP_ADAPT_R_MAX70[7:0];
		r_SMAP_ADAPT_R_MAX71[7:0]	<= r_SMAP_ADAPT_R_MAX71[7:0];
		r_SMAP_ADAPT_R_MAX72[7:0]	<= r_SMAP_ADAPT_R_MAX72[7:0];
		r_SMAP_ADAPT_R_MAX73[7:0]	<= r_SMAP_ADAPT_R_MAX73[7:0];
	end
end

// output assign for SPA_SMAP_ADAPT_R_MAX7_REG
assign o_SMAP_ADAPT_R_MAX70[7:0]	= r_SMAP_ADAPT_R_MAX70[7:0];
assign o_SMAP_ADAPT_R_MAX71[7:0]	= r_SMAP_ADAPT_R_MAX71[7:0];
assign o_SMAP_ADAPT_R_MAX72[7:0]	= r_SMAP_ADAPT_R_MAX72[7:0];
assign o_SMAP_ADAPT_R_MAX73[7:0]	= r_SMAP_ADAPT_R_MAX73[7:0];


// SPA_SMAP_ADAPT_R_MIN0_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_SMAP_ADAPT_R_MIN00[7:0]	<= 8`h0;
		r_SMAP_ADAPT_R_MIN01[7:0]	<= 8`h0;
		r_SMAP_ADAPT_R_MIN02[7:0]	<= 8`h0;
		r_SMAP_ADAPT_R_MIN03[7:0]	<= 8`h0;
	end
	else if (w_addr0cb0_wr) begin
		r_SMAP_ADAPT_R_MIN00[7:0]	<= i_PWDATA[7:0];
		r_SMAP_ADAPT_R_MIN01[7:0]	<= i_PWDATA[15:8];
		r_SMAP_ADAPT_R_MIN02[7:0]	<= i_PWDATA[23:16];
		r_SMAP_ADAPT_R_MIN03[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_SMAP_ADAPT_R_MIN00[7:0]	<= r_SMAP_ADAPT_R_MIN00[7:0];
		r_SMAP_ADAPT_R_MIN01[7:0]	<= r_SMAP_ADAPT_R_MIN01[7:0];
		r_SMAP_ADAPT_R_MIN02[7:0]	<= r_SMAP_ADAPT_R_MIN02[7:0];
		r_SMAP_ADAPT_R_MIN03[7:0]	<= r_SMAP_ADAPT_R_MIN03[7:0];
	end
end

// output assign for SPA_SMAP_ADAPT_R_MIN0_REG
assign o_SMAP_ADAPT_R_MIN00[7:0]	= r_SMAP_ADAPT_R_MIN00[7:0];
assign o_SMAP_ADAPT_R_MIN01[7:0]	= r_SMAP_ADAPT_R_MIN01[7:0];
assign o_SMAP_ADAPT_R_MIN02[7:0]	= r_SMAP_ADAPT_R_MIN02[7:0];
assign o_SMAP_ADAPT_R_MIN03[7:0]	= r_SMAP_ADAPT_R_MIN03[7:0];


// SPA_SMAP_ADAPT_R_MIN1_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_SMAP_ADAPT_R_MIN10[7:0]	<= 8`h0;
		r_SMAP_ADAPT_R_MIN11[7:0]	<= 8`h0;
		r_SMAP_ADAPT_R_MIN12[7:0]	<= 8`h0;
		r_SMAP_ADAPT_R_MIN13[7:0]	<= 8`h0;
	end
	else if (w_addr0cb4_wr) begin
		r_SMAP_ADAPT_R_MIN10[7:0]	<= i_PWDATA[7:0];
		r_SMAP_ADAPT_R_MIN11[7:0]	<= i_PWDATA[15:8];
		r_SMAP_ADAPT_R_MIN12[7:0]	<= i_PWDATA[23:16];
		r_SMAP_ADAPT_R_MIN13[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_SMAP_ADAPT_R_MIN10[7:0]	<= r_SMAP_ADAPT_R_MIN10[7:0];
		r_SMAP_ADAPT_R_MIN11[7:0]	<= r_SMAP_ADAPT_R_MIN11[7:0];
		r_SMAP_ADAPT_R_MIN12[7:0]	<= r_SMAP_ADAPT_R_MIN12[7:0];
		r_SMAP_ADAPT_R_MIN13[7:0]	<= r_SMAP_ADAPT_R_MIN13[7:0];
	end
end

// output assign for SPA_SMAP_ADAPT_R_MIN1_REG
assign o_SMAP_ADAPT_R_MIN10[7:0]	= r_SMAP_ADAPT_R_MIN10[7:0];
assign o_SMAP_ADAPT_R_MIN11[7:0]	= r_SMAP_ADAPT_R_MIN11[7:0];
assign o_SMAP_ADAPT_R_MIN12[7:0]	= r_SMAP_ADAPT_R_MIN12[7:0];
assign o_SMAP_ADAPT_R_MIN13[7:0]	= r_SMAP_ADAPT_R_MIN13[7:0];


// SPA_SMAP_ADAPT_R_MIN2_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_SMAP_ADAPT_R_MIN20[7:0]	<= 8`h0;
		r_SMAP_ADAPT_R_MIN21[7:0]	<= 8`h0;
		r_SMAP_ADAPT_R_MIN22[7:0]	<= 8`h0;
		r_SMAP_ADAPT_R_MIN23[7:0]	<= 8`h0;
	end
	else if (w_addr0cb8_wr) begin
		r_SMAP_ADAPT_R_MIN20[7:0]	<= i_PWDATA[7:0];
		r_SMAP_ADAPT_R_MIN21[7:0]	<= i_PWDATA[15:8];
		r_SMAP_ADAPT_R_MIN22[7:0]	<= i_PWDATA[23:16];
		r_SMAP_ADAPT_R_MIN23[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_SMAP_ADAPT_R_MIN20[7:0]	<= r_SMAP_ADAPT_R_MIN20[7:0];
		r_SMAP_ADAPT_R_MIN21[7:0]	<= r_SMAP_ADAPT_R_MIN21[7:0];
		r_SMAP_ADAPT_R_MIN22[7:0]	<= r_SMAP_ADAPT_R_MIN22[7:0];
		r_SMAP_ADAPT_R_MIN23[7:0]	<= r_SMAP_ADAPT_R_MIN23[7:0];
	end
end

// output assign for SPA_SMAP_ADAPT_R_MIN2_REG
assign o_SMAP_ADAPT_R_MIN20[7:0]	= r_SMAP_ADAPT_R_MIN20[7:0];
assign o_SMAP_ADAPT_R_MIN21[7:0]	= r_SMAP_ADAPT_R_MIN21[7:0];
assign o_SMAP_ADAPT_R_MIN22[7:0]	= r_SMAP_ADAPT_R_MIN22[7:0];
assign o_SMAP_ADAPT_R_MIN23[7:0]	= r_SMAP_ADAPT_R_MIN23[7:0];


// SPA_SMAP_ADAPT_R_MIN3_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_SMAP_ADAPT_R_MIN30[7:0]	<= 8`h0;
		r_SMAP_ADAPT_R_MIN31[7:0]	<= 8`h0;
		r_SMAP_ADAPT_R_MIN32[7:0]	<= 8`h0;
		r_SMAP_ADAPT_R_MIN33[7:0]	<= 8`h0;
	end
	else if (w_addr0cbc_wr) begin
		r_SMAP_ADAPT_R_MIN30[7:0]	<= i_PWDATA[7:0];
		r_SMAP_ADAPT_R_MIN31[7:0]	<= i_PWDATA[15:8];
		r_SMAP_ADAPT_R_MIN32[7:0]	<= i_PWDATA[23:16];
		r_SMAP_ADAPT_R_MIN33[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_SMAP_ADAPT_R_MIN30[7:0]	<= r_SMAP_ADAPT_R_MIN30[7:0];
		r_SMAP_ADAPT_R_MIN31[7:0]	<= r_SMAP_ADAPT_R_MIN31[7:0];
		r_SMAP_ADAPT_R_MIN32[7:0]	<= r_SMAP_ADAPT_R_MIN32[7:0];
		r_SMAP_ADAPT_R_MIN33[7:0]	<= r_SMAP_ADAPT_R_MIN33[7:0];
	end
end

// output assign for SPA_SMAP_ADAPT_R_MIN3_REG
assign o_SMAP_ADAPT_R_MIN30[7:0]	= r_SMAP_ADAPT_R_MIN30[7:0];
assign o_SMAP_ADAPT_R_MIN31[7:0]	= r_SMAP_ADAPT_R_MIN31[7:0];
assign o_SMAP_ADAPT_R_MIN32[7:0]	= r_SMAP_ADAPT_R_MIN32[7:0];
assign o_SMAP_ADAPT_R_MIN33[7:0]	= r_SMAP_ADAPT_R_MIN33[7:0];


// SPA_SMAP_ADAPT_R_MIN4_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_SMAP_ADAPT_R_MIN40[7:0]	<= 8`h0;
		r_SMAP_ADAPT_R_MIN41[7:0]	<= 8`h0;
		r_SMAP_ADAPT_R_MIN42[7:0]	<= 8`h0;
		r_SMAP_ADAPT_R_MIN43[7:0]	<= 8`h0;
	end
	else if (w_addr0cc0_wr) begin
		r_SMAP_ADAPT_R_MIN40[7:0]	<= i_PWDATA[7:0];
		r_SMAP_ADAPT_R_MIN41[7:0]	<= i_PWDATA[15:8];
		r_SMAP_ADAPT_R_MIN42[7:0]	<= i_PWDATA[23:16];
		r_SMAP_ADAPT_R_MIN43[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_SMAP_ADAPT_R_MIN40[7:0]	<= r_SMAP_ADAPT_R_MIN40[7:0];
		r_SMAP_ADAPT_R_MIN41[7:0]	<= r_SMAP_ADAPT_R_MIN41[7:0];
		r_SMAP_ADAPT_R_MIN42[7:0]	<= r_SMAP_ADAPT_R_MIN42[7:0];
		r_SMAP_ADAPT_R_MIN43[7:0]	<= r_SMAP_ADAPT_R_MIN43[7:0];
	end
end

// output assign for SPA_SMAP_ADAPT_R_MIN4_REG
assign o_SMAP_ADAPT_R_MIN40[7:0]	= r_SMAP_ADAPT_R_MIN40[7:0];
assign o_SMAP_ADAPT_R_MIN41[7:0]	= r_SMAP_ADAPT_R_MIN41[7:0];
assign o_SMAP_ADAPT_R_MIN42[7:0]	= r_SMAP_ADAPT_R_MIN42[7:0];
assign o_SMAP_ADAPT_R_MIN43[7:0]	= r_SMAP_ADAPT_R_MIN43[7:0];


// SPA_SMAP_ADAPT_R_MIN5_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_SMAP_ADAPT_R_MIN50[7:0]	<= 8`h0;
		r_SMAP_ADAPT_R_MIN51[7:0]	<= 8`h0;
		r_SMAP_ADAPT_R_MIN52[7:0]	<= 8`h0;
		r_SMAP_ADAPT_R_MIN53[7:0]	<= 8`h0;
	end
	else if (w_addr0cc4_wr) begin
		r_SMAP_ADAPT_R_MIN50[7:0]	<= i_PWDATA[7:0];
		r_SMAP_ADAPT_R_MIN51[7:0]	<= i_PWDATA[15:8];
		r_SMAP_ADAPT_R_MIN52[7:0]	<= i_PWDATA[23:16];
		r_SMAP_ADAPT_R_MIN53[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_SMAP_ADAPT_R_MIN50[7:0]	<= r_SMAP_ADAPT_R_MIN50[7:0];
		r_SMAP_ADAPT_R_MIN51[7:0]	<= r_SMAP_ADAPT_R_MIN51[7:0];
		r_SMAP_ADAPT_R_MIN52[7:0]	<= r_SMAP_ADAPT_R_MIN52[7:0];
		r_SMAP_ADAPT_R_MIN53[7:0]	<= r_SMAP_ADAPT_R_MIN53[7:0];
	end
end

// output assign for SPA_SMAP_ADAPT_R_MIN5_REG
assign o_SMAP_ADAPT_R_MIN50[7:0]	= r_SMAP_ADAPT_R_MIN50[7:0];
assign o_SMAP_ADAPT_R_MIN51[7:0]	= r_SMAP_ADAPT_R_MIN51[7:0];
assign o_SMAP_ADAPT_R_MIN52[7:0]	= r_SMAP_ADAPT_R_MIN52[7:0];
assign o_SMAP_ADAPT_R_MIN53[7:0]	= r_SMAP_ADAPT_R_MIN53[7:0];


// SPA_SMAP_ADAPT_R_MIN6_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_SMAP_ADAPT_R_MIN60[7:0]	<= 8`h0;
		r_SMAP_ADAPT_R_MIN61[7:0]	<= 8`h0;
		r_SMAP_ADAPT_R_MIN62[7:0]	<= 8`h0;
		r_SMAP_ADAPT_R_MIN63[7:0]	<= 8`h0;
	end
	else if (w_addr0cc8_wr) begin
		r_SMAP_ADAPT_R_MIN60[7:0]	<= i_PWDATA[7:0];
		r_SMAP_ADAPT_R_MIN61[7:0]	<= i_PWDATA[15:8];
		r_SMAP_ADAPT_R_MIN62[7:0]	<= i_PWDATA[23:16];
		r_SMAP_ADAPT_R_MIN63[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_SMAP_ADAPT_R_MIN60[7:0]	<= r_SMAP_ADAPT_R_MIN60[7:0];
		r_SMAP_ADAPT_R_MIN61[7:0]	<= r_SMAP_ADAPT_R_MIN61[7:0];
		r_SMAP_ADAPT_R_MIN62[7:0]	<= r_SMAP_ADAPT_R_MIN62[7:0];
		r_SMAP_ADAPT_R_MIN63[7:0]	<= r_SMAP_ADAPT_R_MIN63[7:0];
	end
end

// output assign for SPA_SMAP_ADAPT_R_MIN6_REG
assign o_SMAP_ADAPT_R_MIN60[7:0]	= r_SMAP_ADAPT_R_MIN60[7:0];
assign o_SMAP_ADAPT_R_MIN61[7:0]	= r_SMAP_ADAPT_R_MIN61[7:0];
assign o_SMAP_ADAPT_R_MIN62[7:0]	= r_SMAP_ADAPT_R_MIN62[7:0];
assign o_SMAP_ADAPT_R_MIN63[7:0]	= r_SMAP_ADAPT_R_MIN63[7:0];


// SPA_SMAP_ADAPT_R_MIN7_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_SMAP_ADAPT_R_MIN70[7:0]	<= 8`h0;
		r_SMAP_ADAPT_R_MIN71[7:0]	<= 8`h0;
		r_SMAP_ADAPT_R_MIN72[7:0]	<= 8`h0;
		r_SMAP_ADAPT_R_MIN73[7:0]	<= 8`h0;
	end
	else if (w_addr0ccc_wr) begin
		r_SMAP_ADAPT_R_MIN70[7:0]	<= i_PWDATA[7:0];
		r_SMAP_ADAPT_R_MIN71[7:0]	<= i_PWDATA[15:8];
		r_SMAP_ADAPT_R_MIN72[7:0]	<= i_PWDATA[23:16];
		r_SMAP_ADAPT_R_MIN73[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_SMAP_ADAPT_R_MIN70[7:0]	<= r_SMAP_ADAPT_R_MIN70[7:0];
		r_SMAP_ADAPT_R_MIN71[7:0]	<= r_SMAP_ADAPT_R_MIN71[7:0];
		r_SMAP_ADAPT_R_MIN72[7:0]	<= r_SMAP_ADAPT_R_MIN72[7:0];
		r_SMAP_ADAPT_R_MIN73[7:0]	<= r_SMAP_ADAPT_R_MIN73[7:0];
	end
end

// output assign for SPA_SMAP_ADAPT_R_MIN7_REG
assign o_SMAP_ADAPT_R_MIN70[7:0]	= r_SMAP_ADAPT_R_MIN70[7:0];
assign o_SMAP_ADAPT_R_MIN71[7:0]	= r_SMAP_ADAPT_R_MIN71[7:0];
assign o_SMAP_ADAPT_R_MIN72[7:0]	= r_SMAP_ADAPT_R_MIN72[7:0];
assign o_SMAP_ADAPT_R_MIN73[7:0]	= r_SMAP_ADAPT_R_MIN73[7:0];


// SPA_SMAP_ADAPT_G_MAX0_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_SMAP_ADAPT_G_MAX00[7:0]	<= 8`h0;
		r_SMAP_ADAPT_G_MAX01[7:0]	<= 8`h8;
		r_SMAP_ADAPT_G_MAX02[7:0]	<= 8`h10;
		r_SMAP_ADAPT_G_MAX03[7:0]	<= 8`h18;
	end
	else if (w_addr0cd0_wr) begin
		r_SMAP_ADAPT_G_MAX00[7:0]	<= i_PWDATA[7:0];
		r_SMAP_ADAPT_G_MAX01[7:0]	<= i_PWDATA[15:8];
		r_SMAP_ADAPT_G_MAX02[7:0]	<= i_PWDATA[23:16];
		r_SMAP_ADAPT_G_MAX03[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_SMAP_ADAPT_G_MAX00[7:0]	<= r_SMAP_ADAPT_G_MAX00[7:0];
		r_SMAP_ADAPT_G_MAX01[7:0]	<= r_SMAP_ADAPT_G_MAX01[7:0];
		r_SMAP_ADAPT_G_MAX02[7:0]	<= r_SMAP_ADAPT_G_MAX02[7:0];
		r_SMAP_ADAPT_G_MAX03[7:0]	<= r_SMAP_ADAPT_G_MAX03[7:0];
	end
end

// output assign for SPA_SMAP_ADAPT_G_MAX0_REG
assign o_SMAP_ADAPT_G_MAX00[7:0]	= r_SMAP_ADAPT_G_MAX00[7:0];
assign o_SMAP_ADAPT_G_MAX01[7:0]	= r_SMAP_ADAPT_G_MAX01[7:0];
assign o_SMAP_ADAPT_G_MAX02[7:0]	= r_SMAP_ADAPT_G_MAX02[7:0];
assign o_SMAP_ADAPT_G_MAX03[7:0]	= r_SMAP_ADAPT_G_MAX03[7:0];


// SPA_SMAP_ADAPT_G_MAX1_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_SMAP_ADAPT_G_MAX10[7:0]	<= 8`h1E;
		r_SMAP_ADAPT_G_MAX11[7:0]	<= 8`h23;
		r_SMAP_ADAPT_G_MAX12[7:0]	<= 8`h23;
		r_SMAP_ADAPT_G_MAX13[7:0]	<= 8`h28;
	end
	else if (w_addr0cd4_wr) begin
		r_SMAP_ADAPT_G_MAX10[7:0]	<= i_PWDATA[7:0];
		r_SMAP_ADAPT_G_MAX11[7:0]	<= i_PWDATA[15:8];
		r_SMAP_ADAPT_G_MAX12[7:0]	<= i_PWDATA[23:16];
		r_SMAP_ADAPT_G_MAX13[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_SMAP_ADAPT_G_MAX10[7:0]	<= r_SMAP_ADAPT_G_MAX10[7:0];
		r_SMAP_ADAPT_G_MAX11[7:0]	<= r_SMAP_ADAPT_G_MAX11[7:0];
		r_SMAP_ADAPT_G_MAX12[7:0]	<= r_SMAP_ADAPT_G_MAX12[7:0];
		r_SMAP_ADAPT_G_MAX13[7:0]	<= r_SMAP_ADAPT_G_MAX13[7:0];
	end
end

// output assign for SPA_SMAP_ADAPT_G_MAX1_REG
assign o_SMAP_ADAPT_G_MAX10[7:0]	= r_SMAP_ADAPT_G_MAX10[7:0];
assign o_SMAP_ADAPT_G_MAX11[7:0]	= r_SMAP_ADAPT_G_MAX11[7:0];
assign o_SMAP_ADAPT_G_MAX12[7:0]	= r_SMAP_ADAPT_G_MAX12[7:0];
assign o_SMAP_ADAPT_G_MAX13[7:0]	= r_SMAP_ADAPT_G_MAX13[7:0];


// SPA_SMAP_ADAPT_G_MAX2_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_SMAP_ADAPT_G_MAX20[7:0]	<= 8`h28;
		r_SMAP_ADAPT_G_MAX21[7:0]	<= 8`h2D;
		r_SMAP_ADAPT_G_MAX22[7:0]	<= 8`h32;
		r_SMAP_ADAPT_G_MAX23[7:0]	<= 8`h37;
	end
	else if (w_addr0cd8_wr) begin
		r_SMAP_ADAPT_G_MAX20[7:0]	<= i_PWDATA[7:0];
		r_SMAP_ADAPT_G_MAX21[7:0]	<= i_PWDATA[15:8];
		r_SMAP_ADAPT_G_MAX22[7:0]	<= i_PWDATA[23:16];
		r_SMAP_ADAPT_G_MAX23[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_SMAP_ADAPT_G_MAX20[7:0]	<= r_SMAP_ADAPT_G_MAX20[7:0];
		r_SMAP_ADAPT_G_MAX21[7:0]	<= r_SMAP_ADAPT_G_MAX21[7:0];
		r_SMAP_ADAPT_G_MAX22[7:0]	<= r_SMAP_ADAPT_G_MAX22[7:0];
		r_SMAP_ADAPT_G_MAX23[7:0]	<= r_SMAP_ADAPT_G_MAX23[7:0];
	end
end

// output assign for SPA_SMAP_ADAPT_G_MAX2_REG
assign o_SMAP_ADAPT_G_MAX20[7:0]	= r_SMAP_ADAPT_G_MAX20[7:0];
assign o_SMAP_ADAPT_G_MAX21[7:0]	= r_SMAP_ADAPT_G_MAX21[7:0];
assign o_SMAP_ADAPT_G_MAX22[7:0]	= r_SMAP_ADAPT_G_MAX22[7:0];
assign o_SMAP_ADAPT_G_MAX23[7:0]	= r_SMAP_ADAPT_G_MAX23[7:0];


// SPA_SMAP_ADAPT_G_MAX3_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_SMAP_ADAPT_G_MAX30[7:0]	<= 8`h41;
		r_SMAP_ADAPT_G_MAX31[7:0]	<= 8`h46;
		r_SMAP_ADAPT_G_MAX32[7:0]	<= 8`h4B;
		r_SMAP_ADAPT_G_MAX33[7:0]	<= 8`h50;
	end
	else if (w_addr0cdc_wr) begin
		r_SMAP_ADAPT_G_MAX30[7:0]	<= i_PWDATA[7:0];
		r_SMAP_ADAPT_G_MAX31[7:0]	<= i_PWDATA[15:8];
		r_SMAP_ADAPT_G_MAX32[7:0]	<= i_PWDATA[23:16];
		r_SMAP_ADAPT_G_MAX33[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_SMAP_ADAPT_G_MAX30[7:0]	<= r_SMAP_ADAPT_G_MAX30[7:0];
		r_SMAP_ADAPT_G_MAX31[7:0]	<= r_SMAP_ADAPT_G_MAX31[7:0];
		r_SMAP_ADAPT_G_MAX32[7:0]	<= r_SMAP_ADAPT_G_MAX32[7:0];
		r_SMAP_ADAPT_G_MAX33[7:0]	<= r_SMAP_ADAPT_G_MAX33[7:0];
	end
end

// output assign for SPA_SMAP_ADAPT_G_MAX3_REG
assign o_SMAP_ADAPT_G_MAX30[7:0]	= r_SMAP_ADAPT_G_MAX30[7:0];
assign o_SMAP_ADAPT_G_MAX31[7:0]	= r_SMAP_ADAPT_G_MAX31[7:0];
assign o_SMAP_ADAPT_G_MAX32[7:0]	= r_SMAP_ADAPT_G_MAX32[7:0];
assign o_SMAP_ADAPT_G_MAX33[7:0]	= r_SMAP_ADAPT_G_MAX33[7:0];


// SPA_SMAP_ADAPT_G_MAX4_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_SMAP_ADAPT_G_MAX40[7:0]	<= 8`h50;
		r_SMAP_ADAPT_G_MAX41[7:0]	<= 8`h55;
		r_SMAP_ADAPT_G_MAX42[7:0]	<= 8`h5A;
		r_SMAP_ADAPT_G_MAX43[7:0]	<= 8`h5A;
	end
	else if (w_addr0ce0_wr) begin
		r_SMAP_ADAPT_G_MAX40[7:0]	<= i_PWDATA[7:0];
		r_SMAP_ADAPT_G_MAX41[7:0]	<= i_PWDATA[15:8];
		r_SMAP_ADAPT_G_MAX42[7:0]	<= i_PWDATA[23:16];
		r_SMAP_ADAPT_G_MAX43[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_SMAP_ADAPT_G_MAX40[7:0]	<= r_SMAP_ADAPT_G_MAX40[7:0];
		r_SMAP_ADAPT_G_MAX41[7:0]	<= r_SMAP_ADAPT_G_MAX41[7:0];
		r_SMAP_ADAPT_G_MAX42[7:0]	<= r_SMAP_ADAPT_G_MAX42[7:0];
		r_SMAP_ADAPT_G_MAX43[7:0]	<= r_SMAP_ADAPT_G_MAX43[7:0];
	end
end

// output assign for SPA_SMAP_ADAPT_G_MAX4_REG
assign o_SMAP_ADAPT_G_MAX40[7:0]	= r_SMAP_ADAPT_G_MAX40[7:0];
assign o_SMAP_ADAPT_G_MAX41[7:0]	= r_SMAP_ADAPT_G_MAX41[7:0];
assign o_SMAP_ADAPT_G_MAX42[7:0]	= r_SMAP_ADAPT_G_MAX42[7:0];
assign o_SMAP_ADAPT_G_MAX43[7:0]	= r_SMAP_ADAPT_G_MAX43[7:0];


// SPA_SMAP_ADAPT_G_MAX5_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_SMAP_ADAPT_G_MAX50[7:0]	<= 8`h64;
		r_SMAP_ADAPT_G_MAX51[7:0]	<= 8`h64;
		r_SMAP_ADAPT_G_MAX52[7:0]	<= 8`h64;
		r_SMAP_ADAPT_G_MAX53[7:0]	<= 8`h6E;
	end
	else if (w_addr0ce4_wr) begin
		r_SMAP_ADAPT_G_MAX50[7:0]	<= i_PWDATA[7:0];
		r_SMAP_ADAPT_G_MAX51[7:0]	<= i_PWDATA[15:8];
		r_SMAP_ADAPT_G_MAX52[7:0]	<= i_PWDATA[23:16];
		r_SMAP_ADAPT_G_MAX53[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_SMAP_ADAPT_G_MAX50[7:0]	<= r_SMAP_ADAPT_G_MAX50[7:0];
		r_SMAP_ADAPT_G_MAX51[7:0]	<= r_SMAP_ADAPT_G_MAX51[7:0];
		r_SMAP_ADAPT_G_MAX52[7:0]	<= r_SMAP_ADAPT_G_MAX52[7:0];
		r_SMAP_ADAPT_G_MAX53[7:0]	<= r_SMAP_ADAPT_G_MAX53[7:0];
	end
end

// output assign for SPA_SMAP_ADAPT_G_MAX5_REG
assign o_SMAP_ADAPT_G_MAX50[7:0]	= r_SMAP_ADAPT_G_MAX50[7:0];
assign o_SMAP_ADAPT_G_MAX51[7:0]	= r_SMAP_ADAPT_G_MAX51[7:0];
assign o_SMAP_ADAPT_G_MAX52[7:0]	= r_SMAP_ADAPT_G_MAX52[7:0];
assign o_SMAP_ADAPT_G_MAX53[7:0]	= r_SMAP_ADAPT_G_MAX53[7:0];


// SPA_SMAP_ADAPT_G_MAX6_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_SMAP_ADAPT_G_MAX60[7:0]	<= 8`h6E;
		r_SMAP_ADAPT_G_MAX61[7:0]	<= 8`h78;
		r_SMAP_ADAPT_G_MAX62[7:0]	<= 8`h78;
		r_SMAP_ADAPT_G_MAX63[7:0]	<= 8`h82;
	end
	else if (w_addr0ce8_wr) begin
		r_SMAP_ADAPT_G_MAX60[7:0]	<= i_PWDATA[7:0];
		r_SMAP_ADAPT_G_MAX61[7:0]	<= i_PWDATA[15:8];
		r_SMAP_ADAPT_G_MAX62[7:0]	<= i_PWDATA[23:16];
		r_SMAP_ADAPT_G_MAX63[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_SMAP_ADAPT_G_MAX60[7:0]	<= r_SMAP_ADAPT_G_MAX60[7:0];
		r_SMAP_ADAPT_G_MAX61[7:0]	<= r_SMAP_ADAPT_G_MAX61[7:0];
		r_SMAP_ADAPT_G_MAX62[7:0]	<= r_SMAP_ADAPT_G_MAX62[7:0];
		r_SMAP_ADAPT_G_MAX63[7:0]	<= r_SMAP_ADAPT_G_MAX63[7:0];
	end
end

// output assign for SPA_SMAP_ADAPT_G_MAX6_REG
assign o_SMAP_ADAPT_G_MAX60[7:0]	= r_SMAP_ADAPT_G_MAX60[7:0];
assign o_SMAP_ADAPT_G_MAX61[7:0]	= r_SMAP_ADAPT_G_MAX61[7:0];
assign o_SMAP_ADAPT_G_MAX62[7:0]	= r_SMAP_ADAPT_G_MAX62[7:0];
assign o_SMAP_ADAPT_G_MAX63[7:0]	= r_SMAP_ADAPT_G_MAX63[7:0];


// SPA_SMAP_ADAPT_G_MAX7_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_SMAP_ADAPT_G_MAX70[7:0]	<= 8`h8C;
		r_SMAP_ADAPT_G_MAX71[7:0]	<= 8`h8C;
		r_SMAP_ADAPT_G_MAX72[7:0]	<= 8`h8C;
		r_SMAP_ADAPT_G_MAX73[7:0]	<= 8`h8C;
	end
	else if (w_addr0cec_wr) begin
		r_SMAP_ADAPT_G_MAX70[7:0]	<= i_PWDATA[7:0];
		r_SMAP_ADAPT_G_MAX71[7:0]	<= i_PWDATA[15:8];
		r_SMAP_ADAPT_G_MAX72[7:0]	<= i_PWDATA[23:16];
		r_SMAP_ADAPT_G_MAX73[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_SMAP_ADAPT_G_MAX70[7:0]	<= r_SMAP_ADAPT_G_MAX70[7:0];
		r_SMAP_ADAPT_G_MAX71[7:0]	<= r_SMAP_ADAPT_G_MAX71[7:0];
		r_SMAP_ADAPT_G_MAX72[7:0]	<= r_SMAP_ADAPT_G_MAX72[7:0];
		r_SMAP_ADAPT_G_MAX73[7:0]	<= r_SMAP_ADAPT_G_MAX73[7:0];
	end
end

// output assign for SPA_SMAP_ADAPT_G_MAX7_REG
assign o_SMAP_ADAPT_G_MAX70[7:0]	= r_SMAP_ADAPT_G_MAX70[7:0];
assign o_SMAP_ADAPT_G_MAX71[7:0]	= r_SMAP_ADAPT_G_MAX71[7:0];
assign o_SMAP_ADAPT_G_MAX72[7:0]	= r_SMAP_ADAPT_G_MAX72[7:0];
assign o_SMAP_ADAPT_G_MAX73[7:0]	= r_SMAP_ADAPT_G_MAX73[7:0];


// SPA_SMAP_ADAPT_G_MIN0_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_SMAP_ADAPT_G_MIN00[7:0]	<= 8`h0;
		r_SMAP_ADAPT_G_MIN01[7:0]	<= 8`h0;
		r_SMAP_ADAPT_G_MIN02[7:0]	<= 8`h0;
		r_SMAP_ADAPT_G_MIN03[7:0]	<= 8`h0;
	end
	else if (w_addr0cf0_wr) begin
		r_SMAP_ADAPT_G_MIN00[7:0]	<= i_PWDATA[7:0];
		r_SMAP_ADAPT_G_MIN01[7:0]	<= i_PWDATA[15:8];
		r_SMAP_ADAPT_G_MIN02[7:0]	<= i_PWDATA[23:16];
		r_SMAP_ADAPT_G_MIN03[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_SMAP_ADAPT_G_MIN00[7:0]	<= r_SMAP_ADAPT_G_MIN00[7:0];
		r_SMAP_ADAPT_G_MIN01[7:0]	<= r_SMAP_ADAPT_G_MIN01[7:0];
		r_SMAP_ADAPT_G_MIN02[7:0]	<= r_SMAP_ADAPT_G_MIN02[7:0];
		r_SMAP_ADAPT_G_MIN03[7:0]	<= r_SMAP_ADAPT_G_MIN03[7:0];
	end
end

// output assign for SPA_SMAP_ADAPT_G_MIN0_REG
assign o_SMAP_ADAPT_G_MIN00[7:0]	= r_SMAP_ADAPT_G_MIN00[7:0];
assign o_SMAP_ADAPT_G_MIN01[7:0]	= r_SMAP_ADAPT_G_MIN01[7:0];
assign o_SMAP_ADAPT_G_MIN02[7:0]	= r_SMAP_ADAPT_G_MIN02[7:0];
assign o_SMAP_ADAPT_G_MIN03[7:0]	= r_SMAP_ADAPT_G_MIN03[7:0];


// SPA_SMAP_ADAPT_G_MIN1_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_SMAP_ADAPT_G_MIN10[7:0]	<= 8`h0;
		r_SMAP_ADAPT_G_MIN11[7:0]	<= 8`h0;
		r_SMAP_ADAPT_G_MIN12[7:0]	<= 8`h0;
		r_SMAP_ADAPT_G_MIN13[7:0]	<= 8`h0;
	end
	else if (w_addr0cf4_wr) begin
		r_SMAP_ADAPT_G_MIN10[7:0]	<= i_PWDATA[7:0];
		r_SMAP_ADAPT_G_MIN11[7:0]	<= i_PWDATA[15:8];
		r_SMAP_ADAPT_G_MIN12[7:0]	<= i_PWDATA[23:16];
		r_SMAP_ADAPT_G_MIN13[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_SMAP_ADAPT_G_MIN10[7:0]	<= r_SMAP_ADAPT_G_MIN10[7:0];
		r_SMAP_ADAPT_G_MIN11[7:0]	<= r_SMAP_ADAPT_G_MIN11[7:0];
		r_SMAP_ADAPT_G_MIN12[7:0]	<= r_SMAP_ADAPT_G_MIN12[7:0];
		r_SMAP_ADAPT_G_MIN13[7:0]	<= r_SMAP_ADAPT_G_MIN13[7:0];
	end
end

// output assign for SPA_SMAP_ADAPT_G_MIN1_REG
assign o_SMAP_ADAPT_G_MIN10[7:0]	= r_SMAP_ADAPT_G_MIN10[7:0];
assign o_SMAP_ADAPT_G_MIN11[7:0]	= r_SMAP_ADAPT_G_MIN11[7:0];
assign o_SMAP_ADAPT_G_MIN12[7:0]	= r_SMAP_ADAPT_G_MIN12[7:0];
assign o_SMAP_ADAPT_G_MIN13[7:0]	= r_SMAP_ADAPT_G_MIN13[7:0];


// SPA_SMAP_ADAPT_G_MIN2_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_SMAP_ADAPT_G_MIN20[7:0]	<= 8`h0;
		r_SMAP_ADAPT_G_MIN21[7:0]	<= 8`h0;
		r_SMAP_ADAPT_G_MIN22[7:0]	<= 8`h0;
		r_SMAP_ADAPT_G_MIN23[7:0]	<= 8`h0;
	end
	else if (w_addr0cf8_wr) begin
		r_SMAP_ADAPT_G_MIN20[7:0]	<= i_PWDATA[7:0];
		r_SMAP_ADAPT_G_MIN21[7:0]	<= i_PWDATA[15:8];
		r_SMAP_ADAPT_G_MIN22[7:0]	<= i_PWDATA[23:16];
		r_SMAP_ADAPT_G_MIN23[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_SMAP_ADAPT_G_MIN20[7:0]	<= r_SMAP_ADAPT_G_MIN20[7:0];
		r_SMAP_ADAPT_G_MIN21[7:0]	<= r_SMAP_ADAPT_G_MIN21[7:0];
		r_SMAP_ADAPT_G_MIN22[7:0]	<= r_SMAP_ADAPT_G_MIN22[7:0];
		r_SMAP_ADAPT_G_MIN23[7:0]	<= r_SMAP_ADAPT_G_MIN23[7:0];
	end
end

// output assign for SPA_SMAP_ADAPT_G_MIN2_REG
assign o_SMAP_ADAPT_G_MIN20[7:0]	= r_SMAP_ADAPT_G_MIN20[7:0];
assign o_SMAP_ADAPT_G_MIN21[7:0]	= r_SMAP_ADAPT_G_MIN21[7:0];
assign o_SMAP_ADAPT_G_MIN22[7:0]	= r_SMAP_ADAPT_G_MIN22[7:0];
assign o_SMAP_ADAPT_G_MIN23[7:0]	= r_SMAP_ADAPT_G_MIN23[7:0];


// SPA_SMAP_ADAPT_G_MIN3_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_SMAP_ADAPT_G_MIN30[7:0]	<= 8`h0;
		r_SMAP_ADAPT_G_MIN31[7:0]	<= 8`h0;
		r_SMAP_ADAPT_G_MIN32[7:0]	<= 8`h0;
		r_SMAP_ADAPT_G_MIN33[7:0]	<= 8`h0;
	end
	else if (w_addr0cfc_wr) begin
		r_SMAP_ADAPT_G_MIN30[7:0]	<= i_PWDATA[7:0];
		r_SMAP_ADAPT_G_MIN31[7:0]	<= i_PWDATA[15:8];
		r_SMAP_ADAPT_G_MIN32[7:0]	<= i_PWDATA[23:16];
		r_SMAP_ADAPT_G_MIN33[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_SMAP_ADAPT_G_MIN30[7:0]	<= r_SMAP_ADAPT_G_MIN30[7:0];
		r_SMAP_ADAPT_G_MIN31[7:0]	<= r_SMAP_ADAPT_G_MIN31[7:0];
		r_SMAP_ADAPT_G_MIN32[7:0]	<= r_SMAP_ADAPT_G_MIN32[7:0];
		r_SMAP_ADAPT_G_MIN33[7:0]	<= r_SMAP_ADAPT_G_MIN33[7:0];
	end
end

// output assign for SPA_SMAP_ADAPT_G_MIN3_REG
assign o_SMAP_ADAPT_G_MIN30[7:0]	= r_SMAP_ADAPT_G_MIN30[7:0];
assign o_SMAP_ADAPT_G_MIN31[7:0]	= r_SMAP_ADAPT_G_MIN31[7:0];
assign o_SMAP_ADAPT_G_MIN32[7:0]	= r_SMAP_ADAPT_G_MIN32[7:0];
assign o_SMAP_ADAPT_G_MIN33[7:0]	= r_SMAP_ADAPT_G_MIN33[7:0];


// SPA_SMAP_ADAPT_G_MIN4_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_SMAP_ADAPT_G_MIN40[7:0]	<= 8`h0;
		r_SMAP_ADAPT_G_MIN41[7:0]	<= 8`h0;
		r_SMAP_ADAPT_G_MIN42[7:0]	<= 8`h0;
		r_SMAP_ADAPT_G_MIN43[7:0]	<= 8`h0;
	end
	else if (w_addr0d00_wr) begin
		r_SMAP_ADAPT_G_MIN40[7:0]	<= i_PWDATA[7:0];
		r_SMAP_ADAPT_G_MIN41[7:0]	<= i_PWDATA[15:8];
		r_SMAP_ADAPT_G_MIN42[7:0]	<= i_PWDATA[23:16];
		r_SMAP_ADAPT_G_MIN43[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_SMAP_ADAPT_G_MIN40[7:0]	<= r_SMAP_ADAPT_G_MIN40[7:0];
		r_SMAP_ADAPT_G_MIN41[7:0]	<= r_SMAP_ADAPT_G_MIN41[7:0];
		r_SMAP_ADAPT_G_MIN42[7:0]	<= r_SMAP_ADAPT_G_MIN42[7:0];
		r_SMAP_ADAPT_G_MIN43[7:0]	<= r_SMAP_ADAPT_G_MIN43[7:0];
	end
end

// output assign for SPA_SMAP_ADAPT_G_MIN4_REG
assign o_SMAP_ADAPT_G_MIN40[7:0]	= r_SMAP_ADAPT_G_MIN40[7:0];
assign o_SMAP_ADAPT_G_MIN41[7:0]	= r_SMAP_ADAPT_G_MIN41[7:0];
assign o_SMAP_ADAPT_G_MIN42[7:0]	= r_SMAP_ADAPT_G_MIN42[7:0];
assign o_SMAP_ADAPT_G_MIN43[7:0]	= r_SMAP_ADAPT_G_MIN43[7:0];


// SPA_SMAP_ADAPT_G_MIN5_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_SMAP_ADAPT_G_MIN50[7:0]	<= 8`h0;
		r_SMAP_ADAPT_G_MIN51[7:0]	<= 8`h0;
		r_SMAP_ADAPT_G_MIN52[7:0]	<= 8`h0;
		r_SMAP_ADAPT_G_MIN53[7:0]	<= 8`h0;
	end
	else if (w_addr0d04_wr) begin
		r_SMAP_ADAPT_G_MIN50[7:0]	<= i_PWDATA[7:0];
		r_SMAP_ADAPT_G_MIN51[7:0]	<= i_PWDATA[15:8];
		r_SMAP_ADAPT_G_MIN52[7:0]	<= i_PWDATA[23:16];
		r_SMAP_ADAPT_G_MIN53[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_SMAP_ADAPT_G_MIN50[7:0]	<= r_SMAP_ADAPT_G_MIN50[7:0];
		r_SMAP_ADAPT_G_MIN51[7:0]	<= r_SMAP_ADAPT_G_MIN51[7:0];
		r_SMAP_ADAPT_G_MIN52[7:0]	<= r_SMAP_ADAPT_G_MIN52[7:0];
		r_SMAP_ADAPT_G_MIN53[7:0]	<= r_SMAP_ADAPT_G_MIN53[7:0];
	end
end

// output assign for SPA_SMAP_ADAPT_G_MIN5_REG
assign o_SMAP_ADAPT_G_MIN50[7:0]	= r_SMAP_ADAPT_G_MIN50[7:0];
assign o_SMAP_ADAPT_G_MIN51[7:0]	= r_SMAP_ADAPT_G_MIN51[7:0];
assign o_SMAP_ADAPT_G_MIN52[7:0]	= r_SMAP_ADAPT_G_MIN52[7:0];
assign o_SMAP_ADAPT_G_MIN53[7:0]	= r_SMAP_ADAPT_G_MIN53[7:0];


// SPA_SMAP_ADAPT_G_MIN6_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_SMAP_ADAPT_G_MIN60[7:0]	<= 8`h0;
		r_SMAP_ADAPT_G_MIN61[7:0]	<= 8`h0;
		r_SMAP_ADAPT_G_MIN62[7:0]	<= 8`h0;
		r_SMAP_ADAPT_G_MIN63[7:0]	<= 8`h0;
	end
	else if (w_addr0d08_wr) begin
		r_SMAP_ADAPT_G_MIN60[7:0]	<= i_PWDATA[7:0];
		r_SMAP_ADAPT_G_MIN61[7:0]	<= i_PWDATA[15:8];
		r_SMAP_ADAPT_G_MIN62[7:0]	<= i_PWDATA[23:16];
		r_SMAP_ADAPT_G_MIN63[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_SMAP_ADAPT_G_MIN60[7:0]	<= r_SMAP_ADAPT_G_MIN60[7:0];
		r_SMAP_ADAPT_G_MIN61[7:0]	<= r_SMAP_ADAPT_G_MIN61[7:0];
		r_SMAP_ADAPT_G_MIN62[7:0]	<= r_SMAP_ADAPT_G_MIN62[7:0];
		r_SMAP_ADAPT_G_MIN63[7:0]	<= r_SMAP_ADAPT_G_MIN63[7:0];
	end
end

// output assign for SPA_SMAP_ADAPT_G_MIN6_REG
assign o_SMAP_ADAPT_G_MIN60[7:0]	= r_SMAP_ADAPT_G_MIN60[7:0];
assign o_SMAP_ADAPT_G_MIN61[7:0]	= r_SMAP_ADAPT_G_MIN61[7:0];
assign o_SMAP_ADAPT_G_MIN62[7:0]	= r_SMAP_ADAPT_G_MIN62[7:0];
assign o_SMAP_ADAPT_G_MIN63[7:0]	= r_SMAP_ADAPT_G_MIN63[7:0];


// SPA_SMAP_ADAPT_G_MIN7_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_SMAP_ADAPT_G_MIN70[7:0]	<= 8`h0;
		r_SMAP_ADAPT_G_MIN71[7:0]	<= 8`h0;
		r_SMAP_ADAPT_G_MIN72[7:0]	<= 8`h0;
		r_SMAP_ADAPT_G_MIN73[7:0]	<= 8`h0;
	end
	else if (w_addr0d0c_wr) begin
		r_SMAP_ADAPT_G_MIN70[7:0]	<= i_PWDATA[7:0];
		r_SMAP_ADAPT_G_MIN71[7:0]	<= i_PWDATA[15:8];
		r_SMAP_ADAPT_G_MIN72[7:0]	<= i_PWDATA[23:16];
		r_SMAP_ADAPT_G_MIN73[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_SMAP_ADAPT_G_MIN70[7:0]	<= r_SMAP_ADAPT_G_MIN70[7:0];
		r_SMAP_ADAPT_G_MIN71[7:0]	<= r_SMAP_ADAPT_G_MIN71[7:0];
		r_SMAP_ADAPT_G_MIN72[7:0]	<= r_SMAP_ADAPT_G_MIN72[7:0];
		r_SMAP_ADAPT_G_MIN73[7:0]	<= r_SMAP_ADAPT_G_MIN73[7:0];
	end
end

// output assign for SPA_SMAP_ADAPT_G_MIN7_REG
assign o_SMAP_ADAPT_G_MIN70[7:0]	= r_SMAP_ADAPT_G_MIN70[7:0];
assign o_SMAP_ADAPT_G_MIN71[7:0]	= r_SMAP_ADAPT_G_MIN71[7:0];
assign o_SMAP_ADAPT_G_MIN72[7:0]	= r_SMAP_ADAPT_G_MIN72[7:0];
assign o_SMAP_ADAPT_G_MIN73[7:0]	= r_SMAP_ADAPT_G_MIN73[7:0];


// SPA_SMAP_ADAPT_B_MAX0_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_SMAP_ADAPT_B_MAX00[7:0]	<= 8`h0;
		r_SMAP_ADAPT_B_MAX01[7:0]	<= 8`h8;
		r_SMAP_ADAPT_B_MAX02[7:0]	<= 8`h10;
		r_SMAP_ADAPT_B_MAX03[7:0]	<= 8`h18;
	end
	else if (w_addr0d10_wr) begin
		r_SMAP_ADAPT_B_MAX00[7:0]	<= i_PWDATA[7:0];
		r_SMAP_ADAPT_B_MAX01[7:0]	<= i_PWDATA[15:8];
		r_SMAP_ADAPT_B_MAX02[7:0]	<= i_PWDATA[23:16];
		r_SMAP_ADAPT_B_MAX03[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_SMAP_ADAPT_B_MAX00[7:0]	<= r_SMAP_ADAPT_B_MAX00[7:0];
		r_SMAP_ADAPT_B_MAX01[7:0]	<= r_SMAP_ADAPT_B_MAX01[7:0];
		r_SMAP_ADAPT_B_MAX02[7:0]	<= r_SMAP_ADAPT_B_MAX02[7:0];
		r_SMAP_ADAPT_B_MAX03[7:0]	<= r_SMAP_ADAPT_B_MAX03[7:0];
	end
end

// output assign for SPA_SMAP_ADAPT_B_MAX0_REG
assign o_SMAP_ADAPT_B_MAX00[7:0]	= r_SMAP_ADAPT_B_MAX00[7:0];
assign o_SMAP_ADAPT_B_MAX01[7:0]	= r_SMAP_ADAPT_B_MAX01[7:0];
assign o_SMAP_ADAPT_B_MAX02[7:0]	= r_SMAP_ADAPT_B_MAX02[7:0];
assign o_SMAP_ADAPT_B_MAX03[7:0]	= r_SMAP_ADAPT_B_MAX03[7:0];


// SPA_SMAP_ADAPT_B_MAX1_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_SMAP_ADAPT_B_MAX10[7:0]	<= 8`h1E;
		r_SMAP_ADAPT_B_MAX11[7:0]	<= 8`h23;
		r_SMAP_ADAPT_B_MAX12[7:0]	<= 8`h23;
		r_SMAP_ADAPT_B_MAX13[7:0]	<= 8`h28;
	end
	else if (w_addr0d14_wr) begin
		r_SMAP_ADAPT_B_MAX10[7:0]	<= i_PWDATA[7:0];
		r_SMAP_ADAPT_B_MAX11[7:0]	<= i_PWDATA[15:8];
		r_SMAP_ADAPT_B_MAX12[7:0]	<= i_PWDATA[23:16];
		r_SMAP_ADAPT_B_MAX13[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_SMAP_ADAPT_B_MAX10[7:0]	<= r_SMAP_ADAPT_B_MAX10[7:0];
		r_SMAP_ADAPT_B_MAX11[7:0]	<= r_SMAP_ADAPT_B_MAX11[7:0];
		r_SMAP_ADAPT_B_MAX12[7:0]	<= r_SMAP_ADAPT_B_MAX12[7:0];
		r_SMAP_ADAPT_B_MAX13[7:0]	<= r_SMAP_ADAPT_B_MAX13[7:0];
	end
end

// output assign for SPA_SMAP_ADAPT_B_MAX1_REG
assign o_SMAP_ADAPT_B_MAX10[7:0]	= r_SMAP_ADAPT_B_MAX10[7:0];
assign o_SMAP_ADAPT_B_MAX11[7:0]	= r_SMAP_ADAPT_B_MAX11[7:0];
assign o_SMAP_ADAPT_B_MAX12[7:0]	= r_SMAP_ADAPT_B_MAX12[7:0];
assign o_SMAP_ADAPT_B_MAX13[7:0]	= r_SMAP_ADAPT_B_MAX13[7:0];


// SPA_SMAP_ADAPT_B_MAX2_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_SMAP_ADAPT_B_MAX20[7:0]	<= 8`h28;
		r_SMAP_ADAPT_B_MAX21[7:0]	<= 8`h2D;
		r_SMAP_ADAPT_B_MAX22[7:0]	<= 8`h32;
		r_SMAP_ADAPT_B_MAX23[7:0]	<= 8`h37;
	end
	else if (w_addr0d18_wr) begin
		r_SMAP_ADAPT_B_MAX20[7:0]	<= i_PWDATA[7:0];
		r_SMAP_ADAPT_B_MAX21[7:0]	<= i_PWDATA[15:8];
		r_SMAP_ADAPT_B_MAX22[7:0]	<= i_PWDATA[23:16];
		r_SMAP_ADAPT_B_MAX23[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_SMAP_ADAPT_B_MAX20[7:0]	<= r_SMAP_ADAPT_B_MAX20[7:0];
		r_SMAP_ADAPT_B_MAX21[7:0]	<= r_SMAP_ADAPT_B_MAX21[7:0];
		r_SMAP_ADAPT_B_MAX22[7:0]	<= r_SMAP_ADAPT_B_MAX22[7:0];
		r_SMAP_ADAPT_B_MAX23[7:0]	<= r_SMAP_ADAPT_B_MAX23[7:0];
	end
end

// output assign for SPA_SMAP_ADAPT_B_MAX2_REG
assign o_SMAP_ADAPT_B_MAX20[7:0]	= r_SMAP_ADAPT_B_MAX20[7:0];
assign o_SMAP_ADAPT_B_MAX21[7:0]	= r_SMAP_ADAPT_B_MAX21[7:0];
assign o_SMAP_ADAPT_B_MAX22[7:0]	= r_SMAP_ADAPT_B_MAX22[7:0];
assign o_SMAP_ADAPT_B_MAX23[7:0]	= r_SMAP_ADAPT_B_MAX23[7:0];


// SPA_SMAP_ADAPT_B_MAX3_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_SMAP_ADAPT_B_MAX30[7:0]	<= 8`h41;
		r_SMAP_ADAPT_B_MAX31[7:0]	<= 8`h46;
		r_SMAP_ADAPT_B_MAX32[7:0]	<= 8`h4B;
		r_SMAP_ADAPT_B_MAX33[7:0]	<= 8`h50;
	end
	else if (w_addr0d1c_wr) begin
		r_SMAP_ADAPT_B_MAX30[7:0]	<= i_PWDATA[7:0];
		r_SMAP_ADAPT_B_MAX31[7:0]	<= i_PWDATA[15:8];
		r_SMAP_ADAPT_B_MAX32[7:0]	<= i_PWDATA[23:16];
		r_SMAP_ADAPT_B_MAX33[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_SMAP_ADAPT_B_MAX30[7:0]	<= r_SMAP_ADAPT_B_MAX30[7:0];
		r_SMAP_ADAPT_B_MAX31[7:0]	<= r_SMAP_ADAPT_B_MAX31[7:0];
		r_SMAP_ADAPT_B_MAX32[7:0]	<= r_SMAP_ADAPT_B_MAX32[7:0];
		r_SMAP_ADAPT_B_MAX33[7:0]	<= r_SMAP_ADAPT_B_MAX33[7:0];
	end
end

// output assign for SPA_SMAP_ADAPT_B_MAX3_REG
assign o_SMAP_ADAPT_B_MAX30[7:0]	= r_SMAP_ADAPT_B_MAX30[7:0];
assign o_SMAP_ADAPT_B_MAX31[7:0]	= r_SMAP_ADAPT_B_MAX31[7:0];
assign o_SMAP_ADAPT_B_MAX32[7:0]	= r_SMAP_ADAPT_B_MAX32[7:0];
assign o_SMAP_ADAPT_B_MAX33[7:0]	= r_SMAP_ADAPT_B_MAX33[7:0];


// SPA_SMAP_ADAPT_B_MAX4_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_SMAP_ADAPT_B_MAX40[7:0]	<= 8`h50;
		r_SMAP_ADAPT_B_MAX41[7:0]	<= 8`h55;
		r_SMAP_ADAPT_B_MAX42[7:0]	<= 8`h5A;
		r_SMAP_ADAPT_B_MAX43[7:0]	<= 8`h5A;
	end
	else if (w_addr0d20_wr) begin
		r_SMAP_ADAPT_B_MAX40[7:0]	<= i_PWDATA[7:0];
		r_SMAP_ADAPT_B_MAX41[7:0]	<= i_PWDATA[15:8];
		r_SMAP_ADAPT_B_MAX42[7:0]	<= i_PWDATA[23:16];
		r_SMAP_ADAPT_B_MAX43[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_SMAP_ADAPT_B_MAX40[7:0]	<= r_SMAP_ADAPT_B_MAX40[7:0];
		r_SMAP_ADAPT_B_MAX41[7:0]	<= r_SMAP_ADAPT_B_MAX41[7:0];
		r_SMAP_ADAPT_B_MAX42[7:0]	<= r_SMAP_ADAPT_B_MAX42[7:0];
		r_SMAP_ADAPT_B_MAX43[7:0]	<= r_SMAP_ADAPT_B_MAX43[7:0];
	end
end

// output assign for SPA_SMAP_ADAPT_B_MAX4_REG
assign o_SMAP_ADAPT_B_MAX40[7:0]	= r_SMAP_ADAPT_B_MAX40[7:0];
assign o_SMAP_ADAPT_B_MAX41[7:0]	= r_SMAP_ADAPT_B_MAX41[7:0];
assign o_SMAP_ADAPT_B_MAX42[7:0]	= r_SMAP_ADAPT_B_MAX42[7:0];
assign o_SMAP_ADAPT_B_MAX43[7:0]	= r_SMAP_ADAPT_B_MAX43[7:0];


// SPA_SMAP_ADAPT_B_MAX5_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_SMAP_ADAPT_B_MAX50[7:0]	<= 8`h64;
		r_SMAP_ADAPT_B_MAX51[7:0]	<= 8`h64;
		r_SMAP_ADAPT_B_MAX52[7:0]	<= 8`h64;
		r_SMAP_ADAPT_B_MAX53[7:0]	<= 8`h6E;
	end
	else if (w_addr0d24_wr) begin
		r_SMAP_ADAPT_B_MAX50[7:0]	<= i_PWDATA[7:0];
		r_SMAP_ADAPT_B_MAX51[7:0]	<= i_PWDATA[15:8];
		r_SMAP_ADAPT_B_MAX52[7:0]	<= i_PWDATA[23:16];
		r_SMAP_ADAPT_B_MAX53[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_SMAP_ADAPT_B_MAX50[7:0]	<= r_SMAP_ADAPT_B_MAX50[7:0];
		r_SMAP_ADAPT_B_MAX51[7:0]	<= r_SMAP_ADAPT_B_MAX51[7:0];
		r_SMAP_ADAPT_B_MAX52[7:0]	<= r_SMAP_ADAPT_B_MAX52[7:0];
		r_SMAP_ADAPT_B_MAX53[7:0]	<= r_SMAP_ADAPT_B_MAX53[7:0];
	end
end

// output assign for SPA_SMAP_ADAPT_B_MAX5_REG
assign o_SMAP_ADAPT_B_MAX50[7:0]	= r_SMAP_ADAPT_B_MAX50[7:0];
assign o_SMAP_ADAPT_B_MAX51[7:0]	= r_SMAP_ADAPT_B_MAX51[7:0];
assign o_SMAP_ADAPT_B_MAX52[7:0]	= r_SMAP_ADAPT_B_MAX52[7:0];
assign o_SMAP_ADAPT_B_MAX53[7:0]	= r_SMAP_ADAPT_B_MAX53[7:0];


// SPA_SMAP_ADAPT_B_MAX6_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_SMAP_ADAPT_B_MAX60[7:0]	<= 8`h6E;
		r_SMAP_ADAPT_B_MAX61[7:0]	<= 8`h78;
		r_SMAP_ADAPT_B_MAX62[7:0]	<= 8`h78;
		r_SMAP_ADAPT_B_MAX63[7:0]	<= 8`h82;
	end
	else if (w_addr0d28_wr) begin
		r_SMAP_ADAPT_B_MAX60[7:0]	<= i_PWDATA[7:0];
		r_SMAP_ADAPT_B_MAX61[7:0]	<= i_PWDATA[15:8];
		r_SMAP_ADAPT_B_MAX62[7:0]	<= i_PWDATA[23:16];
		r_SMAP_ADAPT_B_MAX63[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_SMAP_ADAPT_B_MAX60[7:0]	<= r_SMAP_ADAPT_B_MAX60[7:0];
		r_SMAP_ADAPT_B_MAX61[7:0]	<= r_SMAP_ADAPT_B_MAX61[7:0];
		r_SMAP_ADAPT_B_MAX62[7:0]	<= r_SMAP_ADAPT_B_MAX62[7:0];
		r_SMAP_ADAPT_B_MAX63[7:0]	<= r_SMAP_ADAPT_B_MAX63[7:0];
	end
end

// output assign for SPA_SMAP_ADAPT_B_MAX6_REG
assign o_SMAP_ADAPT_B_MAX60[7:0]	= r_SMAP_ADAPT_B_MAX60[7:0];
assign o_SMAP_ADAPT_B_MAX61[7:0]	= r_SMAP_ADAPT_B_MAX61[7:0];
assign o_SMAP_ADAPT_B_MAX62[7:0]	= r_SMAP_ADAPT_B_MAX62[7:0];
assign o_SMAP_ADAPT_B_MAX63[7:0]	= r_SMAP_ADAPT_B_MAX63[7:0];


// SPA_SMAP_ADAPT_B_MAX7_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_SMAP_ADAPT_B_MAX70[7:0]	<= 8`h8C;
		r_SMAP_ADAPT_B_MAX71[7:0]	<= 8`h8C;
		r_SMAP_ADAPT_B_MAX72[7:0]	<= 8`h8C;
		r_SMAP_ADAPT_B_MAX73[7:0]	<= 8`h8C;
	end
	else if (w_addr0d2c_wr) begin
		r_SMAP_ADAPT_B_MAX70[7:0]	<= i_PWDATA[7:0];
		r_SMAP_ADAPT_B_MAX71[7:0]	<= i_PWDATA[15:8];
		r_SMAP_ADAPT_B_MAX72[7:0]	<= i_PWDATA[23:16];
		r_SMAP_ADAPT_B_MAX73[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_SMAP_ADAPT_B_MAX70[7:0]	<= r_SMAP_ADAPT_B_MAX70[7:0];
		r_SMAP_ADAPT_B_MAX71[7:0]	<= r_SMAP_ADAPT_B_MAX71[7:0];
		r_SMAP_ADAPT_B_MAX72[7:0]	<= r_SMAP_ADAPT_B_MAX72[7:0];
		r_SMAP_ADAPT_B_MAX73[7:0]	<= r_SMAP_ADAPT_B_MAX73[7:0];
	end
end

// output assign for SPA_SMAP_ADAPT_B_MAX7_REG
assign o_SMAP_ADAPT_B_MAX70[7:0]	= r_SMAP_ADAPT_B_MAX70[7:0];
assign o_SMAP_ADAPT_B_MAX71[7:0]	= r_SMAP_ADAPT_B_MAX71[7:0];
assign o_SMAP_ADAPT_B_MAX72[7:0]	= r_SMAP_ADAPT_B_MAX72[7:0];
assign o_SMAP_ADAPT_B_MAX73[7:0]	= r_SMAP_ADAPT_B_MAX73[7:0];


// SPA_SMAP_ADAPT_B_MIN0_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_SMAP_ADAPT_B_MIN00[7:0]	<= 8`h0;
		r_SMAP_ADAPT_B_MIN01[7:0]	<= 8`h0;
		r_SMAP_ADAPT_B_MIN02[7:0]	<= 8`h0;
		r_SMAP_ADAPT_B_MIN03[7:0]	<= 8`h0;
	end
	else if (w_addr0d30_wr) begin
		r_SMAP_ADAPT_B_MIN00[7:0]	<= i_PWDATA[7:0];
		r_SMAP_ADAPT_B_MIN01[7:0]	<= i_PWDATA[15:8];
		r_SMAP_ADAPT_B_MIN02[7:0]	<= i_PWDATA[23:16];
		r_SMAP_ADAPT_B_MIN03[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_SMAP_ADAPT_B_MIN00[7:0]	<= r_SMAP_ADAPT_B_MIN00[7:0];
		r_SMAP_ADAPT_B_MIN01[7:0]	<= r_SMAP_ADAPT_B_MIN01[7:0];
		r_SMAP_ADAPT_B_MIN02[7:0]	<= r_SMAP_ADAPT_B_MIN02[7:0];
		r_SMAP_ADAPT_B_MIN03[7:0]	<= r_SMAP_ADAPT_B_MIN03[7:0];
	end
end

// output assign for SPA_SMAP_ADAPT_B_MIN0_REG
assign o_SMAP_ADAPT_B_MIN00[7:0]	= r_SMAP_ADAPT_B_MIN00[7:0];
assign o_SMAP_ADAPT_B_MIN01[7:0]	= r_SMAP_ADAPT_B_MIN01[7:0];
assign o_SMAP_ADAPT_B_MIN02[7:0]	= r_SMAP_ADAPT_B_MIN02[7:0];
assign o_SMAP_ADAPT_B_MIN03[7:0]	= r_SMAP_ADAPT_B_MIN03[7:0];


// SPA_SMAP_ADAPT_B_MIN1_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_SMAP_ADAPT_B_MIN10[7:0]	<= 8`h0;
		r_SMAP_ADAPT_B_MIN11[7:0]	<= 8`h0;
		r_SMAP_ADAPT_B_MIN12[7:0]	<= 8`h0;
		r_SMAP_ADAPT_B_MIN13[7:0]	<= 8`h0;
	end
	else if (w_addr0d34_wr) begin
		r_SMAP_ADAPT_B_MIN10[7:0]	<= i_PWDATA[7:0];
		r_SMAP_ADAPT_B_MIN11[7:0]	<= i_PWDATA[15:8];
		r_SMAP_ADAPT_B_MIN12[7:0]	<= i_PWDATA[23:16];
		r_SMAP_ADAPT_B_MIN13[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_SMAP_ADAPT_B_MIN10[7:0]	<= r_SMAP_ADAPT_B_MIN10[7:0];
		r_SMAP_ADAPT_B_MIN11[7:0]	<= r_SMAP_ADAPT_B_MIN11[7:0];
		r_SMAP_ADAPT_B_MIN12[7:0]	<= r_SMAP_ADAPT_B_MIN12[7:0];
		r_SMAP_ADAPT_B_MIN13[7:0]	<= r_SMAP_ADAPT_B_MIN13[7:0];
	end
end

// output assign for SPA_SMAP_ADAPT_B_MIN1_REG
assign o_SMAP_ADAPT_B_MIN10[7:0]	= r_SMAP_ADAPT_B_MIN10[7:0];
assign o_SMAP_ADAPT_B_MIN11[7:0]	= r_SMAP_ADAPT_B_MIN11[7:0];
assign o_SMAP_ADAPT_B_MIN12[7:0]	= r_SMAP_ADAPT_B_MIN12[7:0];
assign o_SMAP_ADAPT_B_MIN13[7:0]	= r_SMAP_ADAPT_B_MIN13[7:0];


// SPA_SMAP_ADAPT_B_MIN2_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_SMAP_ADAPT_B_MIN20[7:0]	<= 8`h0;
		r_SMAP_ADAPT_B_MIN21[7:0]	<= 8`h0;
		r_SMAP_ADAPT_B_MIN22[7:0]	<= 8`h0;
		r_SMAP_ADAPT_B_MIN23[7:0]	<= 8`h0;
	end
	else if (w_addr0d38_wr) begin
		r_SMAP_ADAPT_B_MIN20[7:0]	<= i_PWDATA[7:0];
		r_SMAP_ADAPT_B_MIN21[7:0]	<= i_PWDATA[15:8];
		r_SMAP_ADAPT_B_MIN22[7:0]	<= i_PWDATA[23:16];
		r_SMAP_ADAPT_B_MIN23[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_SMAP_ADAPT_B_MIN20[7:0]	<= r_SMAP_ADAPT_B_MIN20[7:0];
		r_SMAP_ADAPT_B_MIN21[7:0]	<= r_SMAP_ADAPT_B_MIN21[7:0];
		r_SMAP_ADAPT_B_MIN22[7:0]	<= r_SMAP_ADAPT_B_MIN22[7:0];
		r_SMAP_ADAPT_B_MIN23[7:0]	<= r_SMAP_ADAPT_B_MIN23[7:0];
	end
end

// output assign for SPA_SMAP_ADAPT_B_MIN2_REG
assign o_SMAP_ADAPT_B_MIN20[7:0]	= r_SMAP_ADAPT_B_MIN20[7:0];
assign o_SMAP_ADAPT_B_MIN21[7:0]	= r_SMAP_ADAPT_B_MIN21[7:0];
assign o_SMAP_ADAPT_B_MIN22[7:0]	= r_SMAP_ADAPT_B_MIN22[7:0];
assign o_SMAP_ADAPT_B_MIN23[7:0]	= r_SMAP_ADAPT_B_MIN23[7:0];


// SPA_SMAP_ADAPT_B_MIN3_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_SMAP_ADAPT_B_MIN30[7:0]	<= 8`h0;
		r_SMAP_ADAPT_B_MIN31[7:0]	<= 8`h0;
		r_SMAP_ADAPT_B_MIN32[7:0]	<= 8`h0;
		r_SMAP_ADAPT_B_MIN33[7:0]	<= 8`h0;
	end
	else if (w_addr0d3c_wr) begin
		r_SMAP_ADAPT_B_MIN30[7:0]	<= i_PWDATA[7:0];
		r_SMAP_ADAPT_B_MIN31[7:0]	<= i_PWDATA[15:8];
		r_SMAP_ADAPT_B_MIN32[7:0]	<= i_PWDATA[23:16];
		r_SMAP_ADAPT_B_MIN33[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_SMAP_ADAPT_B_MIN30[7:0]	<= r_SMAP_ADAPT_B_MIN30[7:0];
		r_SMAP_ADAPT_B_MIN31[7:0]	<= r_SMAP_ADAPT_B_MIN31[7:0];
		r_SMAP_ADAPT_B_MIN32[7:0]	<= r_SMAP_ADAPT_B_MIN32[7:0];
		r_SMAP_ADAPT_B_MIN33[7:0]	<= r_SMAP_ADAPT_B_MIN33[7:0];
	end
end

// output assign for SPA_SMAP_ADAPT_B_MIN3_REG
assign o_SMAP_ADAPT_B_MIN30[7:0]	= r_SMAP_ADAPT_B_MIN30[7:0];
assign o_SMAP_ADAPT_B_MIN31[7:0]	= r_SMAP_ADAPT_B_MIN31[7:0];
assign o_SMAP_ADAPT_B_MIN32[7:0]	= r_SMAP_ADAPT_B_MIN32[7:0];
assign o_SMAP_ADAPT_B_MIN33[7:0]	= r_SMAP_ADAPT_B_MIN33[7:0];


// SPA_SMAP_ADAPT_B_MIN4_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_SMAP_ADAPT_B_MIN40[7:0]	<= 8`h0;
		r_SMAP_ADAPT_B_MIN41[7:0]	<= 8`h0;
		r_SMAP_ADAPT_B_MIN42[7:0]	<= 8`h0;
		r_SMAP_ADAPT_B_MIN43[7:0]	<= 8`h0;
	end
	else if (w_addr0d40_wr) begin
		r_SMAP_ADAPT_B_MIN40[7:0]	<= i_PWDATA[7:0];
		r_SMAP_ADAPT_B_MIN41[7:0]	<= i_PWDATA[15:8];
		r_SMAP_ADAPT_B_MIN42[7:0]	<= i_PWDATA[23:16];
		r_SMAP_ADAPT_B_MIN43[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_SMAP_ADAPT_B_MIN40[7:0]	<= r_SMAP_ADAPT_B_MIN40[7:0];
		r_SMAP_ADAPT_B_MIN41[7:0]	<= r_SMAP_ADAPT_B_MIN41[7:0];
		r_SMAP_ADAPT_B_MIN42[7:0]	<= r_SMAP_ADAPT_B_MIN42[7:0];
		r_SMAP_ADAPT_B_MIN43[7:0]	<= r_SMAP_ADAPT_B_MIN43[7:0];
	end
end

// output assign for SPA_SMAP_ADAPT_B_MIN4_REG
assign o_SMAP_ADAPT_B_MIN40[7:0]	= r_SMAP_ADAPT_B_MIN40[7:0];
assign o_SMAP_ADAPT_B_MIN41[7:0]	= r_SMAP_ADAPT_B_MIN41[7:0];
assign o_SMAP_ADAPT_B_MIN42[7:0]	= r_SMAP_ADAPT_B_MIN42[7:0];
assign o_SMAP_ADAPT_B_MIN43[7:0]	= r_SMAP_ADAPT_B_MIN43[7:0];


// SPA_SMAP_ADAPT_B_MIN5_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_SMAP_ADAPT_B_MIN50[7:0]	<= 8`h0;
		r_SMAP_ADAPT_B_MIN51[7:0]	<= 8`h0;
		r_SMAP_ADAPT_B_MIN52[7:0]	<= 8`h0;
		r_SMAP_ADAPT_B_MIN53[7:0]	<= 8`h0;
	end
	else if (w_addr0d44_wr) begin
		r_SMAP_ADAPT_B_MIN50[7:0]	<= i_PWDATA[7:0];
		r_SMAP_ADAPT_B_MIN51[7:0]	<= i_PWDATA[15:8];
		r_SMAP_ADAPT_B_MIN52[7:0]	<= i_PWDATA[23:16];
		r_SMAP_ADAPT_B_MIN53[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_SMAP_ADAPT_B_MIN50[7:0]	<= r_SMAP_ADAPT_B_MIN50[7:0];
		r_SMAP_ADAPT_B_MIN51[7:0]	<= r_SMAP_ADAPT_B_MIN51[7:0];
		r_SMAP_ADAPT_B_MIN52[7:0]	<= r_SMAP_ADAPT_B_MIN52[7:0];
		r_SMAP_ADAPT_B_MIN53[7:0]	<= r_SMAP_ADAPT_B_MIN53[7:0];
	end
end

// output assign for SPA_SMAP_ADAPT_B_MIN5_REG
assign o_SMAP_ADAPT_B_MIN50[7:0]	= r_SMAP_ADAPT_B_MIN50[7:0];
assign o_SMAP_ADAPT_B_MIN51[7:0]	= r_SMAP_ADAPT_B_MIN51[7:0];
assign o_SMAP_ADAPT_B_MIN52[7:0]	= r_SMAP_ADAPT_B_MIN52[7:0];
assign o_SMAP_ADAPT_B_MIN53[7:0]	= r_SMAP_ADAPT_B_MIN53[7:0];


// SPA_SMAP_ADAPT_B_MIN6_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_SMAP_ADAPT_B_MIN60[7:0]	<= 8`h0;
		r_SMAP_ADAPT_B_MIN61[7:0]	<= 8`h0;
		r_SMAP_ADAPT_B_MIN62[7:0]	<= 8`h0;
		r_SMAP_ADAPT_B_MIN63[7:0]	<= 8`h0;
	end
	else if (w_addr0d48_wr) begin
		r_SMAP_ADAPT_B_MIN60[7:0]	<= i_PWDATA[7:0];
		r_SMAP_ADAPT_B_MIN61[7:0]	<= i_PWDATA[15:8];
		r_SMAP_ADAPT_B_MIN62[7:0]	<= i_PWDATA[23:16];
		r_SMAP_ADAPT_B_MIN63[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_SMAP_ADAPT_B_MIN60[7:0]	<= r_SMAP_ADAPT_B_MIN60[7:0];
		r_SMAP_ADAPT_B_MIN61[7:0]	<= r_SMAP_ADAPT_B_MIN61[7:0];
		r_SMAP_ADAPT_B_MIN62[7:0]	<= r_SMAP_ADAPT_B_MIN62[7:0];
		r_SMAP_ADAPT_B_MIN63[7:0]	<= r_SMAP_ADAPT_B_MIN63[7:0];
	end
end

// output assign for SPA_SMAP_ADAPT_B_MIN6_REG
assign o_SMAP_ADAPT_B_MIN60[7:0]	= r_SMAP_ADAPT_B_MIN60[7:0];
assign o_SMAP_ADAPT_B_MIN61[7:0]	= r_SMAP_ADAPT_B_MIN61[7:0];
assign o_SMAP_ADAPT_B_MIN62[7:0]	= r_SMAP_ADAPT_B_MIN62[7:0];
assign o_SMAP_ADAPT_B_MIN63[7:0]	= r_SMAP_ADAPT_B_MIN63[7:0];


// SPA_SMAP_ADAPT_B_MIN7_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_SMAP_ADAPT_B_MIN70[7:0]	<= 8`h0;
		r_SMAP_ADAPT_B_MIN71[7:0]	<= 8`h0;
		r_SMAP_ADAPT_B_MIN72[7:0]	<= 8`h0;
		r_SMAP_ADAPT_B_MIN73[7:0]	<= 8`h0;
	end
	else if (w_addr0d4c_wr) begin
		r_SMAP_ADAPT_B_MIN70[7:0]	<= i_PWDATA[7:0];
		r_SMAP_ADAPT_B_MIN71[7:0]	<= i_PWDATA[15:8];
		r_SMAP_ADAPT_B_MIN72[7:0]	<= i_PWDATA[23:16];
		r_SMAP_ADAPT_B_MIN73[7:0]	<= i_PWDATA[31:24];
	end
	else begin
		r_SMAP_ADAPT_B_MIN70[7:0]	<= r_SMAP_ADAPT_B_MIN70[7:0];
		r_SMAP_ADAPT_B_MIN71[7:0]	<= r_SMAP_ADAPT_B_MIN71[7:0];
		r_SMAP_ADAPT_B_MIN72[7:0]	<= r_SMAP_ADAPT_B_MIN72[7:0];
		r_SMAP_ADAPT_B_MIN73[7:0]	<= r_SMAP_ADAPT_B_MIN73[7:0];
	end
end

// output assign for SPA_SMAP_ADAPT_B_MIN7_REG
assign o_SMAP_ADAPT_B_MIN70[7:0]	= r_SMAP_ADAPT_B_MIN70[7:0];
assign o_SMAP_ADAPT_B_MIN71[7:0]	= r_SMAP_ADAPT_B_MIN71[7:0];
assign o_SMAP_ADAPT_B_MIN72[7:0]	= r_SMAP_ADAPT_B_MIN72[7:0];
assign o_SMAP_ADAPT_B_MIN73[7:0]	= r_SMAP_ADAPT_B_MIN73[7:0];


// SPA_TBL_ADDR_00_UP_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_TBL_ADDR_00_UP[7:0]	<= 8`h0;
	end
	else if (w_addr108c_wr) begin
		r_TBL_ADDR_00_UP[7:0]	<= i_PWDATA[7:0];
	end
	else begin
		r_TBL_ADDR_00_UP[7:0]	<= r_TBL_ADDR_00_UP[7:0];
	end
end

// output assign for SPA_TBL_ADDR_00_UP_REG
assign o_TBL_ADDR_00_UP[7:0]	= r_TBL_ADDR_00_UP[7:0];


// SPA_TBL_ADDR_01_UP_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_TBL_ADDR_01_UP[7:0]	<= 8`h0;
	end
	else if (w_addr1090_wr) begin
		r_TBL_ADDR_01_UP[7:0]	<= i_PWDATA[7:0];
	end
	else begin
		r_TBL_ADDR_01_UP[7:0]	<= r_TBL_ADDR_01_UP[7:0];
	end
end

// output assign for SPA_TBL_ADDR_01_UP_REG
assign o_TBL_ADDR_01_UP[7:0]	= r_TBL_ADDR_01_UP[7:0];


// SPA_TBL_ADDR_02_UP_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_TBL_ADDR_02_UP[7:0]	<= 8`h0;
	end
	else if (w_addr1094_wr) begin
		r_TBL_ADDR_02_UP[7:0]	<= i_PWDATA[7:0];
	end
	else begin
		r_TBL_ADDR_02_UP[7:0]	<= r_TBL_ADDR_02_UP[7:0];
	end
end

// output assign for SPA_TBL_ADDR_02_UP_REG
assign o_TBL_ADDR_02_UP[7:0]	= r_TBL_ADDR_02_UP[7:0];


// SPA_TBL_ADDR_03_UP_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_TBL_ADDR_03_UP[7:0]	<= 8`h0;
	end
	else if (w_addr1098_wr) begin
		r_TBL_ADDR_03_UP[7:0]	<= i_PWDATA[7:0];
	end
	else begin
		r_TBL_ADDR_03_UP[7:0]	<= r_TBL_ADDR_03_UP[7:0];
	end
end

// output assign for SPA_TBL_ADDR_03_UP_REG
assign o_TBL_ADDR_03_UP[7:0]	= r_TBL_ADDR_03_UP[7:0];


// SPA_TBL_ADDR_04_UP_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_TBL_ADDR_04_UP[7:0]	<= 8`h0;
	end
	else if (w_addr109c_wr) begin
		r_TBL_ADDR_04_UP[7:0]	<= i_PWDATA[7:0];
	end
	else begin
		r_TBL_ADDR_04_UP[7:0]	<= r_TBL_ADDR_04_UP[7:0];
	end
end

// output assign for SPA_TBL_ADDR_04_UP_REG
assign o_TBL_ADDR_04_UP[7:0]	= r_TBL_ADDR_04_UP[7:0];


// SPA_TBL_ADDR_05_UP_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_TBL_ADDR_05_UP[7:0]	<= 8`h0;
	end
	else if (w_addr10a0_wr) begin
		r_TBL_ADDR_05_UP[7:0]	<= i_PWDATA[7:0];
	end
	else begin
		r_TBL_ADDR_05_UP[7:0]	<= r_TBL_ADDR_05_UP[7:0];
	end
end

// output assign for SPA_TBL_ADDR_05_UP_REG
assign o_TBL_ADDR_05_UP[7:0]	= r_TBL_ADDR_05_UP[7:0];


// SPA_TBL_ADDR_06_UP_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_TBL_ADDR_06_UP[7:0]	<= 8`h0;
	end
	else if (w_addr10a4_wr) begin
		r_TBL_ADDR_06_UP[7:0]	<= i_PWDATA[7:0];
	end
	else begin
		r_TBL_ADDR_06_UP[7:0]	<= r_TBL_ADDR_06_UP[7:0];
	end
end

// output assign for SPA_TBL_ADDR_06_UP_REG
assign o_TBL_ADDR_06_UP[7:0]	= r_TBL_ADDR_06_UP[7:0];


// SPA_TBL_ADDR_07_UP_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_TBL_ADDR_07_UP[7:0]	<= 8`h0;
	end
	else if (w_addr10a8_wr) begin
		r_TBL_ADDR_07_UP[7:0]	<= i_PWDATA[7:0];
	end
	else begin
		r_TBL_ADDR_07_UP[7:0]	<= r_TBL_ADDR_07_UP[7:0];
	end
end

// output assign for SPA_TBL_ADDR_07_UP_REG
assign o_TBL_ADDR_07_UP[7:0]	= r_TBL_ADDR_07_UP[7:0];


// SPA_TBL_ADDR_08_UP_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_TBL_ADDR_08_UP[7:0]	<= 8`h0;
	end
	else if (w_addr10ac_wr) begin
		r_TBL_ADDR_08_UP[7:0]	<= i_PWDATA[7:0];
	end
	else begin
		r_TBL_ADDR_08_UP[7:0]	<= r_TBL_ADDR_08_UP[7:0];
	end
end

// output assign for SPA_TBL_ADDR_08_UP_REG
assign o_TBL_ADDR_08_UP[7:0]	= r_TBL_ADDR_08_UP[7:0];


// SPA_TBL_ADDR_09_UP_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_TBL_ADDR_09_UP[7:0]	<= 8`h0;
	end
	else if (w_addr10b0_wr) begin
		r_TBL_ADDR_09_UP[7:0]	<= i_PWDATA[7:0];
	end
	else begin
		r_TBL_ADDR_09_UP[7:0]	<= r_TBL_ADDR_09_UP[7:0];
	end
end

// output assign for SPA_TBL_ADDR_09_UP_REG
assign o_TBL_ADDR_09_UP[7:0]	= r_TBL_ADDR_09_UP[7:0];


// SPA_TBL_ADDR_10_UP_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_TBL_ADDR_10_UP[7:0]	<= 8`h0;
	end
	else if (w_addr10b4_wr) begin
		r_TBL_ADDR_10_UP[7:0]	<= i_PWDATA[7:0];
	end
	else begin
		r_TBL_ADDR_10_UP[7:0]	<= r_TBL_ADDR_10_UP[7:0];
	end
end

// output assign for SPA_TBL_ADDR_10_UP_REG
assign o_TBL_ADDR_10_UP[7:0]	= r_TBL_ADDR_10_UP[7:0];


// SPA_TBL_ADDR_11_UP_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_TBL_ADDR_11_UP[7:0]	<= 8`h0;
	end
	else if (w_addr10b8_wr) begin
		r_TBL_ADDR_11_UP[7:0]	<= i_PWDATA[7:0];
	end
	else begin
		r_TBL_ADDR_11_UP[7:0]	<= r_TBL_ADDR_11_UP[7:0];
	end
end

// output assign for SPA_TBL_ADDR_11_UP_REG
assign o_TBL_ADDR_11_UP[7:0]	= r_TBL_ADDR_11_UP[7:0];


// SPA_TBL_ADDR_12_UP_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_TBL_ADDR_12_UP[7:0]	<= 8`h0;
	end
	else if (w_addr10bc_wr) begin
		r_TBL_ADDR_12_UP[7:0]	<= i_PWDATA[7:0];
	end
	else begin
		r_TBL_ADDR_12_UP[7:0]	<= r_TBL_ADDR_12_UP[7:0];
	end
end

// output assign for SPA_TBL_ADDR_12_UP_REG
assign o_TBL_ADDR_12_UP[7:0]	= r_TBL_ADDR_12_UP[7:0];


// SPA_TBL_ADDR_13_UP_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_TBL_ADDR_13_UP[7:0]	<= 8`h0;
	end
	else if (w_addr10c0_wr) begin
		r_TBL_ADDR_13_UP[7:0]	<= i_PWDATA[7:0];
	end
	else begin
		r_TBL_ADDR_13_UP[7:0]	<= r_TBL_ADDR_13_UP[7:0];
	end
end

// output assign for SPA_TBL_ADDR_13_UP_REG
assign o_TBL_ADDR_13_UP[7:0]	= r_TBL_ADDR_13_UP[7:0];


// SPA_TBL_ADDR_14_UP_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_TBL_ADDR_14_UP[7:0]	<= 8`h0;
	end
	else if (w_addr10c4_wr) begin
		r_TBL_ADDR_14_UP[7:0]	<= i_PWDATA[7:0];
	end
	else begin
		r_TBL_ADDR_14_UP[7:0]	<= r_TBL_ADDR_14_UP[7:0];
	end
end

// output assign for SPA_TBL_ADDR_14_UP_REG
assign o_TBL_ADDR_14_UP[7:0]	= r_TBL_ADDR_14_UP[7:0];


// SPA_TBL_ADDR_15_UP_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_TBL_ADDR_15_UP[7:0]	<= 8`h0;
	end
	else if (w_addr10c8_wr) begin
		r_TBL_ADDR_15_UP[7:0]	<= i_PWDATA[7:0];
	end
	else begin
		r_TBL_ADDR_15_UP[7:0]	<= r_TBL_ADDR_15_UP[7:0];
	end
end

// output assign for SPA_TBL_ADDR_15_UP_REG
assign o_TBL_ADDR_15_UP[7:0]	= r_TBL_ADDR_15_UP[7:0];


// SPA_TBL_ADDR_16_UP_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_TBL_ADDR_16_UP[7:0]	<= 8`h0;
	end
	else if (w_addr10cc_wr) begin
		r_TBL_ADDR_16_UP[7:0]	<= i_PWDATA[7:0];
	end
	else begin
		r_TBL_ADDR_16_UP[7:0]	<= r_TBL_ADDR_16_UP[7:0];
	end
end

// output assign for SPA_TBL_ADDR_16_UP_REG
assign o_TBL_ADDR_16_UP[7:0]	= r_TBL_ADDR_16_UP[7:0];


// SPA_TBL_ADDR_17_UP_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_TBL_ADDR_17_UP[7:0]	<= 8`h0;
	end
	else if (w_addr10d0_wr) begin
		r_TBL_ADDR_17_UP[7:0]	<= i_PWDATA[7:0];
	end
	else begin
		r_TBL_ADDR_17_UP[7:0]	<= r_TBL_ADDR_17_UP[7:0];
	end
end

// output assign for SPA_TBL_ADDR_17_UP_REG
assign o_TBL_ADDR_17_UP[7:0]	= r_TBL_ADDR_17_UP[7:0];


// SPA_TBL_ADDR_18_UP_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_TBL_ADDR_18_UP[7:0]	<= 8`h0;
	end
	else if (w_addr10d4_wr) begin
		r_TBL_ADDR_18_UP[7:0]	<= i_PWDATA[7:0];
	end
	else begin
		r_TBL_ADDR_18_UP[7:0]	<= r_TBL_ADDR_18_UP[7:0];
	end
end

// output assign for SPA_TBL_ADDR_18_UP_REG
assign o_TBL_ADDR_18_UP[7:0]	= r_TBL_ADDR_18_UP[7:0];


// SPA_TBL_ADDR_19_UP_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_TBL_ADDR_19_UP[7:0]	<= 8`h0;
	end
	else if (w_addr10d8_wr) begin
		r_TBL_ADDR_19_UP[7:0]	<= i_PWDATA[7:0];
	end
	else begin
		r_TBL_ADDR_19_UP[7:0]	<= r_TBL_ADDR_19_UP[7:0];
	end
end

// output assign for SPA_TBL_ADDR_19_UP_REG
assign o_TBL_ADDR_19_UP[7:0]	= r_TBL_ADDR_19_UP[7:0];


// SPA_TBL_ADDR_20_UP_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_TBL_ADDR_20_UP[7:0]	<= 8`h0;
	end
	else if (w_addr10dc_wr) begin
		r_TBL_ADDR_20_UP[7:0]	<= i_PWDATA[7:0];
	end
	else begin
		r_TBL_ADDR_20_UP[7:0]	<= r_TBL_ADDR_20_UP[7:0];
	end
end

// output assign for SPA_TBL_ADDR_20_UP_REG
assign o_TBL_ADDR_20_UP[7:0]	= r_TBL_ADDR_20_UP[7:0];


// SPA_TBL_ADDR_21_UP_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_TBL_ADDR_21_UP[7:0]	<= 8`h0;
	end
	else if (w_addr10e0_wr) begin
		r_TBL_ADDR_21_UP[7:0]	<= i_PWDATA[7:0];
	end
	else begin
		r_TBL_ADDR_21_UP[7:0]	<= r_TBL_ADDR_21_UP[7:0];
	end
end

// output assign for SPA_TBL_ADDR_21_UP_REG
assign o_TBL_ADDR_21_UP[7:0]	= r_TBL_ADDR_21_UP[7:0];


// SPA_TBL_ADDR_22_UP_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_TBL_ADDR_22_UP[7:0]	<= 8`h0;
	end
	else if (w_addr10e4_wr) begin
		r_TBL_ADDR_22_UP[7:0]	<= i_PWDATA[7:0];
	end
	else begin
		r_TBL_ADDR_22_UP[7:0]	<= r_TBL_ADDR_22_UP[7:0];
	end
end

// output assign for SPA_TBL_ADDR_22_UP_REG
assign o_TBL_ADDR_22_UP[7:0]	= r_TBL_ADDR_22_UP[7:0];


// SPA_TBL_ADDR_23_UP_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_TBL_ADDR_23_UP[7:0]	<= 8`h0;
	end
	else if (w_addr10e8_wr) begin
		r_TBL_ADDR_23_UP[7:0]	<= i_PWDATA[7:0];
	end
	else begin
		r_TBL_ADDR_23_UP[7:0]	<= r_TBL_ADDR_23_UP[7:0];
	end
end

// output assign for SPA_TBL_ADDR_23_UP_REG
assign o_TBL_ADDR_23_UP[7:0]	= r_TBL_ADDR_23_UP[7:0];


// SPA_TBL_ADDR_24_UP_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_TBL_ADDR_24_UP[7:0]	<= 8`h0;
	end
	else if (w_addr10ec_wr) begin
		r_TBL_ADDR_24_UP[7:0]	<= i_PWDATA[7:0];
	end
	else begin
		r_TBL_ADDR_24_UP[7:0]	<= r_TBL_ADDR_24_UP[7:0];
	end
end

// output assign for SPA_TBL_ADDR_24_UP_REG
assign o_TBL_ADDR_24_UP[7:0]	= r_TBL_ADDR_24_UP[7:0];


// SPA_RX_CH0_PREV_ADDR_UP_REG register

// output assign for SPA_RX_CH0_PREV_ADDR_UP_REG
assign o_RX_CH0_PREV_ADDR_UP[7:0]	= 8'h0 /* add logic */ ;


// SPA_RX_CH1_PREV_ADDR_UP_REG register

// output assign for SPA_RX_CH1_PREV_ADDR_UP_REG
assign o_RX_CH1_PREV_ADDR_UP[7:0]	= 8'h0 /* add logic */ ;


// SPA_RX_CH2_PREV_ADDR_UP_REG register

// output assign for SPA_RX_CH2_PREV_ADDR_UP_REG
assign o_RX_CH2_PREV_ADDR_UP[7:0]	= 8'h0 /* add logic */ ;


// SPA_RX_CH0_CURR_ADDR_UP_REG register

// output assign for SPA_RX_CH0_CURR_ADDR_UP_REG
assign o_RX_CH0_CURR_ADDR_UP[7:0]	= 8'h0 /* add logic */ ;


// SPA_RX_CH1_CURR_ADDR_UP_REG register

// output assign for SPA_RX_CH1_CURR_ADDR_UP_REG
assign o_RX_CH1_CURR_ADDR_UP[7:0]	= 8'h0 /* add logic */ ;


// SPA_RX_CH2_CURR_ADDR_UP_REG register

// output assign for SPA_RX_CH2_CURR_ADDR_UP_REG
assign o_RX_CH2_CURR_ADDR_UP[7:0]	= 8'h0 /* add logic */ ;


// SPA_RX_CH0_START_ADDR_UP_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_RX_CH0_START_ADDR_UP[7:0]	<= 8`h0;
	end
	else if (w_addr1164_wr) begin
		r_RX_CH0_START_ADDR_UP[7:0]	<= i_PWDATA[7:0];
	end
	else begin
		r_RX_CH0_START_ADDR_UP[7:0]	<= r_RX_CH0_START_ADDR_UP[7:0];
	end
end

// output assign for SPA_RX_CH0_START_ADDR_UP_REG
assign o_RX_CH0_START_ADDR_UP[7:0]	= r_RX_CH0_START_ADDR_UP[7:0];


// SPA_RX_CH1_START_ADDR_UP_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_RX_CH1_START_ADDR_UP[7:0]	<= 8`h0;
	end
	else if (w_addr1168_wr) begin
		r_RX_CH1_START_ADDR_UP[7:0]	<= i_PWDATA[7:0];
	end
	else begin
		r_RX_CH1_START_ADDR_UP[7:0]	<= r_RX_CH1_START_ADDR_UP[7:0];
	end
end

// output assign for SPA_RX_CH1_START_ADDR_UP_REG
assign o_RX_CH1_START_ADDR_UP[7:0]	= r_RX_CH1_START_ADDR_UP[7:0];


// SPA_RX_CH2_START_ADDR_UP_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_RX_CH2_START_ADDR_UP[7:0]	<= 8`h0;
	end
	else if (w_addr116c_wr) begin
		r_RX_CH2_START_ADDR_UP[7:0]	<= i_PWDATA[7:0];
	end
	else begin
		r_RX_CH2_START_ADDR_UP[7:0]	<= r_RX_CH2_START_ADDR_UP[7:0];
	end
end

// output assign for SPA_RX_CH2_START_ADDR_UP_REG
assign o_RX_CH2_START_ADDR_UP[7:0]	= r_RX_CH2_START_ADDR_UP[7:0];


// SPA_RX_CUR_ADDR_CH0_UP_REG register

// output assign for SPA_RX_CUR_ADDR_CH0_UP_REG
assign o_RX_CUR_ADDR_CH0_UP[7:0]	= 8'h0 /* add logic */ ;


// SPA_RX_CUR_ADDR_CH1_UP_REG register

// output assign for SPA_RX_CUR_ADDR_CH1_UP_REG
assign o_RX_CUR_ADDR_CH1_UP[7:0]	= 8'h0 /* add logic */ ;


// SPA_RX_CUR_ADDR_CH2_UP_REG register

// output assign for SPA_RX_CUR_ADDR_CH2_UP_REG
assign o_RX_CUR_ADDR_CH2_UP[7:0]	= 8'h0 /* add logic */ ;


// SPA_TX_CH0_START_ADDR_UP_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_TX_CH0_START_ADDR_UP[7:0]	<= 8`h0;
	end
	else if (w_addr11d4_wr) begin
		r_TX_CH0_START_ADDR_UP[7:0]	<= i_PWDATA[7:0];
	end
	else begin
		r_TX_CH0_START_ADDR_UP[7:0]	<= r_TX_CH0_START_ADDR_UP[7:0];
	end
end

// output assign for SPA_TX_CH0_START_ADDR_UP_REG
assign o_TX_CH0_START_ADDR_UP[7:0]	= r_TX_CH0_START_ADDR_UP[7:0];


// SPA_TX_CH1_START_ADDR_UP_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_TX_CH1_START_ADDR_UP[7:0]	<= 8`h0;
	end
	else if (w_addr11d8_wr) begin
		r_TX_CH1_START_ADDR_UP[7:0]	<= i_PWDATA[7:0];
	end
	else begin
		r_TX_CH1_START_ADDR_UP[7:0]	<= r_TX_CH1_START_ADDR_UP[7:0];
	end
end

// output assign for SPA_TX_CH1_START_ADDR_UP_REG
assign o_TX_CH1_START_ADDR_UP[7:0]	= r_TX_CH1_START_ADDR_UP[7:0];


// SPA_TX_CH2_START_ADDR_UP_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_TX_CH2_START_ADDR_UP[7:0]	<= 8`h0;
	end
	else if (w_addr11dc_wr) begin
		r_TX_CH2_START_ADDR_UP[7:0]	<= i_PWDATA[7:0];
	end
	else begin
		r_TX_CH2_START_ADDR_UP[7:0]	<= r_TX_CH2_START_ADDR_UP[7:0];
	end
end

// output assign for SPA_TX_CH2_START_ADDR_UP_REG
assign o_TX_CH2_START_ADDR_UP[7:0]	= r_TX_CH2_START_ADDR_UP[7:0];


// SPA_TX_ADDR_CH0_MAX_UP_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_TX_ADDR_CH0_MAX_UP[7:0]	<= 8`hFF;
	end
	else if (w_addr11f0_wr) begin
		r_TX_ADDR_CH0_MAX_UP[7:0]	<= i_PWDATA[7:0];
	end
	else begin
		r_TX_ADDR_CH0_MAX_UP[7:0]	<= r_TX_ADDR_CH0_MAX_UP[7:0];
	end
end

// output assign for SPA_TX_ADDR_CH0_MAX_UP_REG
assign o_TX_ADDR_CH0_MAX_UP[7:0]	= r_TX_ADDR_CH0_MAX_UP[7:0];


// SPA_TX_ADDR_CH0_MIN_UP_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_TX_ADDR_CH0_MIN_UP[7:0]	<= 8`h0;
	end
	else if (w_addr11f4_wr) begin
		r_TX_ADDR_CH0_MIN_UP[7:0]	<= i_PWDATA[7:0];
	end
	else begin
		r_TX_ADDR_CH0_MIN_UP[7:0]	<= r_TX_ADDR_CH0_MIN_UP[7:0];
	end
end

// output assign for SPA_TX_ADDR_CH0_MIN_UP_REG
assign o_TX_ADDR_CH0_MIN_UP[7:0]	= r_TX_ADDR_CH0_MIN_UP[7:0];


// SPA_TX_ADDR_CH1_MAX_UP_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_TX_ADDR_CH1_MAX_UP[7:0]	<= 8`hFF;
	end
	else if (w_addr11f8_wr) begin
		r_TX_ADDR_CH1_MAX_UP[7:0]	<= i_PWDATA[7:0];
	end
	else begin
		r_TX_ADDR_CH1_MAX_UP[7:0]	<= r_TX_ADDR_CH1_MAX_UP[7:0];
	end
end

// output assign for SPA_TX_ADDR_CH1_MAX_UP_REG
assign o_TX_ADDR_CH1_MAX_UP[7:0]	= r_TX_ADDR_CH1_MAX_UP[7:0];


// SPA_TX_ADDR_CH1_MIN_UP_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_TX_ADDR_CH1_MIN_UP[7:0]	<= 8`h0;
	end
	else if (w_addr11fc_wr) begin
		r_TX_ADDR_CH1_MIN_UP[7:0]	<= i_PWDATA[7:0];
	end
	else begin
		r_TX_ADDR_CH1_MIN_UP[7:0]	<= r_TX_ADDR_CH1_MIN_UP[7:0];
	end
end

// output assign for SPA_TX_ADDR_CH1_MIN_UP_REG
assign o_TX_ADDR_CH1_MIN_UP[7:0]	= r_TX_ADDR_CH1_MIN_UP[7:0];


// SPA_TX_ADDR_CH2_MAX_UP_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_TX_ADDR_CH2_MAX_UP[7:0]	<= 8`hFF;
	end
	else if (w_addr1200_wr) begin
		r_TX_ADDR_CH2_MAX_UP[7:0]	<= i_PWDATA[7:0];
	end
	else begin
		r_TX_ADDR_CH2_MAX_UP[7:0]	<= r_TX_ADDR_CH2_MAX_UP[7:0];
	end
end

// output assign for SPA_TX_ADDR_CH2_MAX_UP_REG
assign o_TX_ADDR_CH2_MAX_UP[7:0]	= r_TX_ADDR_CH2_MAX_UP[7:0];


// SPA_TX_ADDR_CH2_MIN_UP_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_TX_ADDR_CH2_MIN_UP[7:0]	<= 8`h0;
	end
	else if (w_addr1204_wr) begin
		r_TX_ADDR_CH2_MIN_UP[7:0]	<= i_PWDATA[7:0];
	end
	else begin
		r_TX_ADDR_CH2_MIN_UP[7:0]	<= r_TX_ADDR_CH2_MIN_UP[7:0];
	end
end

// output assign for SPA_TX_ADDR_CH2_MIN_UP_REG
assign o_TX_ADDR_CH2_MIN_UP[7:0]	= r_TX_ADDR_CH2_MIN_UP[7:0];


// SPA_TX_CH0_CUR_ADDR_UP_REG register

// output assign for SPA_TX_CH0_CUR_ADDR_UP_REG
assign o_TX_CH0_CUR_ADDR_UP[7:0]	= 8'h0 /* add logic */ ;


// SPA_TX_CH1_CUR_ADDR_UP_REG register

// output assign for SPA_TX_CH1_CUR_ADDR_UP_REG
assign o_TX_CH1_CUR_ADDR_UP[7:0]	= 8'h0 /* add logic */ ;


// SPA_TX_CH2_CUR_ADDR_UP_REG register

// output assign for SPA_TX_CH2_CUR_ADDR_UP_REG
assign o_TX_CH2_CUR_ADDR_UP[7:0]	= 8'h0 /* add logic */ ;


// SPA_ADAPT_DMA_ADDR_UP_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_ADAPT_ADDR_UP[7:0]	<= 8`h0;
	end
	else if (w_addr1284_wr) begin
		r_ADAPT_ADDR_UP[7:0]	<= i_PWDATA[7:0];
	end
	else begin
		r_ADAPT_ADDR_UP[7:0]	<= r_ADAPT_ADDR_UP[7:0];
	end
end

// output assign for SPA_ADAPT_DMA_ADDR_UP_REG
assign o_ADAPT_ADDR_UP[7:0]	= r_ADAPT_ADDR_UP[7:0];


// SPA_ADAPT_TX_ADDR_MAX_UP_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_ADAPT_TX_ADDR_MAX_UP[7:0]	<= 8`hFF;
	end
	else if (w_addr1290_wr) begin
		r_ADAPT_TX_ADDR_MAX_UP[7:0]	<= i_PWDATA[7:0];
	end
	else begin
		r_ADAPT_TX_ADDR_MAX_UP[7:0]	<= r_ADAPT_TX_ADDR_MAX_UP[7:0];
	end
end

// output assign for SPA_ADAPT_TX_ADDR_MAX_UP_REG
assign o_ADAPT_TX_ADDR_MAX_UP[7:0]	= r_ADAPT_TX_ADDR_MAX_UP[7:0];


// SPA_ADAPT_TX_ADDR_MIN_UP_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_ADAPT_TX_ADDR_MIN_UP[7:0]	<= 8`h0;
	end
	else if (w_addr1294_wr) begin
		r_ADAPT_TX_ADDR_MIN_UP[7:0]	<= i_PWDATA[7:0];
	end
	else begin
		r_ADAPT_TX_ADDR_MIN_UP[7:0]	<= r_ADAPT_TX_ADDR_MIN_UP[7:0];
	end
end

// output assign for SPA_ADAPT_TX_ADDR_MIN_UP_REG
assign o_ADAPT_TX_ADDR_MIN_UP[7:0]	= r_ADAPT_TX_ADDR_MIN_UP[7:0];


// SPA_ADAPT_TX_CUR_ADDR_UP_REG register

// output assign for SPA_ADAPT_TX_CUR_ADDR_UP_REG
assign o_ADAPT_TX_CUR_ADDR_UP[7:0]	= 8'h0 /* add logic */ ;


// SPA_SMAP_DMA_ADDR_UP_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_SMAP_ADDR_UP[7:0]	<= 8`h0;
	end
	else if (w_addr12c4_wr) begin
		r_SMAP_ADDR_UP[7:0]	<= i_PWDATA[7:0];
	end
	else begin
		r_SMAP_ADDR_UP[7:0]	<= r_SMAP_ADDR_UP[7:0];
	end
end

// output assign for SPA_SMAP_DMA_ADDR_UP_REG
assign o_SMAP_ADDR_UP[7:0]	= r_SMAP_ADDR_UP[7:0];


// SPA_SMAP_TX_ADDR_MAX_UP_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_SMAP_TX_ADDR_MAX_UP[7:0]	<= 8`hFF;
	end
	else if (w_addr12d0_wr) begin
		r_SMAP_TX_ADDR_MAX_UP[7:0]	<= i_PWDATA[7:0];
	end
	else begin
		r_SMAP_TX_ADDR_MAX_UP[7:0]	<= r_SMAP_TX_ADDR_MAX_UP[7:0];
	end
end

// output assign for SPA_SMAP_TX_ADDR_MAX_UP_REG
assign o_SMAP_TX_ADDR_MAX_UP[7:0]	= r_SMAP_TX_ADDR_MAX_UP[7:0];


// SPA_SMAP_TX_ADDR_MIN_UP_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_SMAP_TX_ADDR_MIN_UP[7:0]	<= 8`h0;
	end
	else if (w_addr12d4_wr) begin
		r_SMAP_TX_ADDR_MIN_UP[7:0]	<= i_PWDATA[7:0];
	end
	else begin
		r_SMAP_TX_ADDR_MIN_UP[7:0]	<= r_SMAP_TX_ADDR_MIN_UP[7:0];
	end
end

// output assign for SPA_SMAP_TX_ADDR_MIN_UP_REG
assign o_SMAP_TX_ADDR_MIN_UP[7:0]	= r_SMAP_TX_ADDR_MIN_UP[7:0];


// SPA_SMAP_TX_CUR_ADDR_UP_REG register

// output assign for SPA_SMAP_TX_CUR_ADDR_UP_REG
assign o_SMAP_TX_CUR_ADDR_UP[7:0]	= 8'h0 /* add logic */ ;


// SPA_BDS_DMA_ADDR_UP_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_BDS_ADDR_UP[7:0]	<= 8`h0;
	end
	else if (w_addr1304_wr) begin
		r_BDS_ADDR_UP[7:0]	<= i_PWDATA[7:0];
	end
	else begin
		r_BDS_ADDR_UP[7:0]	<= r_BDS_ADDR_UP[7:0];
	end
end

// output assign for SPA_BDS_DMA_ADDR_UP_REG
assign o_BDS_ADDR_UP[7:0]	= r_BDS_ADDR_UP[7:0];


// SPA_BDS_TX_ADDR_MAX_UP_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_BDS_TX_ADDR_MAX_UP[7:0]	<= 8`hFF;
	end
	else if (w_addr1310_wr) begin
		r_BDS_TX_ADDR_MAX_UP[7:0]	<= i_PWDATA[7:0];
	end
	else begin
		r_BDS_TX_ADDR_MAX_UP[7:0]	<= r_BDS_TX_ADDR_MAX_UP[7:0];
	end
end

// output assign for SPA_BDS_TX_ADDR_MAX_UP_REG
assign o_BDS_TX_ADDR_MAX_UP[7:0]	= r_BDS_TX_ADDR_MAX_UP[7:0];


// SPA_BDS_TX_ADDR_MIN_UP_REG register.

always @(negedge i_PRESETn or posedge i_PCLK) begin
	if (!i_PRESETn) begin
		r_BDS_TX_ADDR_MIN_UP[7:0]	<= 8`h0;
	end
	else if (w_addr1314_wr) begin
		r_BDS_TX_ADDR_MIN_UP[7:0]	<= i_PWDATA[7:0];
	end
	else begin
		r_BDS_TX_ADDR_MIN_UP[7:0]	<= r_BDS_TX_ADDR_MIN_UP[7:0];
	end
end

// output assign for SPA_BDS_TX_ADDR_MIN_UP_REG
assign o_BDS_TX_ADDR_MIN_UP[7:0]	= r_BDS_TX_ADDR_MIN_UP[7:0];


// SPA_BDS_TX_CUR_ADDR_UP_REG register

// output assign for SPA_BDS_TX_CUR_ADDR_UP_REG
assign o_BDS_TX_CUR_ADDR_UP[7:0]	= 8'h0 /* add logic */ ;


// SPA_ADAPT_DMA_BUF_WR_CNT_REG register

// output assign for SPA_ADAPT_DMA_BUF_WR_CNT_REG
assign o_ADAPT_DMA_BUF_WR_CNT[31:0]	= 32'h0 /* add logic */ ;


// SPA_ADAPT_DMA_BUF_RD_CNT_REG register

// output assign for SPA_ADAPT_DMA_BUF_RD_CNT_REG
assign o_ADAPT_DMA_BUF_RD_CNT[31:0]	= 32'h0 /* add logic */ ;


// SPA_ADAPT_DMA_OUT0_CNT_REG register

// output assign for SPA_ADAPT_DMA_OUT0_CNT_REG
assign o_ADAPT_DMA_OUT0_CNT[31:0]	= 32'h0 /* add logic */ ;


// SPA_SMAP_DMA_BUF_WR_CNT_REG register

// output assign for SPA_SMAP_DMA_BUF_WR_CNT_REG
assign o_SMAP_DMA_BUF_WR_CNT[31:0]	= 32'h0 /* add logic */ ;


// SPA_SMAP_DMA_BUF_RD_CNT_REG register

// output assign for SPA_SMAP_DMA_BUF_RD_CNT_REG
assign o_SMAP_DMA_BUF_RD_CNT[31:0]	= 32'h0 /* add logic */ ;


// SPA_SMAP_DMA_OUT0_CNT_REG register

// output assign for SPA_SMAP_DMA_OUT0_CNT_REG
assign o_SMAP_DMA_OUT0_CNT[31:0]	= 32'h0 /* add logic */ ;


// SPA_BDS_DMA_BUF_WR_CNT_REG register

// output assign for SPA_BDS_DMA_BUF_WR_CNT_REG
assign o_BDS_DMA_BUF_WR_CNT[31:0]	= 32'h0 /* add logic */ ;


// SPA_BDS_DMA_BUF_RD_CNT_REG register

// output assign for SPA_BDS_DMA_BUF_RD_CNT_REG
assign o_BDS_DMA_BUF_RD_CNT[31:0]	= 32'h0 /* add logic */ ;


// SPA_BDS_DMA_OUT0_CNT_REG register

// output assign for SPA_BDS_DMA_OUT0_CNT_REG
assign o_BDS_DMA_OUT0_CNT[31:0]	= 32'h0 /* add logic */ ;


// SPA_ADAPT_WDATA_CNT_REG register

// output assign for SPA_ADAPT_WDATA_CNT_REG
assign o_ADAPT_WDATA_CNT[31:0]	= 32'h0 /* add logic */ ;


// SPA_SMAP_WDATA_CNT_REG register

// output assign for SPA_SMAP_WDATA_CNT_REG
assign o_SMAP_WDATA_CNT[31:0]	= 32'h0 /* add logic */ ;


// SPA_BDS_WDATA_CNT_REG register

// output assign for SPA_BDS_WDATA_CNT_REG
assign o_BDS_WDATA_CNT[31:0]	= 32'h0 /* add logic */ ;




// Read prdata (sfr).
reg [31:0]	r_prdata;
wire [31:0]	zeros;
assign zeros[31:0]	= 32'h0;


always @(*) begin
	case (1'b1)
		w_addr0000_rd	: r_prdata = { 23'h0, r_GLOBAL_RESET[0:0], 7'h0, r_DMA_RESET[0:0] };
		w_addr0004_rd	: r_prdata = { 30'h0, r_CORE_BUSY[0:0], r_CORE_START[0:0] };
		w_addr0008_rd	: r_prdata = { 13'h0, r_RX_DPI_MODE[2:0], 10'h0, r_TX_COLOR_MODE[1:0], 2'h0, r_RX_COLOR_MODE[1:0] };
		w_addr000c_rd	: r_prdata = { 8'h0, r_TX_CH_EN[0:0], r_SMAP_EN[0:0], r_ADAPT_EN[0:0], 
									r_BDS_EN[0:0], 4'h0, r_CLA_EN[0:0], r_ORIENT_EN[0:0], r_ACBD_EN[0:0], 
									r_BLANK_EN[0:0], r_ACS_EN[0:0], r_MAGD_EN[0:0], r_NEWABSD_EN[0:0], 
									r_ABSD_EN[0:0], 1'h0, r_SEG2_EN[0:0], r_SCC_EN[0:0], r_SEG1_EN[0:0], 
									r_S1D_EN[0:0], r_RC1_EN[0:0], r_CIS_EN[0:0], r_VSD_EN[0:0] };
		w_addr0010_rd	: r_prdata = { 16'h0, r_RX_XD[15:0] };
		w_addr0014_rd	: r_prdata = { 16'h0, r_RX_YD[15:0] };
		w_addr0018_rd	: r_prdata = { r_TX_YD[15:0], r_TX_XD[15:0] };
		w_addr001c_rd	: r_prdata = { 8'h0, r_CH2_PADDING_VAL[7:0], r_CH1_PADDING_VAL[7:0], r_CH0_PADDING_VAL[7:0] };
		w_addr0024_rd	: r_prdata = { r_VERSION[31:0] };
		w_addr0030_rd	: r_prdata = { r_TX_PAGE_END[0:0], r_TX_CH_START_ERR_EN[0:0], r_VSD_DONE[0:0], r_ACS_DONE[0:0], 
									r_ACBD_DETECT_DONE[0:0], r_nABSD_DETECT_DONE[0:0], r_ORI_DONE[0:0], r_BDS_TX_ADDR_ERR_EN[0:0], 
									r_DTX_BDS_START_EN[0:0], r_BDS_TX_END_EN[0:0], r_RX_ERR[0:0], r_TX_YD_ERR[0:0], 
									r_TBL_DMA_END[0:0], r_SMAP_TX_ADDR_ERR_EN[0:0], r_ADAPT_TX_ADDR_ERR_EN[0:0], r_CLA_DONE[0:0], 
									r_MAGD_DONE[0:0], r_DMA_TX_ADDR_ERR_CH2[0:0], r_DMA_TX_ADDR_ERR_CH1[0:0], r_DMA_TX_ADDR_ERR_CH0[0:0], 
									r_DTX_SMAP_START_EN[0:0], r_DTX_ADAPT_START_EN[0:0], r_TX_ERR[0:0], r_SW_RESET_DONE[0:0], 
									r_SMAP_TX_END_EN[0:0], r_ADAPT_TX_END_EN[0:0], r_ABS_DETECT_DONE_EN[0:0], r_PAGE_END_EN[0:0], 
									r_BAND_END_EN[0:0], r_TX_BAND_START_EN[0:0], r_RX_BAND_END_EN[0:0], r_RX_BAND_START_EN[0:0] };
		w_addr0034_rd	: r_prdata = { r_TX_PAGE_END[0:0], r_TX_CH_START_ERR[0:0], r_VSD_DONE[0:0], r_ACS_DONE[0:0], 
									r_ACBD_DETECT_DONE[0:0], r_nABSD_DETECT_DONE[0:0], r_ORI_DONE[0:0], r_BDS_TX_ADDR_ERR[0:0], 
									r_DTX_BDS_START_ERR[0:0], r_BDS_TX_END[0:0], r_RX_ERR[0:0], r_TX_YD_ERR[0:0], 
									r_TBL_DMA_END[0:0], r_SMAP_TX_ADDR_ERR[0:0], r_ADAPT_TX_ADDR_ERR[0:0], r_CLA_DONE[0:0], 
									r_MAGD_DONE[0:0], r_DMA_TX_ADDR_ERR_CH2[0:0], r_DMA_TX_ADDR_ERR_CH1[0:0], r_DMA_TX_ADDR_ERR_CH0[0:0], 
									r_DTX_SMAP_START_ERR[0:0], r_DTX_ADAPT_START_ERR[0:0], r_TX_ERR[0:0], r_DMA_STOP_DONE[0:0], 
									r_SMAP_TX_END[0:0], r_ADAPT_TX_END[0:0], r_ABSD_DETECT_END[0:0], r_PAGE_END[0:0], 
									r_BAND_END[0:0], r_TX_BAND_START[0:0], r_RX_BAND_END[0:0], r_RX_BAND_START[0:0] };
		w_addr0038_rd	: r_prdata = { r_IRQ_SVC_CNT[31:0] };
		w_addr003c_rd	: r_prdata = { 31'h0, r_RAM_SW_MODE[0:0] };
		w_addr0040_rd	: r_prdata = { 7'h0, r_RAM_CS_24[0:0], r_RAM_CS_23[0:0], r_RAM_CS_22[0:0], r_RAM_CS_21[0:0], r_RAM_CS_20[0:0], 
									r_RAM_CS_19[0:0], r_RAM_CS_18[0:0], r_RAM_CS_17[0:0], r_RAM_CS_16[0:0], 
									r_RAM_CS_15[0:0], r_RAM_CS_14[0:0], r_RAM_CS_13[0:0], r_RAM_CS_12[0:0], 
									r_RAM_CS_11[0:0], r_RAM_CS_10[0:0], r_RAM_CS_09[0:0], r_RAM_CS_08[0:0], 
									r_RAM_CS_07[0:0], r_RAM_CS_06[0:0], r_RAM_CS_05[0:0], r_RAM_CS_04[0:0], 
									r_RAM_CS_03[0:0], r_RAM_CS_02[0:0], r_RAM_CS_01[0:0], r_RAM_CS_00[0:0] };
		w_addr0048_rd	: r_prdata = { r_RAM_DATA[31:0] };
		w_addr004c_rd	: r_prdata = { r_RAM_ADDR[31:0] };
		w_addr0054_rd	: r_prdata = { 23'h0, r_VSD_BAND_DONE[0:0], r_CIS_BAND_DONE[0:0], r_RC1_BAND_DONE[0:0], r_S1D_BAND_DONE[0:0], r_BSSB_BAND_DONE[0:0], 
									r_SEG1_BAND_DONE[0:0], r_SCC_BAND_DONE[0:0], r_SEG2_BAND_DONE[0:0], r_ALL_BAND_DONE[0:0] };
		w_addr0058_rd	: r_prdata = { 23'h0, r_VSD_PAGE_DONE[0:0], r_CIS_PAGE_DONE[0:0], r_RC1_PAGE_DONE[0:0], r_S1D_PAGE_END[0:0], r_BSSB_PAGE_DONE[0:0], 
									r_SEG1_PAGE_DONE[0:0], r_SCC_PAGE_DONE[0:0], r_SEG2_PAGE_DONE[0:0], r_ALL_PAGE_DONE[0:0] };
		w_addr006c_rd	: r_prdata = { r_TBL_RX_START_CNT[15:0], r_TBL_RX_END_CNT[15:0] };
		w_addr0070_rd	: r_prdata = { r_TBL_TX_START_CNT[15:0], r_TBL_TX_END_CNT[15:0] };
		w_addr0074_rd	: r_prdata = { 2'h0, r_TBL_END_STATUS1[29:0] };
		w_addr0080_rd	: r_prdata = { 23'h0, r_TBL_RW[0:0], 7'h0, r_TBL_START[0:0] };
		w_addr0084_rd	: r_prdata = { 7'h0, r_TBL_ENABLE24[0:0], r_TBL_ENABLE23[0:0], r_TBL_ENABLE22[0:0], r_TBL_ENABLE21[0:0], r_TBL_ENABLE20[0:0], 
									r_TBL_ENABLE19[0:0], r_TBL_ENABLE18[0:0], r_TBL_ENABLE17[0:0], r_TBL_ENABLE16[0:0], 
									r_TBL_ENABLE15[0:0], r_TBL_ENABLE14[0:0], r_TBL_ENABLE13[0:0], r_TBL_ENABLE12[0:0], 
									r_TBL_ENABLE11[0:0], r_TBL_ENABLE10[0:0], r_TBL_ENABLE09[0:0], r_TBL_ENABLE08[0:0], 
									r_TBL_ENABLE07[0:0], r_TBL_ENABLE06[0:0], r_TBL_ENABLE05[0:0], r_TBL_ENABLE04[0:0], 
									r_TBL_ENABLE03[0:0], r_TBL_ENABLE02[0:0], r_TBL_ENABLE01[0:0], r_TBL_ENABLE00[0:0] };
		w_addr008c_rd	: r_prdata = { r_TBL_ADDR_00[31:0] };
		w_addr0090_rd	: r_prdata = { r_TBL_ADDR_01[31:0] };
		w_addr0094_rd	: r_prdata = { r_TBL_ADDR_02[31:0] };
		w_addr0098_rd	: r_prdata = { r_TBL_ADDR_03[31:0] };
		w_addr009c_rd	: r_prdata = { r_TBL_ADDR_04[31:0] };
		w_addr00a0_rd	: r_prdata = { r_TBL_ADDR_05[31:0] };
		w_addr00a4_rd	: r_prdata = { r_TBL_ADDR_06[31:0] };
		w_addr00a8_rd	: r_prdata = { r_TBL_ADDR_07[31:0] };
		w_addr00ac_rd	: r_prdata = { r_TBL_ADDR_08[31:0] };
		w_addr00b0_rd	: r_prdata = { r_TBL_ADDR_09[31:0] };
		w_addr00b4_rd	: r_prdata = { r_TBL_ADDR_10[31:0] };
		w_addr00b8_rd	: r_prdata = { r_TBL_ADDR_11[31:0] };
		w_addr00bc_rd	: r_prdata = { r_TBL_ADDR_12[31:0] };
		w_addr00c0_rd	: r_prdata = { r_TBL_ADDR_13[31:0] };
		w_addr00c4_rd	: r_prdata = { r_TBL_ADDR_14[31:0] };
		w_addr00c8_rd	: r_prdata = { r_TBL_ADDR_15[31:0] };
		w_addr00cc_rd	: r_prdata = { r_TBL_ADDR_16[31:0] };
		w_addr00d0_rd	: r_prdata = { r_TBL_ADDR_17[31:0] };
		w_addr00d4_rd	: r_prdata = { r_TBL_ADDR_18[31:0] };
		w_addr00d8_rd	: r_prdata = { r_TBL_ADDR_19[31:0] };
		w_addr00dc_rd	: r_prdata = { r_TBL_ADDR_20[31:0] };
		w_addr00e0_rd	: r_prdata = { r_TBL_ADDR_21[31:0] };
		w_addr00e4_rd	: r_prdata = { r_TBL_ADDR_22[31:0] };
		w_addr00e8_rd	: r_prdata = { r_TBL_ADDR_23[31:0] };
		w_addr00ec_rd	: r_prdata = { r_TBL_ADDR_24[31:0] };
		w_addr0140_rd	: r_prdata = { 31'h0, r_RX_START[0:0] };
		w_addr0148_rd	: r_prdata = { r_RX_INCR[31:0] };
		w_addr014c_rd	: r_prdata = { r_RX_CH0_PREV_ADDR[31:0] };
		w_addr0150_rd	: r_prdata = { r_RX_CH1_PREV_ADDR[31:0] };
		w_addr0154_rd	: r_prdata = { r_RX_CH2_PREV_ADDR[31:0] };
		w_addr0158_rd	: r_prdata = { r_RX_CH0_CURR_ADDR[31:0] };
		w_addr015c_rd	: r_prdata = { r_RX_CH1_CURR_ADDR[31:0] };
		w_addr0160_rd	: r_prdata = { r_RX_CH2_CURR_ADDR[31:0] };
		w_addr0164_rd	: r_prdata = { r_RX_CH0_START_ADDR[31:0] };
		w_addr0168_rd	: r_prdata = { r_RX_CH1_START_ADDR[31:0] };
		w_addr016c_rd	: r_prdata = { r_RX_CH2_START_ADDR[31:0] };
		w_addr0170_rd	: r_prdata = { 8'h0, r_RX_BAND_CNT[7:0], 8'h0, r_RX_BLK_CNT[7:0] };
		w_addr0174_rd	: r_prdata = { 31'h0, r_BUSY[0:0] };
		w_addr0178_rd	: r_prdata = { r_RX_CH0_CUR_ADDR[31:0] };
		w_addr017c_rd	: r_prdata = { r_RX_CH1_CUR_ADDR[31:0] };
		w_addr0180_rd	: r_prdata = { r_RX_CH2_CUR_ADDR[31:0] };
		w_addr0184_rd	: r_prdata = { r_RX_CH0_SVC_CNT[31:0] };
		w_addr0188_rd	: r_prdata = { r_RX_CH1_SVC_CNT[31:0] };
		w_addr018c_rd	: r_prdata = { r_RX_CH2_SVC_CNT[31:0] };
		w_addr0190_rd	: r_prdata = { 6'h0, r_RX_SWAP_EN[1:0], 1'h0, r_RX_ARPROT2[0:0], 
									r_RX_ARPROT1[0:0], r_RX_ARPROT0[0:0], r_RX_ARCACHE[3:0], 13'h0, r_RX_ISSUE_CAP[2:0] };
		w_addr0194_rd	: r_prdata = { 26'h0, r_RX_RRESP_ERR_1[0:0], r_RX_RRESP_ERR_0[0:0], 
									r_RX_RID_ERR_3[0:0], r_RX_RID_ERR_2[0:0], r_RX_RID_ERR_1[0:0], r_RX_RID_ERR_0[0:0] };
		w_addr01c0_rd	: r_prdata = { 31'h0, r_TX_START[0:0] };
		w_addr01c4_rd	: r_prdata = { 6'h0, r_TX_SWAP_EN[1:0], 1'h0, r_TX_AWPROT2[0:0], r_TX_AWPROT1[0:0], r_TX_AWPROT0[0:0], r_TX_AWCACHE[3:0], 6'h0, 
									r_ARB_MODE[0:0], r_ALPHA_CH_ON[0:0], r_TX_INT_CHECK[0:0], 2'h0, r_MAX_WISSUE[4:0] };
		w_addr01c8_rd	: r_prdata = { 24'h0, r_TX_BAND_NUM[7:0] };
		w_addr01cc_rd	: r_prdata = { 16'h0, r_TX_DATA_INCR[15:0] };
		w_addr01d4_rd	: r_prdata = { r_TX_CH0_START_ADDR[31:0] };
		w_addr01d8_rd	: r_prdata = { r_TX_CH1_START_ADDR[31:0] };
		w_addr01dc_rd	: r_prdata = { r_TX_CH2_START_ADDR[31:0] };
		w_addr01e8_rd	: r_prdata = { 8'h0, r_TX_BAND_CNT[7:0], 8'h0, r_TX_BLK_CNT[7:0] };
		w_addr01ec_rd	: r_prdata = { 31'h0, r_BUSY[0:0] };
		w_addr01f0_rd	: r_prdata = { r_TX_ADDR_CH0_MAX[31:0] };
		w_addr01f4_rd	: r_prdata = { r_TX_ADDR_CH0_MIN[31:0] };
		w_addr01f8_rd	: r_prdata = { r_TX_ADDR_CH1_MAX[31:0] };
		w_addr01fc_rd	: r_prdata = { r_TX_ADDR_CH1_MIN[31:0] };
		w_addr0200_rd	: r_prdata = { r_TX_ADDR_CH2_MAX[31:0] };
		w_addr0204_rd	: r_prdata = { r_TX_ADDR_CH2_MIN[31:0] };
		w_addr0218_rd	: r_prdata = { r_TX_CH0_CUR_ADDR[31:0] };
		w_addr021c_rd	: r_prdata = { r_TX_CH1_CUR_ADDR[31:0] };
		w_addr0220_rd	: r_prdata = { r_TX_CH2_CUR_ADDR[31:0] };
		w_addr022c_rd	: r_prdata = { r_TX_CH0_SVC_CNT[31:0] };
		w_addr0230_rd	: r_prdata = { r_TX_CH1_SVC_CNT[31:0] };
		w_addr0234_rd	: r_prdata = { r_TX_CH2_SVC_CNT[31:0] };
		w_addr0240_rd	: r_prdata = { 26'h0, r_TX_ERR_RESP_1[0:0], r_TX_ERR_RESP_0[0:0], 
									r_TX_ERR_ID_3[0:0], r_TX_ERR_ID_2[0:0], r_TX_ERR_ID_1[0:0], r_TX_ERR_ID_0[0:0] };
		w_addr0280_rd	: r_prdata = { 8'h0, r_ADAPT_OUT_BANDS[7:0], 14'h0, r_ADAPT_SMAP_INT_CHECK[1:0] };
		w_addr0284_rd	: r_prdata = { r_ADAPT_ADDR[31:0] };
		w_addr0288_rd	: r_prdata = { r_ADAPT_ADDR_INCR[31:0] };
		w_addr028c_rd	: r_prdata = { r_ADAPT_OUT_LINES[15:0], 15'h0, r_ADAPT_TX_BUSY[0:0] };
		w_addr0290_rd	: r_prdata = { r_ADAPT_TX_ADDR_MAX[31:0] };
		w_addr0294_rd	: r_prdata = { r_ADAPT_TX_ADDR_MIN[31:0] };
		w_addr0298_rd	: r_prdata = { r_ADAPT_TX_CUR_ADDR[31:0] };
		w_addr029c_rd	: r_prdata = { r_ADAPT_TX_SVC_CNT[31:0] };
		w_addr02a0_rd	: r_prdata = { 31'h0, r_ADAPT_START[0:0] };
		w_addr02a4_rd	: r_prdata = { 24'h0, r_ADAPT_BAND_CNT[7:0] };
		w_addr02c0_rd	: r_prdata = { 8'h0, r_SMAP_OUT_BANDS[7:0], 16'h0 };
		w_addr02c4_rd	: r_prdata = { r_SMAP_ADDR[31:0] };
		w_addr02c8_rd	: r_prdata = { r_SMAP_ADDR_INCR[31:0] };
		w_addr02cc_rd	: r_prdata = { r_SMAP_OUT_LINES[15:0], 15'h0, r_SMAP_TX_BUSY[0:0] };
		w_addr02d0_rd	: r_prdata = { r_SMAP_TX_ADDR_MAX[31:0] };
		w_addr02d4_rd	: r_prdata = { r_SMAP_TX_ADDR_MIN[31:0] };
		w_addr02d8_rd	: r_prdata = { r_SMAP_TX_CUR_ADDR[31:0] };
		w_addr02dc_rd	: r_prdata = { r_SMAP_TX_SVC_CNT[31:0] };
		w_addr02e0_rd	: r_prdata = { 31'h0, r_SMAP_START[0:0] };
		w_addr02e4_rd	: r_prdata = { 24'h0, r_SMAP_BAND_CNT[7:0] };
		w_addr0300_rd	: r_prdata = { 8'h0, r_BDS_OUT_BANDS[7:0], 16'h0 };
		w_addr0304_rd	: r_prdata = { r_BDS_ADDR[31:0] };
		w_addr0308_rd	: r_prdata = { r_BDS_ADDR_INCR[31:0] };
		w_addr030c_rd	: r_prdata = { r_BDS_OUT_LINES[15:0], 15'h0, r_BDS_TX_BUSY[0:0] };
		w_addr0310_rd	: r_prdata = { r_BDS_TX_ADDR_MAX[31:0] };
		w_addr0314_rd	: r_prdata = { r_BDS_TX_ADDR_MIN[31:0] };
		w_addr0318_rd	: r_prdata = { r_BDS_TX_CUR_ADDR[31:0] };
		w_addr031c_rd	: r_prdata = { r_BDS_TX_SVC_CNT[31:0] };
		w_addr0320_rd	: r_prdata = { 31'h0, r_BDS_START[0:0] };
		w_addr0324_rd	: r_prdata = { 24'h0, r_BDS_BAND_CNT[7:0] };
		w_addr0340_rd	: r_prdata = { r_RX_CH0_CRC[31:0] };
		w_addr0344_rd	: r_prdata = { r_RX_CH1_CRC[31:0] };
		w_addr0348_rd	: r_prdata = { r_RX_CH2_CRC[31:0] };
		w_addr0350_rd	: r_prdata = { r_RC1_CH0_CRC[31:0] };
		w_addr0354_rd	: r_prdata = { r_RC1_CH1_CRC[31:0] };
		w_addr0358_rd	: r_prdata = { r_RC1_CH2_CRC[31:0] };
		w_addr0360_rd	: r_prdata = { r_RC1_CH0_CRC_DEBUG[31:0] };
		w_addr0364_rd	: r_prdata = { r_RC1_CH1_CRC_DEBUG[31:0] };
		w_addr0368_rd	: r_prdata = { r_RC1_CH2_CRC_DEBUG[31:0] };
		w_addr0370_rd	: r_prdata = { r_S1D_CH0_CRC[31:0] };
		w_addr0374_rd	: r_prdata = { r_S1D_CH1_CRC[31:0] };
		w_addr0378_rd	: r_prdata = { r_S1D_CH2_CRC[31:0] };
		w_addr0380_rd	: r_prdata = { r_SEG1_CH0_CRC[31:0] };
		w_addr0384_rd	: r_prdata = { r_SEG1_CH1_CRC[31:0] };
		w_addr0388_rd	: r_prdata = { r_SEG1_CH2_CRC[31:0] };
		w_addr038c_rd	: r_prdata = { r_SEG1_ATT_CRC[31:0] };
		w_addr0390_rd	: r_prdata = { r_SCC_CH0_CRC[31:0] };
		w_addr0394_rd	: r_prdata = { r_SCC_CH1_CRC[31:0] };
		w_addr0398_rd	: r_prdata = { r_SCC_CH2_CRC[31:0] };
		w_addr039c_rd	: r_prdata = { r_SCC_ATT_CRC[31:0] };
		w_addr03a0_rd	: r_prdata = { r_SEG2_CH0_CRC[31:0] };
		w_addr03a4_rd	: r_prdata = { r_SEG2_CH1_CRC[31:0] };
		w_addr03a8_rd	: r_prdata = { r_SEG2_CH2_CRC[31:0] };
		w_addr03ac_rd	: r_prdata = { r_SEG2_ATT_CRC[31:0] };
		w_addr03b0_rd	: r_prdata = { r_BSSA_CH0_CRC[31:0] };
		w_addr03b4_rd	: r_prdata = { r_BSSA_CH1_CRC[31:0] };
		w_addr03b8_rd	: r_prdata = { r_BSSA_CH2_CRC[31:0] };
		w_addr03c0_rd	: r_prdata = { r_DMATX_CH0_CRC[31:0] };
		w_addr03c4_rd	: r_prdata = { r_DMATX_CH1_CRC[31:0] };
		w_addr03c8_rd	: r_prdata = { r_DMATX_CH2_CRC[31:0] };
		w_addr03d0_rd	: r_prdata = { r_RC2_CH0_CRC[31:0] };
		w_addr03d4_rd	: r_prdata = { r_RC2_CH1_CRC[31:0] };
		w_addr03d8_rd	: r_prdata = { r_RC2_CH2_CRC[31:0] };
		w_addr03e0_rd	: r_prdata = { r_ADAPT_CRC[31:0] };
		w_addr03e4_rd	: r_prdata = { r_SMAP_CRC[31:0] };
		w_addr03e8_rd	: r_prdata = { r_BDS_CRC[31:0] };
		w_addr03f0_rd	: r_prdata = { r_VSD_CH0_CRC[31:0] };
		w_addr03f4_rd	: r_prdata = { r_VSD_CH1_CRC[31:0] };
		w_addr03f8_rd	: r_prdata = { r_VSD_CH2_CRC[31:0] };
		w_addr0400_rd	: r_prdata = { r_CIS_CH0_CRC[31:0] };
		w_addr0404_rd	: r_prdata = { r_CIS_CH1_CRC[31:0] };
		w_addr0408_rd	: r_prdata = { r_CIS_CH2_CRC[31:0] };
		w_addr0410_rd	: r_prdata = { r_BSSB_CH0_CRC[31:0] };
		w_addr0414_rd	: r_prdata = { r_BSSB_CH1_CRC[31:0] };
		w_addr0418_rd	: r_prdata = { r_BSSB_CH2_CRC[31:0] };
		w_addr0440_rd	: r_prdata = { 24'h0, r_DEBUG_FLAG[7:0] };
		w_addr0444_rd	: r_prdata = { 24'h0, r_DEBUG_FLAG[7:0] };
		w_addr0448_rd	: r_prdata = { 24'h0, r_DEBUG_FLAG[7:0] };
		w_addr044c_rd	: r_prdata = { 24'h0, r_BSSA_DEBUG_FLAG[7:0] };
		w_addr0450_rd	: r_prdata = { 24'h0, r_BSSB_DEBUG_FLAG[7:0] };
		w_addr0480_rd	: r_prdata = { 1'h0, r_VSC_CUR_MEM_INIT[0:0], 16'h0, r_VSC_DEBUG[1:0], 12'h0 };
		w_addr0484_rd	: r_prdata = { 20'h0, r_VSD_TOP_BAND[3:0], r_VSD_K_DEPTH_MIN[7:0] };
		w_addr0488_rd	: r_prdata = { r_VSD_K_DEPTH_MID[7:0], r_VSD_K_DEPTH_MAX[7:0], r_VSD_K_DEPTH_MIN_TOP[7:0], r_VSD_K_DEPTH_MAX_TOP[7:0] };
		w_addr048c_rd	: r_prdata = { 1'h0, r_VSD_K_DEPTH_COND[6:0], r_VSD_W_DEPTH_MIN[7:0], r_VSD_W_DEPTH_MID[7:0], r_VSD_W_DEPTH_MAX[7:0] };
		w_addr0490_rd	: r_prdata = { r_VSD_W_DEPTH_MIN_TOP[7:0], r_VSD_W_DEPTH_MAX_TOP[7:0], r_VSD_W_DEPTH_COND[7:0], r_VSD_THICKNESS_TH[7:0] };
		w_addr0494_rd	: r_prdata = { 1'h0, r_VSD_CHROMA_TH1[6:0], 1'h0, r_VSD_CHROMA_TH2[6:0], 1'h0, r_VSD_CHROMA_TH1_TOP[6:0], 1'h0, r_VSD_CHROMA_TH2_TOP[6:0] };
		w_addr0498_rd	: r_prdata = { 16'h0, r_VSD_CONTINUITY_TH[7:0], r_VSD_FREQUENCY_TH[7:0] };
		w_addr049c_rd	: r_prdata = { 15'h0, r_VSD_REFINE_EN[0:0], 3'h0, r_VSD_REFINE_TH[12:0] };
		w_addr04c0_rd	: r_prdata = { 11'h0, r_CIS_SUB_COEF_R2[8:0], 3'h0, r_CIS_SUB_COEF_R1[8:0] };
		w_addr04c4_rd	: r_prdata = { 5'h0, r_CIS_SUB_COEF_G2[8:0], r_CIS_SUB_COEF_G1[8:0], r_CIS_SUB_COEF_G0[8:0] };
		w_addr04c8_rd	: r_prdata = { 11'h0, r_CIS_SUB_COEF_B1[8:0], 3'h0, r_CIS_SUB_COEF_B0[8:0] };
		w_addr0500_rd	: r_prdata = { r_RC1_SHIFT_VAL[31:0] };
		w_addr0504_rd	: r_prdata = { r_RC1_SHIFT_OFST[31:0] };
		w_addr0508_rd	: r_prdata = { 13'h0, r_RC1_LOOP_X[2:0], 13'h0, r_RC1_LOOP_Y[2:0] };
		w_addr0510_rd	: r_prdata = { 4'h0, r_RC1_X_COF_00[11:0], 4'h0, r_RC1_X_COF_01[11:0] };
		w_addr0514_rd	: r_prdata = { 4'h0, r_RC1_X_COF_02[11:0], 4'h0, r_RC1_X_COF_03[11:0] };
		w_addr0518_rd	: r_prdata = { 4'h0, r_RC1_X_COF_10[11:0], 4'h0, r_RC1_X_COF_11[11:0] };
		w_addr051c_rd	: r_prdata = { 4'h0, r_RC1_X_COF_12[11:0], 4'h0, r_RC1_X_COF_13[11:0] };
		w_addr0520_rd	: r_prdata = { 4'h0, r_RC1_X_COF_20[11:0], 4'h0, r_RC1_X_COF_21[11:0] };
		w_addr0524_rd	: r_prdata = { 4'h0, r_RC1_X_COF_22[11:0], 4'h0, r_RC1_X_COF_23[11:0] };
		w_addr0528_rd	: r_prdata = { 4'h0, r_RC1_X_COF_30[11:0], 4'h0, r_RC1_X_COF_31[11:0] };
		w_addr052c_rd	: r_prdata = { 4'h0, r_RC1_X_COF_32[11:0], 4'h0, r_RC1_X_COF_33[11:0] };
		w_addr0530_rd	: r_prdata = { 4'h0, r_RC1_Y_COF_00[11:0], 4'h0, r_RC1_Y_COF_01[11:0] };
		w_addr0534_rd	: r_prdata = { 4'h0, r_RC1_Y_COF_02[11:0], 4'h0, r_RC1_Y_COF_03[11:0] };
		w_addr0538_rd	: r_prdata = { 4'h0, r_RC1_Y_COF_10[11:0], 4'h0, r_RC1_Y_COF_11[11:0] };
		w_addr053c_rd	: r_prdata = { 4'h0, r_RC1_Y_COF_12[11:0], 4'h0, r_RC1_Y_COF_13[11:0] };
		w_addr0540_rd	: r_prdata = { 4'h0, r_RC1_Y_COF_20[11:0], 4'h0, r_RC1_Y_COF_21[11:0] };
		w_addr0544_rd	: r_prdata = { 4'h0, r_RC1_Y_COF_22[11:0], 4'h0, r_RC1_Y_COF_23[11:0] };
		w_addr0548_rd	: r_prdata = { 4'h0, r_RC1_Y_COF_30[11:0], 4'h0, r_RC1_Y_COF_31[11:0] };
		w_addr054c_rd	: r_prdata = { 4'h0, r_RC1_Y_COF_32[11:0], 4'h0, r_RC1_Y_COF_33[11:0] };
		w_addr0580_rd	: r_prdata = { 27'h0, r_Enable_Y_text[0:0], 4'h0 };
		w_addr0584_rd	: r_prdata = { r_HVline_diff_th[7:0], r_HVline_minmaxdiff_th1[7:0], r_HVline_minmaxdiff_th2[7:0], r_HVline_level_th[7:0] };
		w_addr0588_rd	: r_prdata = { 8'h0, r_Lowfreq_th[7:0], r_Lowfreq_th2[7:0], r_Highfreq_th[7:0] };
		w_addr058c_rd	: r_prdata = { r_Uni_highfreq_th[7:0], r_Uni_lowfreq_th[7:0], r_Uni_edge_th2[7:0], r_Uni_edge_th[7:0] };
		w_addr0590_rd	: r_prdata = { 8'h0, r_White_th[7:0], r_ZC_edge_th[7:0], 5'h0, r_ZC_scaling_shift[2:0] };
		w_addr05c0_rd	: r_prdata = { 26'h0, r_SCC_FLOATING_MODE[1:0], 3'h0, r_SCC_LATTICE_STEP[0:0] };
		w_addr0600_rd	: r_prdata = { 27'h0, r_Enable_contoneImage[0:0], 2'h0, r_Enable_uniformtext[0:0], r_Enable_FAR_9x9[0:0] };
		w_addr0604_rd	: r_prdata = { 8'h0, r_FG_level_th[7:0], 6'h0, r_text_index[1:0], 1'h0, r_edgecount_th[6:0] };
		w_addr0608_rd	: r_prdata = { 1'h0, r_bgcnt_th[6:0], 1'h0, r_halftonecount_th[6:0], 1'h0, r_uniformlinecount_th[6:0], 1'h0, r_zccount_th[6:0] };
		w_addr060c_rd	: r_prdata = { 16'h0, r_FAR_chroma_th[7:0], 4'h0, r_FAR_chroma_th2_shiftcoef[3:0] };
		w_addr0610_rd	: r_prdata = { 16'h0, r_FAR_Y_th[7:0], r_FAR_Y_th2_shiftcoef1[3:0], r_FAR_Y_th3_shiftcoef2[3:0] };
		w_addr0614_rd	: r_prdata = { 16'h0, r_Neut_chroma_th[7:0], 4'h0, r_Neut_chroma_th2_shiftcoef[3:0] };
		w_addr07c0_rd	: r_prdata = { 31'h0, r_PAGE_EN[0:0] };
		w_addr07c4_rd	: r_prdata = { 18'h0, r_BLOCK_SIZE_W[5:0], 1'h0, r_BLOCK_SIZE_H[6:0] };
		w_addr07c8_rd	: r_prdata = { 2'h0, r_AREA_SIZE_W[13:0], 2'h0, r_AREA_SIZE_H[13:0] };
		w_addr07cc_rd	: r_prdata = { 8'h0, r_CHAR_LENGTH_MIN_V[7:0], r_CHAR_THICK_MIN_V[7:0], r_CHAR_THICK_MAX_V[7:0] };
		w_addr07d0_rd	: r_prdata = { 8'h0, r_CHAR_LENGTH_MIN_H[7:0], r_CHAR_THICK_MIN_H[7:0], r_CHAR_THICK_MAX_H[7:0] };
		w_addr07d4_rd	: r_prdata = { 4'h0, r_DIFF_SHIFT1_V[3:0], 4'h0, r_DIFF_SHIFT2_V[3:0], 1'h0, r_CHANGE_RATIO_TH_V[6:0], 1'h0, r_CHANGE_CNT_TH_V[6:0] };
		w_addr07d8_rd	: r_prdata = { 4'h0, r_DIFF_SHIFT1_H[3:0], 4'h0, r_DIFF_SHIFT2_H[3:0], 1'h0, r_CHANGE_RATIO_TH_H[6:0], 1'h0, r_CHANGE_CNT_TH_H[6:0] };
		w_addr07dc_rd	: r_prdata = { r_DIR_MIN_TH[7:0], r_DIR_MAX_TH[7:0], r_DIR_TH[7:0], r_DIR_MAX_LOW_TH[7:0] };
		w_addr07e0_rd	: r_prdata = { r_DIR_MAX_HIGH_TH[7:0], r_DIR_DIFF_TH1[7:0], r_DIR_DIFF_TH2[7:0], r_DIR_DIFF_TH3[7:0] };
		w_addr07e4_rd	: r_prdata = { 5'h0, r_OUT_AREA_OFFSET_H[10:0], 5'h0, r_OUT_AREA_OFFSET_W[10:0] };
		w_addr07e8_rd	: r_prdata = { 21'h0, r_OUT_AREA_OFFSET[10:0] };
		w_addr07ec_rd	: r_prdata = { 16'h0, r_LINE_SPACE_H[7:0], r_LINE_SPACE_V[7:0] };
		w_addr07f0_rd	: r_prdata = { 29'h0, r_TEXT_FLAG3[0:0], r_TEXT_FLAG2[0:0], r_TEXT_FLAG1[0:0] };
		w_addr07f4_rd	: r_prdata = { 2'h0, r_TEXT_AREA1_ST_W[13:0], 2'h0, r_TEXT_AREA1_EN_W[13:0] };
		w_addr07f8_rd	: r_prdata = { 2'h0, r_TEXT_AREA1_ST_H[13:0], 2'h0, r_TEXT_AREA1_EN_H[13:0] };
		w_addr07fc_rd	: r_prdata = { 2'h0, r_TEXT_AREA2_ST_W[13:0], 2'h0, r_TEXT_AREA2_EN_W[13:0] };
		w_addr0800_rd	: r_prdata = { 2'h0, r_TEXT_AREA2_ST_H[13:0], 2'h0, r_TEXT_AREA2_EN_H[13:0] };
		w_addr0804_rd	: r_prdata = { 2'h0, r_TEXT_AREA3_ST_W[13:0], 2'h0, r_TEXT_AREA3_EN_W[13:0] };
		w_addr0808_rd	: r_prdata = { 2'h0, r_TEXT_AREA3_ST_H[13:0], 2'h0, r_TEXT_AREA3_EN_H[13:0] };
		w_addr0840_rd	: r_prdata = { 18'h0, r_ABS_PRE_SCAN_LINE[13:0] };
		w_addr0844_rd	: r_prdata = { 2'h0, r_ABS_IWIN_START[13:0], 2'h0, r_ABS_IWIN_END[13:0] };
		w_addr0848_rd	: r_prdata = { 15'h0, r_ABS_NOISE_REM[0:0], r_ABS_BLACK_TH[7:0], r_ABS_WHITE_TH[7:0] };
		w_addr084c_rd	: r_prdata = { 25'h0, r_ABS_VALID_PERCENTAGE[6:0] };
		w_addr0850_rd	: r_prdata = { 24'h0, r_ABS_BK_STD_TH[7:0] };
		w_addr0854_rd	: r_prdata = { 10'h0, r_ABS_CONFID_SIGMA[5:0], 2'h0, r_ABS_DETECT_SIGMA[5:0], 1'h0, r_ABS_PERCENTAGE[6:0] };
		w_addr0858_rd	: r_prdata = { 20'h0, r_ABS_BG_BACKUP_TH[7:0], 3'h0, r_ABS_BG_BACKUP_EN[0:0] };
		w_addr085c_rd	: r_prdata = { 8'h0, r_ABS_COLOR_TH1[7:0], r_ABS_COLOR_TH2[7:0], 7'h0, r_ABS_COLOR_EXCEPTION[0:0] };
		w_addr0860_rd	: r_prdata = { 8'h0, r_ABS_MAX_CR[7:0], r_ABS_MAX_CB[7:0], r_ABS_TOP_BG_LEVEL[7:0] };
		w_addr0864_rd	: r_prdata = { 23'h0, r_ABS_SUCCESS[0:0], 1'h0, r_ABS_TOP_PEAK_CONFIDENCE[6:0] };
		w_addr0868_rd	: r_prdata = { 18'h0, r_ABS_PRE_SCAN_START[13:0] };
		w_addr0880_rd	: r_prdata = { 18'h0, r_MAD_PRE_SCAN_LINE[13:0] };
		w_addr0884_rd	: r_prdata = { 2'h0, r_MAD_IWIN_START[13:0], 2'h0, r_MAD_IWIN_END[13:0] };
		w_addr0888_rd	: r_prdata = { 15'h0, r_MAD_NOISE_REM[0:0], r_MAD_BLACK_TH[7:0], r_MAD_WHITE_TH[7:0] };
		w_addr088c_rd	: r_prdata = { 25'h0, r_MAD_VALID_PERCENTAGE[6:0] };
		w_addr0890_rd	: r_prdata = { 24'h0, r_MAD_BK_STD_TH[7:0] };
		w_addr0894_rd	: r_prdata = { 10'h0, r_MAD_CONFID_SIGMA[5:0], 2'h0, r_MAD_DETECT_SIGMA[5:0], 1'h0, r_MAD_PERCENTAGE[6:0] };
		w_addr0898_rd	: r_prdata = { 20'h0, r_MAD_BG_BACKUP_TH[7:0], 3'h0, r_MAD_BG_BACKUP_EN[0:0] };
		w_addr089c_rd	: r_prdata = { 8'h0, r_MAD_COLOR_TH1[7:0], r_MAD_COLOR_TH2[7:0], 7'h0, r_MAD_COLOR_EXCEPTION[0:0] };
		w_addr08a0_rd	: r_prdata = { 8'h0, r_MAD_MAX_CR[7:0], r_MAD_MAX_CB[7:0], r_MAD_TOP_BG_LEVEL[7:0] };
		w_addr08a4_rd	: r_prdata = { 23'h0, r_MAD_SUCCESS[0:0], 1'h0, r_MAD_TOP_PEAK_CONFIDENCE[6:0] };
		w_addr08a8_rd	: r_prdata = { 18'h0, r_MAD_PRE_SCAN_START[13:0] };
		w_addr08c0_rd	: r_prdata = { 2'h0, r_ABS_PRE_SCAN_START[13:0], 2'h0, r_ABS_PRE_SCAN_LINE[13:0] };
		w_addr08c4_rd	: r_prdata = { 2'h0, r_ABS_IWIN_START[13:0], 2'h0, r_ABS_IWIN_END[13:0] };
		w_addr08c8_rd	: r_prdata = { 8'h0, r_CHROMA_TH[7:0], r_GRAY_RIDGE_TH[7:0], r_COLOR_RIDGE_TH[7:0] };
		w_addr08cc_rd	: r_prdata = { 16'h0, r_LEFT_LIMIT[7:0], r_RIGHT_LIMIT[7:0] };
		w_addr08d0_rd	: r_prdata = { 16'h0, r_HISTO_GRAY_PEAK[7:0], r_HISTO_COLOR_PEAK[7:0] };
		w_addr08d4_rd	: r_prdata = { 16'h0, r_HISTO_GRAY_LEFT[7:0], r_HISTO_COLOR_LEFT[7:0] };
		w_addr08d8_rd	: r_prdata = { 16'h0, r_HISTO_GRAY_RIGHT[7:0], r_HISTO_COLOR_RIGHT[7:0] };
		w_addr08dc_rd	: r_prdata = { 20'h0, r_MEM_READ_STAT[3:0], 7'h0, r_PAPER_COLOR_FLAG[0:0] };
		w_addr0900_rd	: r_prdata = { r_HLCOUNT_DIFFTH2[7:0], r_HLCOUNT_DIFFTH1[7:0], r_HLCOUNT_MAXTH2[7:0], r_HLCOUNT_MAXTH1[7:0] };
		w_addr0904_rd	: r_prdata = { 13'h0, r_ContentsSizeTh[10:0], r_HLGRAY_DIFFTH[7:0] };
		w_addr0908_rd	: r_prdata = { r_TOTAL_BIN_CNT[31:0] };
		w_addr090c_rd	: r_prdata = { r_HL_RANGE2[31:0] };
		w_addr0910_rd	: r_prdata = { r_HL_COLOR2[31:0] };
		w_addr0914_rd	: r_prdata = { r_BTEXT_CNT[31:0] };
		w_addr0918_rd	: r_prdata = { r_TEXT_CNT[31:0] };
		w_addr091c_rd	: r_prdata = { r_HT_CNT[31:0] };
		w_addr0920_rd	: r_prdata = { r_EDGE_CNT[31:0] };
		w_addr0924_rd	: r_prdata = { r_WHITE_CNT[31:0] };
		w_addr0928_rd	: r_prdata = { r_CONTONE_CNT[31:0] };
		w_addr092c_rd	: r_prdata = { r_WHITE_WO_TEXT_CNT[31:0] };
		w_addr0930_rd	: r_prdata = { r_WHITE_WO_HT_TEXT_CNT[31:0] };
		w_addr0934_rd	: r_prdata = { 2'h0, r_ContentSizeH[13:0], 2'h0, r_ContentSizeW[13:0] };
		w_addr0980_rd	: r_prdata = { r_TOP_MARGIN[15:0], r_BOTTOM_MARGIN[15:0] };
		w_addr0984_rd	: r_prdata = { r_LEFT_MARGIN[15:0], r_RIGHT_MARGIN[15:0] };
		w_addr0988_rd	: r_prdata = { 6'h0, r_LOW_TH_MIN1[9:0], 6'h0, r_HIGH_TH_MAX1[9:0] };
		w_addr098c_rd	: r_prdata = { 6'h0, r_LOW_TH_MIN2[9:0], 6'h0, r_HIGH_TH_MAX2[9:0] };
		w_addr0990_rd	: r_prdata = { 31'h0, r_HLIGHT_SEL_EN[0:0] };
		w_addr0994_rd	: r_prdata = { 24'h0, r_AVG_TH[7:0] };
		w_addr0998_rd	: r_prdata = { r_HISTCB_WIN_VAL_LOW[7:0], r_HISTCB_WIN_VAL_HIGH[7:0], r_HISTCR_WIN_VAL_LOW[7:0], r_HISTCR_WIN_VAL_HIGH[7:0] };
		w_addr099c_rd	: r_prdata = { 6'h0, r_RATIO_TH_CB[9:0], 6'h0, r_RATIO_TH_CR[9:0] };
		w_addr09a0_rd	: r_prdata = { 16'h0, r_LIMIT_TH_MIN[7:0], r_LIMIT_TH_MAX[7:0] };
		w_addr09a4_rd	: r_prdata = { 15'h0, r_BRIGHT_EN[0:0], r_BRIGHT_TH[7:0], r_STRETCH_OFFSET[7:0] };
		w_addr09a8_rd	: r_prdata = { 14'h0, r_ACB_PEAK_RATIO_TH[9:0], 2'h0, r_ACB_GRAY_RIDGE[5:0] };
		w_addr09ac_rd	: r_prdata = { 16'h0, r_ACB_LEFT_LIMIT[7:0], r_ACB_RIGHT_LIMIT[7:0] };
		w_addr09b0_rd	: r_prdata = { 16'h0, r_OBJ_INDEX_TH[7:0], 4'h0, r_OBJ_AREA_TH[3:0] };
		w_addr09b4_rd	: r_prdata = { 8'h0, r_FINAL_MIN[7:0], r_FINAL_MAX[7:0], r_BRIGHT_OFFSET[7:0] };
		w_addr09b8_rd	: r_prdata = { 12'h0, r_MEM_READ_STAT[3:0], r_ANKER_POINT[7:0], r_PEAK_ID[7:0] };
		w_addr09bc_rd	: r_prdata = { 31'h0, r_ACS_REF_ON[0:0] };
		w_addr09c0_rd	: r_prdata = { r_ACS_WHITE_TH[7:0], r_ACS_BLOCK_SIZE_Y[7:0], r_ACS_BLOCK_SIZE_X[7:0], r_ACS_RANGE_REAL_IMAGE[0:0], 2'h0, r_ACS_HISTO_EN[0:0], 
									r_ACS_MARK_EN[0:0], r_ACS_AUTO_EN[0:0], r_ACS_HALFAUTO_EN[0:0], r_ACS_SATAUTO_EN[0:0] };
		w_addr09c4_rd	: r_prdata = { 15'h0, r_ACS_MARK_UPPER[16:0] };
		w_addr09c8_rd	: r_prdata = { 15'h0, r_ACS_MARK_LOWER[16:0] };
		w_addr09cc_rd	: r_prdata = { 15'h0, r_ACS_MARK_LEFT[16:0] };
		w_addr09d0_rd	: r_prdata = { 15'h0, r_ACS_MARK_RIGHT[16:0] };
		w_addr09d4_rd	: r_prdata = { r_ACS_SATURATION_PXL_TH[7:0], 16'h0, r_ACS_SATURATION_BLOCK_TH[7:0] };
		w_addr09d8_rd	: r_prdata = { 1'h0, r_ACS_HALFTONE_CNT[14:0], 1'h0, r_ACS_PUREHALFTONE_CNT[14:0] };
		w_addr09dc_rd	: r_prdata = { r_ACS_CB_MAX_00[7:0], r_ACS_CB_MAX_01[7:0], r_ACS_CB_MAX_02[7:0], r_ACS_CB_MAX_03[7:0] };
		w_addr09e0_rd	: r_prdata = { r_ACS_CB_MAX_04[7:0], r_ACS_CB_MAX_05[7:0], r_ACS_CB_MAX_06[7:0], r_ACS_CB_MAX_07[7:0] };
		w_addr09e4_rd	: r_prdata = { r_ACS_CB_MAX_08[7:0], r_ACS_CB_MAX_09[7:0], r_ACS_CB_MAX_10[7:0], r_ACS_CB_MAX_11[7:0] };
		w_addr09e8_rd	: r_prdata = { r_ACS_CB_MAX_12[7:0], r_ACS_CB_MAX_13[7:0], r_ACS_CB_MAX_14[7:0], r_ACS_CB_MAX_15[7:0] };
		w_addr09ec_rd	: r_prdata = { r_ACS_CB_MIN_00[7:0], r_ACS_CB_MIN_01[7:0], r_ACS_CB_MIN_02[7:0], r_ACS_CB_MIN_03[7:0] };
		w_addr09f0_rd	: r_prdata = { r_ACS_CB_MIN_04[7:0], r_ACS_CB_MIN_05[7:0], r_ACS_CB_MIN_06[7:0], r_ACS_CB_MIN_07[7:0] };
		w_addr09f4_rd	: r_prdata = { r_ACS_CB_MIN_08[7:0], r_ACS_CB_MIN_09[7:0], r_ACS_CB_MIN_10[7:0], r_ACS_CB_MIN_11[7:0] };
		w_addr09f8_rd	: r_prdata = { r_ACS_CB_MIN_12[7:0], r_ACS_CB_MIN_13[7:0], r_ACS_CB_MIN_14[7:0], r_ACS_CB_MIN_15[7:0] };
		w_addr09fc_rd	: r_prdata = { r_ACS_CR_MAX_00[7:0], r_ACS_CR_MAX_01[7:0], r_ACS_CR_MAX_02[7:0], r_ACS_CR_MAX_03[7:0] };
		w_addr0a00_rd	: r_prdata = { r_ACS_CR_MAX_04[7:0], r_ACS_CR_MAX_05[7:0], r_ACS_CR_MAX_06[7:0], r_ACS_CR_MAX_07[7:0] };
		w_addr0a04_rd	: r_prdata = { r_ACS_CR_MAX_08[7:0], r_ACS_CR_MAX_09[7:0], r_ACS_CR_MAX_10[7:0], r_ACS_CR_MAX_11[7:0] };
		w_addr0a08_rd	: r_prdata = { r_ACS_CR_MAX_12[7:0], r_ACS_CR_MAX_13[7:0], r_ACS_CR_MAX_14[7:0], r_ACS_CR_MAX_15[7:0] };
		w_addr0a0c_rd	: r_prdata = { r_ACS_CR_MIN_00[7:0], r_ACS_CR_MIN_01[7:0], r_ACS_CR_MIN_02[7:0], r_ACS_CR_MIN_03[7:0] };
		w_addr0a10_rd	: r_prdata = { r_ACS_CR_MIN_04[7:0], r_ACS_CR_MIN_05[7:0], r_ACS_CR_MIN_06[7:0], r_ACS_CR_MIN_07[7:0] };
		w_addr0a14_rd	: r_prdata = { r_ACS_CR_MIN_08[7:0], r_ACS_CR_MIN_09[7:0], r_ACS_CR_MIN_10[7:0], r_ACS_CR_MIN_11[7:0] };
		w_addr0a18_rd	: r_prdata = { r_ACS_CR_MIN_12[7:0], r_ACS_CR_MIN_13[7:0], r_ACS_CR_MIN_14[7:0], r_ACS_CR_MIN_15[7:0] };
		w_addr0a1c_rd	: r_prdata = { r_ACS_CB_MAXH_00[7:0], r_ACS_CB_MAXH_01[7:0], r_ACS_CB_MAXH_02[7:0], r_ACS_CB_MAXH_03[7:0] };
		w_addr0a20_rd	: r_prdata = { r_ACS_CB_MAXH_04[7:0], r_ACS_CB_MAXH_05[7:0], r_ACS_CB_MAXH_06[7:0], r_ACS_CB_MAXH_07[7:0] };
		w_addr0a24_rd	: r_prdata = { r_ACS_CB_MAXH_08[7:0], r_ACS_CB_MAXH_09[7:0], r_ACS_CB_MAXH_10[7:0], r_ACS_CB_MAXH_11[7:0] };
		w_addr0a28_rd	: r_prdata = { r_ACS_CB_MAXH_12[7:0], r_ACS_CB_MAXH_13[7:0], r_ACS_CB_MAXH_14[7:0], r_ACS_CB_MAXH_15[7:0] };
		w_addr0a2c_rd	: r_prdata = { r_ACS_CB_MINH_00[7:0], r_ACS_CB_MINH_01[7:0], r_ACS_CB_MINH_02[7:0], r_ACS_CB_MINH_03[7:0] };
		w_addr0a30_rd	: r_prdata = { r_ACS_CB_MINH_04[7:0], r_ACS_CB_MINH_05[7:0], r_ACS_CB_MINH_06[7:0], r_ACS_CB_MINH_07[7:0] };
		w_addr0a34_rd	: r_prdata = { r_ACS_CB_MINH_08[7:0], r_ACS_CB_MINH_09[7:0], r_ACS_CB_MINH_10[7:0], r_ACS_CB_MINH_11[7:0] };
		w_addr0a38_rd	: r_prdata = { r_ACS_CB_MINH_12[7:0], r_ACS_CB_MINH_13[7:0], r_ACS_CB_MINH_14[7:0], r_ACS_CB_MINH_15[7:0] };
		w_addr0a3c_rd	: r_prdata = { r_ACS_CR_MAXH_00[7:0], r_ACS_CR_MAXH_01[7:0], r_ACS_CR_MAXH_02[7:0], r_ACS_CR_MAXH_03[7:0] };
		w_addr0a40_rd	: r_prdata = { r_ACS_CR_MAXH_04[7:0], r_ACS_CR_MAXH_05[7:0], r_ACS_CR_MAXH_06[7:0], r_ACS_CR_MAXH_07[7:0] };
		w_addr0a44_rd	: r_prdata = { r_ACS_CR_MAXH_08[7:0], r_ACS_CR_MAXH_09[7:0], r_ACS_CR_MAXH_10[7:0], r_ACS_CR_MAXH_11[7:0] };
		w_addr0a48_rd	: r_prdata = { r_ACS_CR_MAXH_12[7:0], r_ACS_CR_MAXH_13[7:0], r_ACS_CR_MAXH_14[7:0], r_ACS_CR_MAXH_15[7:0] };
		w_addr0a4c_rd	: r_prdata = { r_ACS_CR_MINH_00[7:0], r_ACS_CR_MINH_01[7:0], r_ACS_CR_MINH_02[7:0], r_ACS_CR_MINH_03[7:0] };
		w_addr0a50_rd	: r_prdata = { r_ACS_CR_MINH_04[7:0], r_ACS_CR_MINH_05[7:0], r_ACS_CR_MINH_06[7:0], r_ACS_CR_MINH_07[7:0] };
		w_addr0a54_rd	: r_prdata = { r_ACS_CR_MINH_08[7:0], r_ACS_CR_MINH_09[7:0], r_ACS_CR_MINH_10[7:0], r_ACS_CR_MINH_11[7:0] };
		w_addr0a58_rd	: r_prdata = { r_ACS_CR_MINH_12[7:0], r_ACS_CR_MINH_13[7:0], r_ACS_CR_MINH_14[7:0], r_ACS_CR_MINH_15[7:0] };
		w_addr0a5c_rd	: r_prdata = { 16'h0, r_ACS_VALUE_PXL_TH[7:0], r_ACS_VALUE_BLOCK_TH[7:0] };
		w_addr0a60_rd	: r_prdata = { r_ACS_TBLK_PAGE[31:0] };
		w_addr0a64_rd	: r_prdata = { r_ACS_TBLK_NPAGE[31:0] };
		w_addr0a68_rd	: r_prdata = { r_ACS_CBLK[31:0] };
		w_addr0a6c_rd	: r_prdata = { r_ACS_SBLK_PAGE[31:0] };
		w_addr0a70_rd	: r_prdata = { r_ACS_SPXL_BLK_PAGE[31:0] };
		w_addr0a74_rd	: r_prdata = { r_ACS_SPXL_PAGE[31:0] };
		w_addr0a78_rd	: r_prdata = { r_ACS_TEXT_PAGE[31:0] };
		w_addr0a7c_rd	: r_prdata = { r_ACS_HT_PAGE[31:0] };
		w_addr0a80_rd	: r_prdata = { r_ACS_EDGE_PAGE[31:0] };
		w_addr0a88_rd	: r_prdata = { r_AVG_HT_ACS00[31:0] };
		w_addr0a8c_rd	: r_prdata = { r_AVG_HT_ACS01[31:0] };
		w_addr0a90_rd	: r_prdata = { r_AVG_HT_ACS02[31:0] };
		w_addr0a94_rd	: r_prdata = { r_AVG_HT_ACS03[31:0] };
		w_addr0a98_rd	: r_prdata = { r_AVG_HT_ACS04[31:0] };
		w_addr0a9c_rd	: r_prdata = { r_AVG_HT_ACS05[31:0] };
		w_addr0aa0_rd	: r_prdata = { r_AVG_HT_ACS06[31:0] };
		w_addr0aa4_rd	: r_prdata = { r_AVG_HT_ACS07[31:0] };
		w_addr0aa8_rd	: r_prdata = { r_AVG_HT_ACS08[31:0] };
		w_addr0aac_rd	: r_prdata = { r_AVG_HT_ACS09[31:0] };
		w_addr0ab0_rd	: r_prdata = { r_AVG_HT_ACS10[31:0] };
		w_addr0ab4_rd	: r_prdata = { r_AVG_HT_ACS11[31:0] };
		w_addr0ab8_rd	: r_prdata = { r_AVG_HT_ACS12[31:0] };
		w_addr0abc_rd	: r_prdata = { r_AVG_HT_ACS13[31:0] };
		w_addr0ac0_rd	: r_prdata = { r_AVG_HT_ACS14[31:0] };
		w_addr0ac4_rd	: r_prdata = { r_AVG_HT_ACS15[31:0] };
		w_addr0ac8_rd	: r_prdata = { r_AVG_NHT_ACS00[31:0] };
		w_addr0acc_rd	: r_prdata = { r_AVG_NHT_ACS01[31:0] };
		w_addr0ad0_rd	: r_prdata = { r_AVG_NHT_ACS02[31:0] };
		w_addr0ad4_rd	: r_prdata = { r_AVG_NHT_ACS03[31:0] };
		w_addr0ad8_rd	: r_prdata = { r_AVG_NHT_ACS04[31:0] };
		w_addr0adc_rd	: r_prdata = { r_AVG_NHT_ACS05[31:0] };
		w_addr0ae0_rd	: r_prdata = { r_AVG_NHT_ACS06[31:0] };
		w_addr0ae4_rd	: r_prdata = { r_AVG_NHT_ACS07[31:0] };
		w_addr0ae8_rd	: r_prdata = { r_AVG_NHT_ACS08[31:0] };
		w_addr0aec_rd	: r_prdata = { r_AVG_NHT_ACS09[31:0] };
		w_addr0af0_rd	: r_prdata = { r_AVG_NHT_ACS10[31:0] };
		w_addr0af4_rd	: r_prdata = { r_AVG_NHT_ACS11[31:0] };
		w_addr0af8_rd	: r_prdata = { r_AVG_NHT_ACS12[31:0] };
		w_addr0afc_rd	: r_prdata = { r_AVG_NHT_ACS13[31:0] };
		w_addr0b00_rd	: r_prdata = { r_AVG_NHT_ACS14[31:0] };
		w_addr0b04_rd	: r_prdata = { r_AVG_NHT_ACS15[31:0] };
		w_addr0b08_rd	: r_prdata = { 17'h0, r_ACS_SATURATION_PXL_CNT_TH[14:0] };
		w_addr0b0c_rd	: r_prdata = { 2'h0, r_VALID_TOP[13:0], 2'h0, r_VALID_BOTTOM[13:0] };
		w_addr0b10_rd	: r_prdata = { 2'h0, r_VALID_LEFT[13:0], 2'h0, r_VALID_RIGHT[13:0] };
		w_addr0b14_rd	: r_prdata = { r_ACS_V2_WHITE_TH[7:0], r_ACS_V2_BLOCK_SIZE_Y[7:0], r_ACS_V2_BLOCK_SIZE_X[7:0], 8'h0 };
		w_addr0b18_rd	: r_prdata = { r_ACS_V2_SATURATION_PXL_TH[7:0], 16'h0, r_ACS_V2_SATURATION_BLOCK_TH[7:0] };
		w_addr0b1c_rd	: r_prdata = { 17'h0, r_ACS_V2_SATURATION_TH2[14:0] };
		w_addr0b20_rd	: r_prdata = { 1'h0, r_ACS_V2_HALFTONE_CNT[14:0], 1'h0, r_ACS_V2_PUREHALFTONE_CNT[14:0] };
		w_addr0b24_rd	: r_prdata = { 16'h0, r_ACS_V2_VALUE_PXL_TH[7:0], r_ACS_V2_VALUE_BLOCK_TH[7:0] };
		w_addr0b28_rd	: r_prdata = { r_ACS_V2_TBLK_PAGE[31:0] };
		w_addr0b2c_rd	: r_prdata = { r_ACS_V2_TBLK_NPAGE[31:0] };
		w_addr0b30_rd	: r_prdata = { r_ACS_V2_CBLK[31:0] };
		w_addr0b34_rd	: r_prdata = { r_ACS_V2_SBLK_PAGE[31:0] };
		w_addr0b38_rd	: r_prdata = { r_ACS_V2_SPXL_BLK_PAGE[31:0] };
		w_addr0b3c_rd	: r_prdata = { r_ACS_V2_SPXL_PAGE[31:0] };
		w_addr0b40_rd	: r_prdata = { 8'h0, r_BLANK_BLOCK_SIZE_V[7:0], r_BLANK_BLOCK_SIZE_H[7:0], r_BLANK_RANGE_REAL_IMAGE[0:0], 3'h0, r_BLANK_MARK_EN[0:0], r_BLANK_AUTO_EN[0:0], 2'h0 };
		w_addr0b44_rd	: r_prdata = { 16'h0, r_BLANK_CONT_PCT[7:0], r_BLANK_DARKBLK_TH[7:0] };
		w_addr0b48_rd	: r_prdata = { 15'h0, r_BLANK_MARK_UPPER[16:0] };
		w_addr0b4c_rd	: r_prdata = { 15'h0, r_BLANK_MARK_LOWER[16:0] };
		w_addr0b50_rd	: r_prdata = { 15'h0, r_BLANK_MARK_LEFT[16:0] };
		w_addr0b54_rd	: r_prdata = { 15'h0, r_BLANK_MARK_RIGHT[16:0] };
		w_addr0b58_rd	: r_prdata = { r_BLANK_COLORBLOCK_CB_THL[7:0], r_BLANK_COLORBLOCK_CB_THU[7:0], r_BLANK_COLORBLOCK_CR_THL[7:0], r_BLANK_COLORBLOCK_CR_THU[7:0] };
		w_addr0b5c_rd	: r_prdata = { r_BLANK_TBLK_PAGE[31:0] };
		w_addr0b60_rd	: r_prdata = { r_BLANK_CONTBLK_PAGE[31:0] };
		w_addr0b64_rd	: r_prdata = { r_BLANK_BLACKBLK_PAGE[31:0] };
		w_addr0b68_rd	: r_prdata = { r_BLANK_DARKBLK[31:0] };
		w_addr0b6c_rd	: r_prdata = { r_BLANK_CBLK[31:0] };
		w_addr0b70_rd	: r_prdata = { 16'h0, r_BLANK_Y_MIN[7:0], r_BLANK_U_MAX[7:0] };
		w_addr0b74_rd	: r_prdata = { 16'h0, r_BLANK_CB_MIN[7:0], r_BLANK_CB_MAX[7:0] };
		w_addr0b78_rd	: r_prdata = { 16'h0, r_BLANK_CR_MIN[7:0], r_BLANK_CR_MAX[7:0] };
		w_addr0b80_rd	: r_prdata = { 7'h0, r_RC2_OUTIMG_WIDTH[8:0], 8'h0, r_RC2_OUTIMG_HEIGHT[7:0] };
		w_addr0b84_rd	: r_prdata = { 23'h0, r_RC2_MASK_IMG_BD[0:0], 2'h0, r_RC2_OVERLAP[5:0] };
		w_addr0b88_rd	: r_prdata = { 4'h0, r_RC2_V_FRAC[11:0], 4'h0, r_RC2_H_FRAC[11:0] };
		w_addr0bc0_rd	: r_prdata = { 8'h0, r_EDGE_TH[7:0], 15'h0, r_MIRROR[0:0] };
		w_addr0bc4_rd	: r_prdata = { 8'h0, r_EDGE_CNT_TH[7:0], r_EDGE_Y_HIGH[7:0], r_EDGE_Y_LOW[7:0] };
		w_addr0bc8_rd	: r_prdata = { r_EDGE_CB_HIGH[7:0], r_EDGE_CB_LOW[7:0], r_EDGE_CR_HIGH[7:0], r_EDGE_CR_LOW[7:0] };
		w_addr0bcc_rd	: r_prdata = { 16'h0, r_EURion_Y_HIGH[7:0], r_EURion_Y_LOW[7:0] };
		w_addr0bd0_rd	: r_prdata = { r_EURion_CB_HIGH[7:0], r_EURion_CB_LOW[7:0], r_EURion_CR_HIGH[7:0], r_EURion_CR_LOW[7:0] };
		w_addr0bd4_rd	: r_prdata = { r_OFFSET_LEFT[7:0], r_OFFSET_RIGHT[7:0], r_OFFSET_TOP[7:0], r_OFFSET_BOTTOM[7:0] };
		w_addr0bd8_rd	: r_prdata = { r_CONTENS_START[15:0], r_CONTENS_END[15:0] };
		w_addr0c84_rd	: r_prdata = { r_SMAP_R_Range1[7:0], r_SMAP_R_Range2[7:0], r_SMAP_G_Range1[7:0], r_SMAP_G_Range2[7:0] };
		w_addr0c88_rd	: r_prdata = { r_SMAP_B_Range1[7:0], r_SMAP_B_Range2[7:0], 
									r_SMAP_BinTH1[3:0], r_SMAP_BinTH2[3:0], r_SMAP_BinTH3[3:0], 3'h0, r_SMAP_Refine_Enable[0:0] };
		w_addr0c8c_rd	: r_prdata = { 22'h0, r_SMAP_ADAPT_AVGDIV[5:0], 3'h0, r_SMAP_ADAPT_EN[0:0] };
		w_addr0c90_rd	: r_prdata = { r_SMAP_ADAPT_R_MAX03[7:0], r_SMAP_ADAPT_R_MAX02[7:0], r_SMAP_ADAPT_R_MAX01[7:0], r_SMAP_ADAPT_R_MAX00[7:0] };
		w_addr0c94_rd	: r_prdata = { r_SMAP_ADAPT_R_MAX13[7:0], r_SMAP_ADAPT_R_MAX12[7:0], r_SMAP_ADAPT_R_MAX11[7:0], r_SMAP_ADAPT_R_MAX10[7:0] };
		w_addr0c98_rd	: r_prdata = { r_SMAP_ADAPT_R_MAX23[7:0], r_SMAP_ADAPT_R_MAX22[7:0], r_SMAP_ADAPT_R_MAX21[7:0], r_SMAP_ADAPT_R_MAX20[7:0] };
		w_addr0c9c_rd	: r_prdata = { r_SMAP_ADAPT_R_MAX33[7:0], r_SMAP_ADAPT_R_MAX32[7:0], r_SMAP_ADAPT_R_MAX31[7:0], r_SMAP_ADAPT_R_MAX30[7:0] };
		w_addr0ca0_rd	: r_prdata = { r_SMAP_ADAPT_R_MAX43[7:0], r_SMAP_ADAPT_R_MAX42[7:0], r_SMAP_ADAPT_R_MAX41[7:0], r_SMAP_ADAPT_R_MAX40[7:0] };
		w_addr0ca4_rd	: r_prdata = { r_SMAP_ADAPT_R_MAX53[7:0], r_SMAP_ADAPT_R_MAX52[7:0], r_SMAP_ADAPT_R_MAX51[7:0], r_SMAP_ADAPT_R_MAX50[7:0] };
		w_addr0ca8_rd	: r_prdata = { r_SMAP_ADAPT_R_MAX63[7:0], r_SMAP_ADAPT_R_MAX62[7:0], r_SMAP_ADAPT_R_MAX61[7:0], r_SMAP_ADAPT_R_MAX60[7:0] };
		w_addr0cac_rd	: r_prdata = { r_SMAP_ADAPT_R_MAX73[7:0], r_SMAP_ADAPT_R_MAX72[7:0], r_SMAP_ADAPT_R_MAX71[7:0], r_SMAP_ADAPT_R_MAX70[7:0] };
		w_addr0cb0_rd	: r_prdata = { r_SMAP_ADAPT_R_MIN03[7:0], r_SMAP_ADAPT_R_MIN02[7:0], r_SMAP_ADAPT_R_MIN01[7:0], r_SMAP_ADAPT_R_MIN00[7:0] };
		w_addr0cb4_rd	: r_prdata = { r_SMAP_ADAPT_R_MIN13[7:0], r_SMAP_ADAPT_R_MIN12[7:0], r_SMAP_ADAPT_R_MIN11[7:0], r_SMAP_ADAPT_R_MIN10[7:0] };
		w_addr0cb8_rd	: r_prdata = { r_SMAP_ADAPT_R_MIN23[7:0], r_SMAP_ADAPT_R_MIN22[7:0], r_SMAP_ADAPT_R_MIN21[7:0], r_SMAP_ADAPT_R_MIN20[7:0] };
		w_addr0cbc_rd	: r_prdata = { r_SMAP_ADAPT_R_MIN33[7:0], r_SMAP_ADAPT_R_MIN32[7:0], r_SMAP_ADAPT_R_MIN31[7:0], r_SMAP_ADAPT_R_MIN30[7:0] };
		w_addr0cc0_rd	: r_prdata = { r_SMAP_ADAPT_R_MIN43[7:0], r_SMAP_ADAPT_R_MIN42[7:0], r_SMAP_ADAPT_R_MIN41[7:0], r_SMAP_ADAPT_R_MIN40[7:0] };
		w_addr0cc4_rd	: r_prdata = { r_SMAP_ADAPT_R_MIN53[7:0], r_SMAP_ADAPT_R_MIN52[7:0], r_SMAP_ADAPT_R_MIN51[7:0], r_SMAP_ADAPT_R_MIN50[7:0] };
		w_addr0cc8_rd	: r_prdata = { r_SMAP_ADAPT_R_MIN63[7:0], r_SMAP_ADAPT_R_MIN62[7:0], r_SMAP_ADAPT_R_MIN61[7:0], r_SMAP_ADAPT_R_MIN60[7:0] };
		w_addr0ccc_rd	: r_prdata = { r_SMAP_ADAPT_R_MIN73[7:0], r_SMAP_ADAPT_R_MIN72[7:0], r_SMAP_ADAPT_R_MIN71[7:0], r_SMAP_ADAPT_R_MIN70[7:0] };
		w_addr0cd0_rd	: r_prdata = { r_SMAP_ADAPT_G_MAX03[7:0], r_SMAP_ADAPT_G_MAX02[7:0], r_SMAP_ADAPT_G_MAX01[7:0], r_SMAP_ADAPT_G_MAX00[7:0] };
		w_addr0cd4_rd	: r_prdata = { r_SMAP_ADAPT_G_MAX13[7:0], r_SMAP_ADAPT_G_MAX12[7:0], r_SMAP_ADAPT_G_MAX11[7:0], r_SMAP_ADAPT_G_MAX10[7:0] };
		w_addr0cd8_rd	: r_prdata = { r_SMAP_ADAPT_G_MAX23[7:0], r_SMAP_ADAPT_G_MAX22[7:0], r_SMAP_ADAPT_G_MAX21[7:0], r_SMAP_ADAPT_G_MAX20[7:0] };
		w_addr0cdc_rd	: r_prdata = { r_SMAP_ADAPT_G_MAX33[7:0], r_SMAP_ADAPT_G_MAX32[7:0], r_SMAP_ADAPT_G_MAX31[7:0], r_SMAP_ADAPT_G_MAX30[7:0] };
		w_addr0ce0_rd	: r_prdata = { r_SMAP_ADAPT_G_MAX43[7:0], r_SMAP_ADAPT_G_MAX42[7:0], r_SMAP_ADAPT_G_MAX41[7:0], r_SMAP_ADAPT_G_MAX40[7:0] };
		w_addr0ce4_rd	: r_prdata = { r_SMAP_ADAPT_G_MAX53[7:0], r_SMAP_ADAPT_G_MAX52[7:0], r_SMAP_ADAPT_G_MAX51[7:0], r_SMAP_ADAPT_G_MAX50[7:0] };
		w_addr0ce8_rd	: r_prdata = { r_SMAP_ADAPT_G_MAX63[7:0], r_SMAP_ADAPT_G_MAX62[7:0], r_SMAP_ADAPT_G_MAX61[7:0], r_SMAP_ADAPT_G_MAX60[7:0] };
		w_addr0cec_rd	: r_prdata = { r_SMAP_ADAPT_G_MAX73[7:0], r_SMAP_ADAPT_G_MAX72[7:0], r_SMAP_ADAPT_G_MAX71[7:0], r_SMAP_ADAPT_G_MAX70[7:0] };
		w_addr0cf0_rd	: r_prdata = { r_SMAP_ADAPT_G_MIN03[7:0], r_SMAP_ADAPT_G_MIN02[7:0], r_SMAP_ADAPT_G_MIN01[7:0], r_SMAP_ADAPT_G_MIN00[7:0] };
		w_addr0cf4_rd	: r_prdata = { r_SMAP_ADAPT_G_MIN13[7:0], r_SMAP_ADAPT_G_MIN12[7:0], r_SMAP_ADAPT_G_MIN11[7:0], r_SMAP_ADAPT_G_MIN10[7:0] };
		w_addr0cf8_rd	: r_prdata = { r_SMAP_ADAPT_G_MIN23[7:0], r_SMAP_ADAPT_G_MIN22[7:0], r_SMAP_ADAPT_G_MIN21[7:0], r_SMAP_ADAPT_G_MIN20[7:0] };
		w_addr0cfc_rd	: r_prdata = { r_SMAP_ADAPT_G_MIN33[7:0], r_SMAP_ADAPT_G_MIN32[7:0], r_SMAP_ADAPT_G_MIN31[7:0], r_SMAP_ADAPT_G_MIN30[7:0] };
		w_addr0d00_rd	: r_prdata = { r_SMAP_ADAPT_G_MIN43[7:0], r_SMAP_ADAPT_G_MIN42[7:0], r_SMAP_ADAPT_G_MIN41[7:0], r_SMAP_ADAPT_G_MIN40[7:0] };
		w_addr0d04_rd	: r_prdata = { r_SMAP_ADAPT_G_MIN53[7:0], r_SMAP_ADAPT_G_MIN52[7:0], r_SMAP_ADAPT_G_MIN51[7:0], r_SMAP_ADAPT_G_MIN50[7:0] };
		w_addr0d08_rd	: r_prdata = { r_SMAP_ADAPT_G_MIN63[7:0], r_SMAP_ADAPT_G_MIN62[7:0], r_SMAP_ADAPT_G_MIN61[7:0], r_SMAP_ADAPT_G_MIN60[7:0] };
		w_addr0d0c_rd	: r_prdata = { r_SMAP_ADAPT_G_MIN73[7:0], r_SMAP_ADAPT_G_MIN72[7:0], r_SMAP_ADAPT_G_MIN71[7:0], r_SMAP_ADAPT_G_MIN70[7:0] };
		w_addr0d10_rd	: r_prdata = { r_SMAP_ADAPT_B_MAX03[7:0], r_SMAP_ADAPT_B_MAX02[7:0], r_SMAP_ADAPT_B_MAX01[7:0], r_SMAP_ADAPT_B_MAX00[7:0] };
		w_addr0d14_rd	: r_prdata = { r_SMAP_ADAPT_B_MAX13[7:0], r_SMAP_ADAPT_B_MAX12[7:0], r_SMAP_ADAPT_B_MAX11[7:0], r_SMAP_ADAPT_B_MAX10[7:0] };
		w_addr0d18_rd	: r_prdata = { r_SMAP_ADAPT_B_MAX23[7:0], r_SMAP_ADAPT_B_MAX22[7:0], r_SMAP_ADAPT_B_MAX21[7:0], r_SMAP_ADAPT_B_MAX20[7:0] };
		w_addr0d1c_rd	: r_prdata = { r_SMAP_ADAPT_B_MAX33[7:0], r_SMAP_ADAPT_B_MAX32[7:0], r_SMAP_ADAPT_B_MAX31[7:0], r_SMAP_ADAPT_B_MAX30[7:0] };
		w_addr0d20_rd	: r_prdata = { r_SMAP_ADAPT_B_MAX43[7:0], r_SMAP_ADAPT_B_MAX42[7:0], r_SMAP_ADAPT_B_MAX41[7:0], r_SMAP_ADAPT_B_MAX40[7:0] };
		w_addr0d24_rd	: r_prdata = { r_SMAP_ADAPT_B_MAX53[7:0], r_SMAP_ADAPT_B_MAX52[7:0], r_SMAP_ADAPT_B_MAX51[7:0], r_SMAP_ADAPT_B_MAX50[7:0] };
		w_addr0d28_rd	: r_prdata = { r_SMAP_ADAPT_B_MAX63[7:0], r_SMAP_ADAPT_B_MAX62[7:0], r_SMAP_ADAPT_B_MAX61[7:0], r_SMAP_ADAPT_B_MAX60[7:0] };
		w_addr0d2c_rd	: r_prdata = { r_SMAP_ADAPT_B_MAX73[7:0], r_SMAP_ADAPT_B_MAX72[7:0], r_SMAP_ADAPT_B_MAX71[7:0], r_SMAP_ADAPT_B_MAX70[7:0] };
		w_addr0d30_rd	: r_prdata = { r_SMAP_ADAPT_B_MIN03[7:0], r_SMAP_ADAPT_B_MIN02[7:0], r_SMAP_ADAPT_B_MIN01[7:0], r_SMAP_ADAPT_B_MIN00[7:0] };
		w_addr0d34_rd	: r_prdata = { r_SMAP_ADAPT_B_MIN13[7:0], r_SMAP_ADAPT_B_MIN12[7:0], r_SMAP_ADAPT_B_MIN11[7:0], r_SMAP_ADAPT_B_MIN10[7:0] };
		w_addr0d38_rd	: r_prdata = { r_SMAP_ADAPT_B_MIN23[7:0], r_SMAP_ADAPT_B_MIN22[7:0], r_SMAP_ADAPT_B_MIN21[7:0], r_SMAP_ADAPT_B_MIN20[7:0] };
		w_addr0d3c_rd	: r_prdata = { r_SMAP_ADAPT_B_MIN33[7:0], r_SMAP_ADAPT_B_MIN32[7:0], r_SMAP_ADAPT_B_MIN31[7:0], r_SMAP_ADAPT_B_MIN30[7:0] };
		w_addr0d40_rd	: r_prdata = { r_SMAP_ADAPT_B_MIN43[7:0], r_SMAP_ADAPT_B_MIN42[7:0], r_SMAP_ADAPT_B_MIN41[7:0], r_SMAP_ADAPT_B_MIN40[7:0] };
		w_addr0d44_rd	: r_prdata = { r_SMAP_ADAPT_B_MIN53[7:0], r_SMAP_ADAPT_B_MIN52[7:0], r_SMAP_ADAPT_B_MIN51[7:0], r_SMAP_ADAPT_B_MIN50[7:0] };
		w_addr0d48_rd	: r_prdata = { r_SMAP_ADAPT_B_MIN63[7:0], r_SMAP_ADAPT_B_MIN62[7:0], r_SMAP_ADAPT_B_MIN61[7:0], r_SMAP_ADAPT_B_MIN60[7:0] };
		w_addr0d4c_rd	: r_prdata = { r_SMAP_ADAPT_B_MIN73[7:0], r_SMAP_ADAPT_B_MIN72[7:0], r_SMAP_ADAPT_B_MIN71[7:0], r_SMAP_ADAPT_B_MIN70[7:0] };
		w_addr108c_rd	: r_prdata = { 24'h0, r_TBL_ADDR_00_UP[7:0] };
		w_addr1090_rd	: r_prdata = { 24'h0, r_TBL_ADDR_01_UP[7:0] };
		w_addr1094_rd	: r_prdata = { 24'h0, r_TBL_ADDR_02_UP[7:0] };
		w_addr1098_rd	: r_prdata = { 24'h0, r_TBL_ADDR_03_UP[7:0] };
		w_addr109c_rd	: r_prdata = { 24'h0, r_TBL_ADDR_04_UP[7:0] };
		w_addr10a0_rd	: r_prdata = { 24'h0, r_TBL_ADDR_05_UP[7:0] };
		w_addr10a4_rd	: r_prdata = { 24'h0, r_TBL_ADDR_06_UP[7:0] };
		w_addr10a8_rd	: r_prdata = { 24'h0, r_TBL_ADDR_07_UP[7:0] };
		w_addr10ac_rd	: r_prdata = { 24'h0, r_TBL_ADDR_08_UP[7:0] };
		w_addr10b0_rd	: r_prdata = { 24'h0, r_TBL_ADDR_09_UP[7:0] };
		w_addr10b4_rd	: r_prdata = { 24'h0, r_TBL_ADDR_10_UP[7:0] };
		w_addr10b8_rd	: r_prdata = { 24'h0, r_TBL_ADDR_11_UP[7:0] };
		w_addr10bc_rd	: r_prdata = { 24'h0, r_TBL_ADDR_12_UP[7:0] };
		w_addr10c0_rd	: r_prdata = { 24'h0, r_TBL_ADDR_13_UP[7:0] };
		w_addr10c4_rd	: r_prdata = { 24'h0, r_TBL_ADDR_14_UP[7:0] };
		w_addr10c8_rd	: r_prdata = { 24'h0, r_TBL_ADDR_15_UP[7:0] };
		w_addr10cc_rd	: r_prdata = { 24'h0, r_TBL_ADDR_16_UP[7:0] };
		w_addr10d0_rd	: r_prdata = { 24'h0, r_TBL_ADDR_17_UP[7:0] };
		w_addr10d4_rd	: r_prdata = { 24'h0, r_TBL_ADDR_18_UP[7:0] };
		w_addr10d8_rd	: r_prdata = { 24'h0, r_TBL_ADDR_19_UP[7:0] };
		w_addr10dc_rd	: r_prdata = { 24'h0, r_TBL_ADDR_20_UP[7:0] };
		w_addr10e0_rd	: r_prdata = { 24'h0, r_TBL_ADDR_21_UP[7:0] };
		w_addr10e4_rd	: r_prdata = { 24'h0, r_TBL_ADDR_22_UP[7:0] };
		w_addr10e8_rd	: r_prdata = { 24'h0, r_TBL_ADDR_23_UP[7:0] };
		w_addr10ec_rd	: r_prdata = { 24'h0, r_TBL_ADDR_24_UP[7:0] };
		w_addr114c_rd	: r_prdata = { 24'h0, r_RX_CH0_PREV_ADDR_UP[7:0] };
		w_addr1150_rd	: r_prdata = { 24'h0, r_RX_CH1_PREV_ADDR_UP[7:0] };
		w_addr1154_rd	: r_prdata = { 24'h0, r_RX_CH2_PREV_ADDR_UP[7:0] };
		w_addr1158_rd	: r_prdata = { 24'h0, r_RX_CH0_CURR_ADDR_UP[7:0] };
		w_addr115c_rd	: r_prdata = { 24'h0, r_RX_CH1_CURR_ADDR_UP[7:0] };
		w_addr1160_rd	: r_prdata = { 24'h0, r_RX_CH2_CURR_ADDR_UP[7:0] };
		w_addr1164_rd	: r_prdata = { 24'h0, r_RX_CH0_START_ADDR_UP[7:0] };
		w_addr1168_rd	: r_prdata = { 24'h0, r_RX_CH1_START_ADDR_UP[7:0] };
		w_addr116c_rd	: r_prdata = { 24'h0, r_RX_CH2_START_ADDR_UP[7:0] };
		w_addr1178_rd	: r_prdata = { 24'h0, r_RX_CUR_ADDR_CH0_UP[7:0] };
		w_addr117c_rd	: r_prdata = { 24'h0, r_RX_CUR_ADDR_CH1_UP[7:0] };
		w_addr1180_rd	: r_prdata = { 24'h0, r_RX_CUR_ADDR_CH2_UP[7:0] };
		w_addr11d4_rd	: r_prdata = { 24'h0, r_TX_CH0_START_ADDR_UP[7:0] };
		w_addr11d8_rd	: r_prdata = { 24'h0, r_TX_CH1_START_ADDR_UP[7:0] };
		w_addr11dc_rd	: r_prdata = { 24'h0, r_TX_CH2_START_ADDR_UP[7:0] };
		w_addr11f0_rd	: r_prdata = { 24'h0, r_TX_ADDR_CH0_MAX_UP[7:0] };
		w_addr11f4_rd	: r_prdata = { 24'h0, r_TX_ADDR_CH0_MIN_UP[7:0] };
		w_addr11f8_rd	: r_prdata = { 24'h0, r_TX_ADDR_CH1_MAX_UP[7:0] };
		w_addr11fc_rd	: r_prdata = { 24'h0, r_TX_ADDR_CH1_MIN_UP[7:0] };
		w_addr1200_rd	: r_prdata = { 24'h0, r_TX_ADDR_CH2_MAX_UP[7:0] };
		w_addr1204_rd	: r_prdata = { 24'h0, r_TX_ADDR_CH2_MIN_UP[7:0] };
		w_addr1218_rd	: r_prdata = { 24'h0, r_TX_CH0_CUR_ADDR_UP[7:0] };
		w_addr121c_rd	: r_prdata = { 24'h0, r_TX_CH1_CUR_ADDR_UP[7:0] };
		w_addr1220_rd	: r_prdata = { 24'h0, r_TX_CH2_CUR_ADDR_UP[7:0] };
		w_addr1284_rd	: r_prdata = { 24'h0, r_ADAPT_ADDR_UP[7:0] };
		w_addr1290_rd	: r_prdata = { 24'h0, r_ADAPT_TX_ADDR_MAX_UP[7:0] };
		w_addr1294_rd	: r_prdata = { 24'h0, r_ADAPT_TX_ADDR_MIN_UP[7:0] };
		w_addr1298_rd	: r_prdata = { 24'h0, r_ADAPT_TX_CUR_ADDR_UP[7:0] };
		w_addr12c4_rd	: r_prdata = { 24'h0, r_SMAP_ADDR_UP[7:0] };
		w_addr12d0_rd	: r_prdata = { 24'h0, r_SMAP_TX_ADDR_MAX_UP[7:0] };
		w_addr12d4_rd	: r_prdata = { 24'h0, r_SMAP_TX_ADDR_MIN_UP[7:0] };
		w_addr12d8_rd	: r_prdata = { 24'h0, r_SMAP_TX_CUR_ADDR_UP[7:0] };
		w_addr1304_rd	: r_prdata = { 24'h0, r_BDS_ADDR_UP[7:0] };
		w_addr1310_rd	: r_prdata = { 24'h0, r_BDS_TX_ADDR_MAX_UP[7:0] };
		w_addr1314_rd	: r_prdata = { 24'h0, r_BDS_TX_ADDR_MIN_UP[7:0] };
		w_addr1318_rd	: r_prdata = { 24'h0, r_BDS_TX_CUR_ADDR_UP[7:0] };
		w_addr1320_rd	: r_prdata = { r_ADAPT_DMA_BUF_WR_CNT[31:0] };
		w_addr1324_rd	: r_prdata = { r_ADAPT_DMA_BUF_RD_CNT[31:0] };
		w_addr1328_rd	: r_prdata = { r_ADAPT_DMA_OUT0_CNT[31:0] };
		w_addr132c_rd	: r_prdata = { r_SMAP_DMA_BUF_WR_CNT[31:0] };
		w_addr1330_rd	: r_prdata = { r_SMAP_DMA_BUF_RD_CNT[31:0] };
		w_addr1334_rd	: r_prdata = { r_SMAP_DMA_OUT0_CNT[31:0] };
		w_addr1338_rd	: r_prdata = { r_BDS_DMA_BUF_WR_CNT[31:0] };
		w_addr133c_rd	: r_prdata = { r_BDS_DMA_BUF_RD_CNT[31:0] };
		w_addr1340_rd	: r_prdata = { r_BDS_DMA_OUT0_CNT[31:0] };
		w_addr1344_rd	: r_prdata = { r_ADAPT_WDATA_CNT[31:0] };
		w_addr1348_rd	: r_prdata = { r_SMAP_WDATA_CNT[31:0] };
		w_addr134c_rd	: r_prdata = { r_BDS_WDATA_CNT[31:0] };
		default		: r_prdata	= 32'h0;
	endcase
end

assign o_PRDATA	= r_prdata;



endmodule
